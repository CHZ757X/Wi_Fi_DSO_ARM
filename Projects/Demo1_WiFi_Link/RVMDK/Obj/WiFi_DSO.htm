<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\WiFi_DSO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\WiFi_DSO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue May 23 13:13:09 2017
<BR><P>
<H3>Maximum Stack Usage =       6336 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; select &rArr; ssl_select &rArr; ProcessReply_tinywait &rArr; DoProcessReply &rArr; DoHandShakeMsg &rArr; DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[214]">host_platform_sdio_transfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[217]">host_rtos_get_semaphore</a><BR>
 <LI><a href="#[19d]">is_subnet_bcast_addr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19d]">is_subnet_bcast_addr</a><BR>
 <LI><a href="#[135]">ifdown</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f5]">ifctl_tick</a><BR>
 <LI><a href="#[453]">wiced_send_sdpcm_common</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[217]">host_rtos_get_semaphore</a><BR>
 <LI><a href="#[2c0]">arpcache_load</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c0]">arpcache_load</a><BR>
 <LI><a href="#[425]">wiced_wifi_remove_packet_filter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[458]">wiced_send_iovar</a><BR>
 <LI><a href="#[480]">wiced_wifi_toggle_packet_filter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[458]">wiced_send_iovar</a><BR>
 <LI><a href="#[424]">wiced_wifi_disable_monitor_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[458]">wiced_send_iovar</a><BR>
 <LI><a href="#[19c]">is_subnet_net_addr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19c]">is_subnet_net_addr</a><BR>
 <LI><a href="#[31f]">tcp_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31f]">tcp_close</a><BR>
 <LI><a href="#[440]">wiced_get_packet_to_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[217]">host_rtos_get_semaphore</a><BR>
 <LI><a href="#[54f]">cyssl_mp_exptmod</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54f]">cyssl_mp_exptmod</a><BR>
 <LI><a href="#[ee]">udp_sock_sendto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ee]">udp_sock_sendto</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ADC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[15]">BusFault_Handler</a> from stm32f2xx_it.o(i.BusFault_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2f]">CAN1_RX0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[30]">CAN1_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[31]">CAN1_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2e]">CAN1_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5b]">CAN2_RX0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5c]">CAN2_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5d]">CAN2_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5a]">CAN2_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6a]">CRYP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[69]">DCMI_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream2_IRQHandler</a> from stm32f2xx_it.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream3_IRQHandler</a> from stm32f2xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[18]">DebugMon_Handler</a> from stm32f2xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[58]">ETH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[59]">ETH_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[21]">EXTI0_IRQHandler</a> from stm32f2xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[43]">EXTI15_10_IRQHandler</a> from stm32f2xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[22]">EXTI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[23]">EXTI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[24]">EXTI3_IRQHandler</a> from stm32f2xx_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[25]">EXTI4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[32]">EXTI9_5_IRQHandler</a> from stm32f2xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1f]">FLASH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4b]">FSMC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6b]">HASH_RNG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from stm32f2xx_it.o(i.HardFault_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7d]">Hmac</a> from cyassl_int.o(.text) referenced from cyassl_int.o(.text)
 <LI><a href="#[3b]">I2C1_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3a]">I2C1_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3d]">I2C2_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3c]">I2C2_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[64]">I2C3_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[63]">I2C3_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[14]">MemManage_Handler</a> from stm32f2xx_it.o(i.MemManage_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from stm32f2xx_it.o(i.NMI_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5e]">OTG_FS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[45]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[66]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[65]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[68]">OTG_HS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1c]">PVD_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from stm32f2xx_it.o(i.PendSV_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[94]">RCC_AHB1PeriphClockCmd</a> from stm32f2xx_rcc.o(i.RCC_AHB1PeriphClockCmd) referenced 4 times from platform.o(.constdata)
 <LI><a href="#[95]">RCC_APB1PeriphClockCmd</a> from stm32f2xx_rcc.o(i.RCC_APB1PeriphClockCmd) referenced from platform.o(.constdata)
 <LI><a href="#[93]">RCC_APB2PeriphClockCmd</a> from stm32f2xx_rcc.o(i.RCC_APB2PeriphClockCmd) referenced 2 times from platform.o(.constdata)
 <LI><a href="#[20]">RCC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[44]">RTC_Alarm_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1e]">RTC_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[96]">Reset_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4c]">SDIO_IRQHandler</a> from stm32f2xx_it.o(i.SDIO_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3e]">SPI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3f]">SPI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4e]">SPI3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from stm32f2xx_it.o(i.SVC_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from stm32f2xx_it.o(i.SysTick_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6d]">SystemInit</a> from system_stm32f2xx.o(i.SystemInit) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[1d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[33]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[36]">TIM1_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[35]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[34]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[37]">TIM2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[38]">TIM3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[39]">TIM4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4d]">TIM5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[51]">TIM6_DAC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[52]">TIM7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[46]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[49]">TIM8_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[48]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[47]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[8d]">TLS_hmac</a> from tls.o(.text) referenced from keys.o(.text)
 <LI><a href="#[4f]">UART4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[50]">UART5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[40]">USART1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[41]">USART2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[42]">USART3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[62]">USART6_IRQHandler</a> from stm32f2xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[16]">UsageFault_Handler</a> from stm32f2xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1b]">WWDG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[10]">_AdjMasterXPosition</a> from xcontrol.o(i._AdjMasterXPosition) referenced 2 times from xcontrol.o(.data)
 <LI><a href="#[f]">_AdjMasterXSensitivity</a> from xcontrol.o(i._AdjMasterXSensitivity) referenced 2 times from xcontrol.o(.data)
 <LI><a href="#[8f]">_Button_irq_handler</a> from platform.o(i._Button_irq_handler) referenced from platform.o(i.Button_Init)
 <LI><a href="#[c]">_GetChannelVolt</a> from ycontrol.o(i._GetChannelVolt) referenced 2 times from ycontrol.o(.data)
 <LI><a href="#[e]">_GetMasterDepth</a> from xcontrol.o(i._GetMasterDepth) referenced 2 times from xcontrol.o(.data)
 <LI><a href="#[d]">_GetMasterTimePerDiv</a> from xcontrol.o(i._GetMasterTimePerDiv) referenced 2 times from xcontrol.o(.data)
 <LI><a href="#[6e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[91]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[92]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[60b]">cyssl_fast_mp_montgomery_reduce</a> from integer.o(.text) referenced from integer.o(.text)
 <LI><a href="#[7f]">easy_link_fail</a> from easylink.o(.text) referenced from easylink.o(.text)
 <LI><a href="#[82]">easy_link_success</a> from easylink.o(.text) referenced from easylink.o(.text)
 <LI><a href="#[72]">enable_ps</a> from wifimgr.o(.text) referenced from wifimgr.o(.text)
 <LI><a href="#[90]">fputc</a> from platform.o(i.fputc) referenced from printf8.o(i.__0fprintf$8)
 <LI><a href="#[90]">fputc</a> from platform.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[7e]">get_ssid_key_end</a> from easylink.o(.text) referenced from easylink.o(.text)
 <LI><a href="#[80]">get_ssid_key_start</a> from easylink.o(.text) referenced from easylink.o(.text)
 <LI><a href="#[76]">haier_loop_scan</a> from wifimgr.o(.text) referenced from wifimgr.o(.text)
 <LI><a href="#[b]">hw_Setsample_Master</a> from stm32_fpga_command.o(i.hw_Setsample_Master) referenced 2 times from stm32_fpga_command.o(.data)
 <LI><a href="#[0]">hw_Ysys_baseline</a> from stm32_fpga_command.o(i.hw_Ysys_baseline) referenced 4 times from stm32_fpga_command.o(.data)
 <LI><a href="#[1]">hw_Ysys_gain</a> from stm32_fpga_command.o(i.hw_Ysys_gain) referenced 6 times from stm32_fpga_command.o(.data)
 <LI><a href="#[2]">hw_hc4094ctrl</a> from stm32_fpga_command.o(i.hw_hc4094ctrl) referenced 8 times from stm32_fpga_command.o(.data)
 <LI><a href="#[8]">hw_setTriEdge</a> from stm32_fpga_command.o(i.hw_setTriEdge) referenced 4 times from stm32_fpga_command.o(.data)
 <LI><a href="#[3]">hw_setTriMode</a> from stm32_fpga_command.o(i.hw_setTriMode) referenced 4 times from stm32_fpga_command.o(.data)
 <LI><a href="#[9]">hw_setTriPw</a> from stm32_fpga_command.o(i.hw_setTriPw) referenced 4 times from stm32_fpga_command.o(.data)
 <LI><a href="#[6]">hw_setTriSource</a> from stm32_fpga_command.o(i.hw_setTriSource) referenced 4 times from stm32_fpga_command.o(.data)
 <LI><a href="#[4]">hw_setTriType</a> from stm32_fpga_command.o(i.hw_setTriType) referenced 4 times from stm32_fpga_command.o(.data)
 <LI><a href="#[7]">hw_setTriholdoff</a> from stm32_fpga_command.o(i.hw_setTriholdoff) referenced 2 times from stm32_fpga_command.o(.data)
 <LI><a href="#[5]">hw_setTrivolt</a> from stm32_fpga_command.o(i.hw_setTrivolt) referenced 8 times from stm32_fpga_command.o(.data)
 <LI><a href="#[a]">hw_xsys_deepMaster</a> from stm32_fpga_command.o(i.hw_xsys_deepMaster) referenced 4 times from stm32_fpga_command.o(.data)
 <LI><a href="#[6c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[60a]">mp_dr_reduce</a> from integer.o(.text) referenced from integer.o(.text)
 <LI><a href="#[60c]">mp_montgomery_reduce</a> from integer.o(.text) referenced from integer.o(.text)
 <LI><a href="#[601]">mp_reduce</a> from integer.o(.text) referenced from integer.o(.text)
 <LI><a href="#[608]">mp_reduce_2k</a> from integer.o(.text) referenced from integer.o(.text)
 <LI><a href="#[5fc]">mp_reduce_2k_l</a> from integer.o(.text) referenced from integer.o(.text)
 <LI><a href="#[6f]">nfc_config_stop</a> from nfc_tag.o(.text) referenced from file.o(.text)
 <LI><a href="#[7c]">nfc_irq_handler</a> from nfc_tag.o(.text) referenced from nfc_tag.o(.text)
 <LI><a href="#[24a]">nfc_read</a> from nfc_tag.o(.text) referenced from nfc_tag.o(.text)
 <LI><a href="#[77]">scan_finished</a> from wifimgr.o(.text) referenced from wifimgr.o(.text)
 <LI><a href="#[78]">scan_finished_adv</a> from wifimgr.o(.text) referenced from wifimgr.o(.text)
 <LI><a href="#[84]">scan_result_handler</a> from wwd_wifi.o(.text) referenced 2 times from wwd_wifi.o(.text)
 <LI><a href="#[75]">scan_results_handler</a> from wifimgr.o(.text) referenced 3 times from wifimgr.o(.text)
 <LI><a href="#[7b]">sdio_oob_irq_handler</a> from wwd_bus.o(.text) referenced from wwd_bus.o(.text)
 <LI><a href="#[79]">select_ap_to_join</a> from wifimgr.o(.text) referenced from wifimgr.o(.text)
 <LI><a href="#[7a]">sta_link_events_handler</a> from wifimgr.o(.text) referenced from wifimgr.o(.text)
 <LI><a href="#[81]">switch_channle</a> from easylink.o(.text) referenced 2 times from easylink.o(.text)
 <LI><a href="#[74]">uap_down_cb</a> from wifimgr.o(.text) referenced from wifimgr.o(.text)
 <LI><a href="#[73]">uap_up_cb</a> from wifimgr.o(.text) referenced from wifimgr.o(.text)
 <LI><a href="#[86]">wiced_handle_apsta_event</a> from wwd_ap.o(.text) referenced from wwd_ap.o(.text)
 <LI><a href="#[85]">wiced_join_events_handler</a> from wwd_wifi.o(.text) referenced from wwd_wifi.o(.text)
 <LI><a href="#[83]">wiced_thread_func</a> from wwd_thread.o(.text) referenced from wwd_thread.o(.text)
 <LI><a href="#[8a]">wiced_wps_rx_packet</a> from wps_host.o(.text) referenced from wps_host.o(.text)
 <LI><a href="#[89]">wiced_wps_thread_timeout</a> from wps_host.o(.text) referenced 2 times from wps_host.o(.text)
 <LI><a href="#[8b]">wiced_wps_timer_tick</a> from wps_host.o(.text) referenced from wps_host.o(.text)
 <LI><a href="#[71]">wifi_down_cb</a> from wifimgr.o(.text) referenced from wifimgr.o(.text)
 <LI><a href="#[70]">wifi_up_cb</a> from wifimgr.o(.text) referenced from wifimgr.o(.text)
 <LI><a href="#[8e]">wps_scan_result_handler</a> from wps_enrollee.o(.text) referenced from wps_enrollee.o(.text)
 <LI><a href="#[88]">wps_thread_msg_dequeue</a> from wps_host.o(.text) referenced from wps_host.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[6ab]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[97]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[64f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6ac]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[6ad]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[6ae]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[6af]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[6b0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[689]"></a>SystemReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_it.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainnetcmd
</UL>

<P><STRONG><a name="[99]"></a>asm_dump</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_it.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = asm_dump &rArr; hard_fault_handler_c &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[96]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))

<P><STRONG><a name="[2d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6b1]"></a>busy_udelay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>busy_delay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>

<P><STRONG><a name="[2f4]"></a>delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[9b]"></a>led_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = led_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[9d]"></a>led</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[9f]"></a>connection_status_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = connection_status_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[a0]"></a>set_conncetion_status</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_conncetion_status
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uap_connection
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_connection
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_led_enable
</UL>

<P><STRONG><a name="[a1]"></a>red_led_toggle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = red_led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_irq
</UL>

<P><STRONG><a name="[a3]"></a>green_led_toggle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = green_led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_irq
</UL>

<P><STRONG><a name="[a4]"></a>lib_led_enable</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_conncetion_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_led_conctrol
</UL>

<P><STRONG><a name="[a5]"></a>lib_led_control</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_led_conctrol
</UL>

<P><STRONG><a name="[2bd]"></a>lib_led_blink_cfg</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_led_conctrol
</UL>

<P><STRONG><a name="[af]"></a>systick_init</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = systick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[a6]"></a>watchdog_enable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = watchdog_enable &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipInit
</UL>

<P><STRONG><a name="[a7]"></a>watchdog_tick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = watchdog_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetWatchDog
</UL>

<P><STRONG><a name="[171]"></a>nfc_cfg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_config
</UL>

<P><STRONG><a name="[a8]"></a>app_verify</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = app_verify &rArr; verify_otp &rArr; generate_enc_data &rArr; aes_128_encrypt_block &rArr; aes_encrypt &rArr; AesSetKey &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_otp
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSLmode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_empty_fd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[aa]"></a>system_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000<LI>Call Chain = system_init &rArr; EmStack_Init &rArr; sock_init &rArr; _igmp_init &rArr; pd_addmulticast &rArr; wiced_wifi_register_multicast_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_platform
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clocks
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_architecture
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_TAG_INIT
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmStack_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_verify
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_conncetion_status
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_status_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipInit
</UL>

<P><STRONG><a name="[b2]"></a>md5_hex</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[b4]"></a>md5</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hex
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_md5
</UL>

<P><STRONG><a name="[b7]"></a>systick_irq</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = systick_irq &rArr; green_led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;green_led_toggle
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;red_led_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6b2]"></a>time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>str2hex</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = str2hex
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_connect_with_apinfo
</UL>

<P><STRONG><a name="[9a]"></a>hard_fault_handler_c</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hard_fault_handler_c &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asm_dump
</UL>

<P><STRONG><a name="[1ba]"></a>update_rx_data_timer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_recv
</UL>

<P><STRONG><a name="[462]"></a>update_tx_error_timer</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, utility.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_packet_to_send
</UL>

<P><STRONG><a name="[bb]"></a>health_monitor</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = health_monitor &rArr; send_arp_to_gw &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_arp_to_gw
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sta_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
</UL>

<P><STRONG><a name="[225]"></a>system_lib_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getversion
</UL>

<P><STRONG><a name="[b1]"></a>EmStack_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = EmStack_Init &rArr; sock_init &rArr; _igmp_init &rArr; pd_addmulticast &rArr; wiced_wifi_register_multicast_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcr_initdcr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[105]"></a>file_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipInit
</UL>

<P><STRONG><a name="[c9]"></a>fd_2_inode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMacbySocket
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buf_size
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSLmode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[6b3]"></a>inode_2_fd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>get_empty_fd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = get_empty_fd &rArr; app_verify &rArr; verify_otp &rArr; generate_enc_data &rArr; aes_128_encrypt_block &rArr; aes_encrypt &rArr; AesSetKey &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_in_use
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_empty_inode
</UL>

<P><STRONG><a name="[c2]"></a>get_empty_inode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = get_empty_inode &rArr; get_empty_fd &rArr; app_verify &rArr; verify_otp &rArr; generate_enc_data &rArr; aes_128_encrypt_block &rArr; aes_encrypt &rArr; AesSetKey &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_empty_fd
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[c6]"></a>socket</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = socket &rArr; get_empty_inode &rArr; get_empty_fd &rArr; app_verify &rArr; verify_otp &rArr; generate_enc_data &rArr; aes_128_encrypt_block &rArr; aes_encrypt &rArr; AesSetKey &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_empty_inode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_verify
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkdevice2cell
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_socket
</UL>

<P><STRONG><a name="[c8]"></a>setsockopt</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicast_leavegroup
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicast_joingroup
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_2_inode
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_setsockopt
</UL>

<P><STRONG><a name="[cc]"></a>socket_clean</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2392<LI>Call Chain = socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_ssl_close
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_fd
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_tcp_list
</UL>

<P><STRONG><a name="[ce]"></a>close</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2416<LI>Call Chain = close &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_free_buffer
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_close
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sock_close
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_ssl_close
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_clean
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_2_inode
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainnetcmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkdevice2cell
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSLmode
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_close
</UL>

<P><STRONG><a name="[d2]"></a>setSSLmode</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_wrap_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_connect_ssl
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_2_inode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_setSSLmode
</UL>

<P><STRONG><a name="[d5]"></a>bind</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136<LI>Call Chain = bind &rArr; udp_open &rArr; udp_extopen &rArr; _multicast_joingroup_userflag &rArr; _multicast_joingroup_userflag_iface &rArr; pd_addmulticast &rArr; wiced_wifi_register_multicast_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_2_inode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkdevice2cell
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_bind
</UL>

<P><STRONG><a name="[d7]"></a>connect</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_open
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_is_nonblock
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_established
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_closed
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_2_inode
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_connect
</UL>

<P><STRONG><a name="[de]"></a>listen</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = listen &rArr; app_verify &rArr; verify_otp &rArr; generate_enc_data &rArr; aes_128_encrypt_block &rArr; aes_encrypt &rArr; AesSetKey &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_start
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_open
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_2_inode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_listen
</UL>

<P><STRONG><a name="[e1]"></a>accept</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4888<LI>Call Chain = accept &rArr; fd_accept_ssl &rArr; SSL_accept &rArr; ProcessReply &rArr; DoProcessReply &rArr; DoHandShakeMsg &rArr; DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_established
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_accept_ssl
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_empty_inode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_2_inode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_accept
</UL>

<P><STRONG><a name="[e4]"></a>select</STRONG> (Thumb, 384 bytes, Stack size 168 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5000<LI>Call Chain = select &rArr; ssl_select &rArr; ProcessReply_tinywait &rArr; DoProcessReply &rArr; DoHandShakeMsg &rArr; DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_data_length
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_select
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_established
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_dataready
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_2_inode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_select
</UL>

<P><STRONG><a name="[e9]"></a>UartDataRT</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UartDataRT &rArr; uart_send_data &rArr; uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_data
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_data_length
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_rx_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[ec]"></a>send</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368<LI>Call Chain = send &rArr; sock_ssl_send &rArr; SSL_write &rArr; SendData &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_sendto
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_ssl_send
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDataRT
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_2_inode
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainnetcmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_send
</UL>

<P><STRONG><a name="[f0]"></a>sendto</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368<LI>Call Chain = sendto &rArr; sock_ssl_send &rArr; SSL_write &rArr; SendData &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_sendto
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_ssl_send
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDataRT
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_2_inode
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkdevice2cell
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_sendto
</UL>

<P><STRONG><a name="[f1]"></a>recv</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4944<LI>Call Chain = recv &rArr; sock_ssl_recv &rArr; SSL_read &rArr; ReceiveData &rArr; ProcessReply_tinywait &rArr; DoProcessReply &rArr; DoHandShakeMsg &rArr; DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_recvfrom
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_ssl_recv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fastread
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDataRT
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_2_inode
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_recv
</UL>

<P><STRONG><a name="[f6]"></a>recvfrom</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_recvfrom
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_ssl_recv
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_read
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDataRT
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_2_inode
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_recvfrom
</UL>

<P><STRONG><a name="[f8]"></a>read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_read
</UL>

<P><STRONG><a name="[f9]"></a>write</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_write
</UL>

<P><STRONG><a name="[fa]"></a>tx_buf_size</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_wr_len
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ssl_socket
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_2_inode
</UL>

<P><STRONG><a name="[fd]"></a>getMacbySocket</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_all_nonlocal_subnet
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ssl_socket
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_resolve
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_2_inode
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_getMacbySocket
</UL>

<P><STRONG><a name="[6b4]"></a>UartParaMgt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, file.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>GetUartPara</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_GetUartPara
</UL>

<P><STRONG><a name="[100]"></a>GetUartNum</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_GetUartNum
</UL>

<P><STRONG><a name="[255]"></a>SetUartPara</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_SetUartPara
</UL>

<P><STRONG><a name="[101]"></a>OpenUART</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_OpenUART
</UL>

<P><STRONG><a name="[103]"></a>mxchipInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2792<LI>Call Chain = mxchipInit &rArr; mf_test_main &rArr; udp_bcast_test &rArr; msleep &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2bb]"></a>get_reset_reason</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_is_softreset
</UL>

<P><STRONG><a name="[107]"></a>wifi_disconnect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = wifi_disconnect &rArr; wlan_disconnect &rArr; uap_stop &rArr; wiced_wifi_stop_ap &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_end
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenEasylink
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenEasylink2_withdata
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenEasylink2
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_down
</UL>

<P><STRONG><a name="[10a]"></a>wifi_power_down</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_off
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect
</UL>

<P><STRONG><a name="[10c]"></a>wifi_power_up</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = wifi_power_up &rArr; wiced_management_wifi_on &rArr; wiced_wifi_set_maxassoc &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_link_event_hander
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_on
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenEasylink
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetwork
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenConfigmodeWPS
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenEasylink2_withdata
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenEasylink2
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvScan
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScan
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipStartScan
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvNetwork
</UL>

<P><STRONG><a name="[10f]"></a>wifi_roam_trigger</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_roam_trigger
</UL>

<P><STRONG><a name="[111]"></a>mxchip_timer_tick</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mxchip_timer_tick &rArr; crypto_mem_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
</UL>

<P><STRONG><a name="[113]"></a>WatchDog</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetWatchDog
</UL>

<P><STRONG><a name="[112]"></a>resetWatchDog</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = resetWatchDog &rArr; watchdog_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDog
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_WatchDog
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_poll_all
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_image
</UL>

<P><STRONG><a name="[117]"></a>wifi_reboot_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
</UL>

<P><STRONG><a name="[115]"></a>mxchipTick</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2408<LI>Call Chain = mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reboot_event
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_tcp_list
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetWatchDog
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchip_timer_tick
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_monitor
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkdevice2cell
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_fifo
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_ExecuteCommand
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msleep
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mul
</UL>

<P><STRONG><a name="[118]"></a>msleep</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2424<LI>Call Chain = msleep &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetwork
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reboot_only
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvNetwork
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_msleep
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bcast_test
</UL>

<P><STRONG><a name="[119]"></a>CloseEasylink2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseEasylink2
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetwork
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvNetwork
</UL>

<P><STRONG><a name="[11b]"></a>CloseEasylink</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CloseEasylink
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetwork
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvNetwork
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_CloseEasylink
</UL>

<P><STRONG><a name="[11d]"></a>CloseConfigmodeWPS</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CloseConfigmodeWPS &rArr; wps_stop &rArr; SetTimer &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetwork
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvNetwork
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_CloseConfigmodeWPS
</UL>

<P><STRONG><a name="[11f]"></a>StartNetwork</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480<LI>Call Chain = StartNetwork &rArr; msleep &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_is_running
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_retry_interval
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_start
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_server_ip_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseConfigmodeWPS
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseEasylink
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseEasylink2
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msleep
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_up
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stationModeStart
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softAPModeStart
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_StartNetwork
</UL>

<P><STRONG><a name="[127]"></a>StartAdvNetwork</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_is_running
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_disconnect
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_connect_with_apinfo
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_start
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_server_ip_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseConfigmodeWPS
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseEasylink
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseEasylink2
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msleep
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_up
</UL>

<P><STRONG><a name="[12a]"></a>wifi_get_pmk</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_pmk
</UL>

<P><STRONG><a name="[1d1]"></a>is_sta_dhcp_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_link_up
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
</UL>

<P><STRONG><a name="[12c]"></a>getNetPara</STRONG> (Thumb, 248 bytes, Stack size 80 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_mac_address
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_server_get
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink_user_data_result
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiStatusHandler
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_getNetPara
</UL>

<P><STRONG><a name="[130]"></a>dhcp_up</STRONG> (Thumb, 144 bytes, Stack size 144 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = dhcp_up &rArr; sta_up &rArr; set_sta_connection &rArr; ifdown &rArr;  ifctl_tick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetCallback
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_mac_address
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_up
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_NetCallback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_results
</UL>

<P><STRONG><a name="[134]"></a>ReallocIP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = ReallocIP &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifup
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifdown
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_link_events_handler
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_ReallocIP
</UL>

<P><STRONG><a name="[137]"></a>gethostbyname</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_gethostbyname
</UL>

<P><STRONG><a name="[139]"></a>wifi_status_callback</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = wifi_status_callback &rArr; WifiStatusHandler &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiStatusHandler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_WifiStatusHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_down_cb
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_up_cb
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_down_cb
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_up_cb
</UL>

<P><STRONG><a name="[13c]"></a>mxchipStartScan</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_scan
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_scan_interval
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_up
</UL>

<P><STRONG><a name="[13f]"></a>StopScan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_StopScan
</UL>

<P><STRONG><a name="[141]"></a>StartScan</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_scan
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_scan_interval
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_up
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_StartScan
</UL>

<P><STRONG><a name="[142]"></a>StartAdvScan</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_adv_scan
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_up
</UL>

<P><STRONG><a name="[144]"></a>SetTimer_uniq</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SetTimer_uniq &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_results_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_finished
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uap_connection
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_connection
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_start
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_start
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_invalid_data
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_channle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ssid_key_start
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_channle
</UL>

<P><STRONG><a name="[145]"></a>SetTimer</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SetTimer &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_stop
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenConfigmodeNFC
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_SetTimer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_irq_handler
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_start_timer
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_thread
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_thread_msg_enqueue
</UL>

<P><STRONG><a name="[146]"></a>UnSetTimer</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
</UL>

<P><STRONG><a name="[147]"></a>sleep</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_sleep
</UL>

<P><STRONG><a name="[260]"></a>SelectSupport</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_SelectSupport
</UL>

<P><STRONG><a name="[6b5]"></a>msleep_notick</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, file.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>ntohs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_ntohs
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet_to_client
</UL>

<P><STRONG><a name="[14a]"></a>htons</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_htons
</UL>

<P><STRONG><a name="[14b]"></a>ntohl</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_ntohl
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet_to_client
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_address
</UL>

<P><STRONG><a name="[14d]"></a>htonl</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = htonl
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_htonl
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nn_swap
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_header
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_address
</UL>

<P><STRONG><a name="[6b6]"></a>enable_ps_mode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, file.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>disable_ps_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_powersave
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_disable
</UL>

<P><STRONG><a name="[263]"></a>ps_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_ps_enable
</UL>

<P><STRONG><a name="[150]"></a>ps_disable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_ps_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_ps_disable
</UL>

<P><STRONG><a name="[266]"></a>system_reload</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_system_reload
</UL>

<P><STRONG><a name="[259]"></a>is_uap_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_getNetPara
</UL>

<P><STRONG><a name="[1c6]"></a>is_ps_enabled</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_connection
</UL>

<P><STRONG><a name="[153]"></a>OpenEasylink</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = OpenEasylink &rArr; wifi_disconnect &rArr; wlan_disconnect &rArr; uap_stop &rArr; wiced_wifi_stop_ap &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_up
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkdevice2cell
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reboot
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_OpenEasylink
</UL>

<P><STRONG><a name="[155]"></a>OpenEasylink2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_up
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect
</UL>

<P><STRONG><a name="[157]"></a>OpenEasylink2_withdata</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_withdata
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_up
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect
</UL>

<P><STRONG><a name="[26c]"></a>OpenBT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_OpenBT
</UL>

<P><STRONG><a name="[26e]"></a>CloseBT</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_CloseBT
</UL>

<P><STRONG><a name="[270]"></a>SetBTAddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_SetBTAddr
</UL>

<P><STRONG><a name="[272]"></a>SetBTName</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_SetBTName
</UL>

<P><STRONG><a name="[274]"></a>SetBTpin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_SetBTpin
</UL>

<P><STRONG><a name="[276]"></a>SetBTboundleID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_SetBTboundleID
</UL>

<P><STRONG><a name="[278]"></a>SetBTseedID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_SetBTseedID
</UL>

<P><STRONG><a name="[27a]"></a>SetBTsdkProto</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_SetBTsdkProto
</UL>

<P><STRONG><a name="[27c]"></a>SetBT_SearchAppPara</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_SetBT_SearchAppPara
</UL>

<P><STRONG><a name="[27e]"></a>GetBTArg</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_GetBTArg
</UL>

<P><STRONG><a name="[280]"></a>GetBTDevlist</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_GetBTDevlist
</UL>

<P><STRONG><a name="[282]"></a>GetBTLastDev</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_GetBTLastDev
</UL>

<P><STRONG><a name="[159]"></a>CheckComponentBT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_baseinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_CheckComponentBT
</UL>

<P><STRONG><a name="[15a]"></a>CheckComponentWIFI</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_baseinfo
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_CheckComponentWIFI
</UL>

<P><STRONG><a name="[15b]"></a>CheckComponentNFC</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_nfc_up
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_baseinfo
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_CheckComponentNFC
</UL>

<P><STRONG><a name="[15e]"></a>OpenConfigmodeNFC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_config_start
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_OpenConfigmodeNFC
</UL>

<P><STRONG><a name="[160]"></a>CloseConfigmodeNFC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_config_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_CloseConfigmodeNFC
</UL>

<P><STRONG><a name="[161]"></a>OpenConfigmodeWPS</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pbc_start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_up
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_OpenConfigmodeWPS
</UL>

<P><STRONG><a name="[6b7]"></a>ChgWIFIWorkMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, file.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>user_time</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_time
</UL>

<P><STRONG><a name="[2a4]"></a>memory_status</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_memory_status
</UL>

<P><STRONG><a name="[163]"></a>get_malloc_list</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_get_malloc_list
</UL>

<P><STRONG><a name="[165]"></a>malloc_list_mem</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_malloc_list_mem
</UL>

<P><STRONG><a name="[166]"></a>setSslMaxlen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ssl_max_len
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_setSslMaxlen
</UL>

<P><STRONG><a name="[168]"></a>getSslMaxlen</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ssl_max_len
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_getSslMaxlen
</UL>

<P><STRONG><a name="[16a]"></a>set_cert</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_set_cert
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_set_cert
</UL>

<P><STRONG><a name="[16c]"></a>scan_report</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = scan_report &rArr; ApListCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApListCallback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_ApListCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_finished
</UL>

<P><STRONG><a name="[16f]"></a>lib_config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lib_config &rArr; tcp_buffer_config
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_buffer_config
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_country_code
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InetConfig
</UL>

<P><STRONG><a name="[173]"></a>wlan_driver_version</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_wifi_version
</UL>

<P><STRONG><a name="[175]"></a>wlan_set_max_station_num</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_maxassoc
</UL>

<P><STRONG><a name="[2e7]"></a>dns_ip_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tick
</UL>

<P><STRONG><a name="[177]"></a>socket_connected</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = socket_connected &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setstate
</UL>

<P><STRONG><a name="[1d3]"></a>ApListadv_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_finished_adv
</UL>

<P><STRONG><a name="[1d2]"></a>join_fail</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
</UL>

<P><STRONG><a name="[1d0]"></a>connected_ap_info</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_connect_with_apinfo
</UL>

<P><STRONG><a name="[355]"></a>tcp_reset_line</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[179]"></a>uart_gpio_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uart_gpio_init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_uart_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[181]"></a>uart_reconfig</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = uart_reconfig &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_uart_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[102]"></a>uart_init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reconfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gpio_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUART
</UL>

<P><STRONG><a name="[187]"></a>uart_recv</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
</UL>

<P><STRONG><a name="[193]"></a>dma_rx_half_handler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_rx_half_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_irq
</UL>

<P><STRONG><a name="[195]"></a>dma_rx_complete_handler</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_rx_complete_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_irq
</UL>

<P><STRONG><a name="[e5]"></a>uart_rx_data_length</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDataRT
</UL>

<P><STRONG><a name="[ea]"></a>uart_get_rx_buffer</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_get_rx_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDataRT
</UL>

<P><STRONG><a name="[18a]"></a>uart_flush_rx_buffer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_one_packet
</UL>

<P><STRONG><a name="[189]"></a>uart_get_one_packet</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flush_rx_buffer
</UL>

<P><STRONG><a name="[18b]"></a>uart_putc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_line
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_printf
</UL>

<P><STRONG><a name="[eb]"></a>uart_send_data</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_send_data &rArr; uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDataRT
</UL>

<P><STRONG><a name="[18e]"></a>mf_uart_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = mf_uart_init &rArr; uart_reconfig &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reconfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
</UL>

<P><STRONG><a name="[18f]"></a>mf_get_rx_buffer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mf_get_rx_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_cmd_config_recv
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_line
</UL>

<P><STRONG><a name="[191]"></a>uart_dma_irq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_dma_irq &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_complete_handler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_half_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
</UL>

<P><STRONG><a name="[197]"></a>bt_uart_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6_gpio_init
</UL>

<P><STRONG><a name="[199]"></a>bt_uart_irq</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>

<P><STRONG><a name="[6b8]"></a>bt_uart_rx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[6b9]"></a>bt_uart_rx_len</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[6ba]"></a>bt_uart_rx_flush</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[6bb]"></a>bt_uart_tx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>is_nonlocal_subnet</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = is_nonlocal_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_for_iface
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_source
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast_addr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_net_addr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_all_nonlocal_subnet
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_new
</UL>

<P><STRONG><a name="[fe]"></a>is_all_nonlocal_subnet</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = is_all_nonlocal_subnet &rArr; is_nonlocal_subnet
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_nonlocal_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_source
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMacbySocket
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
</UL>

<P><STRONG><a name="[19c]"></a>is_subnet_net_addr</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + In Cycle
<LI>Call Chain = is_subnet_net_addr &rArr;  is_subnet_net_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_net_addr
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_nonlocal_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_source
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_net_addr
</UL>

<P><STRONG><a name="[19d]"></a>is_subnet_bcast_addr</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + In Cycle
<LI>Call Chain = is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast_addr
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_nonlocal_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_source
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast_addr
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search_iface
</UL>

<P><STRONG><a name="[19e]"></a>is_valid_source</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = is_valid_source &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast_addr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_net_addr
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_nonlocal_subnet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_all_nonlocal_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_handler
</UL>

<P><STRONG><a name="[2c2]"></a>is_any_my_addr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search_iface
</UL>

<P><STRONG><a name="[19f]"></a>itoa</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = itoa &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psocket
</UL>

<P><STRONG><a name="[12e]"></a>inet_ntoa</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inet_ntoa &rArr; itoa &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNetPara
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_print_ifs
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_up
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_print
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_print
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_inet_ntoa
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psocket
</UL>

<P><STRONG><a name="[1a2]"></a>inet_ethtoa</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_print
</UL>

<P><STRONG><a name="[1a3]"></a>aton2</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = aton2 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaddr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
</UL>

<P><STRONG><a name="[1a6]"></a>isaddr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aton2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_request
</UL>

<P><STRONG><a name="[124]"></a>inet_addr</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inet_addr &rArr; aton2 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aton2
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetwork
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvNetwork
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_config
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethip
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_my_ip
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_config_old
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_request
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_add_gateway
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_inet_addr
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssid_get
</UL>

<P><STRONG><a name="[6bc]"></a>gethostid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ip.o(.text), UNUSED)

<P><STRONG><a name="[6bd]"></a>sethostid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ip.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>ip_iface</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_for_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_extopen
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_socks
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_request
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_add
</UL>

<P><STRONG><a name="[1a9]"></a>ip_print_ifs</STRONG> (Thumb, 400 bytes, Stack size 72 bytes, ip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_for_iface
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifpending
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_ipaddr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1ac]"></a>pkt_init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pkt_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_mac_address
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
</UL>

<P><STRONG><a name="[1ae]"></a>pkt_gather</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_handler
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_write
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pendingpkt
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_Reply
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ping_iface
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_sendreport
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_request
</UL>

<P><STRONG><a name="[6be]"></a>pkt_buf_prefix</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ip.o(.text), UNUSED)

<P><STRONG><a name="[4e4]"></a>wps_register_rx_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ip.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_thread
</UL>

<P><STRONG><a name="[6bf]"></a>wps_deregister_rx_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ip.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>fchecksum</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fchecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_handler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_handler
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_write
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pendingpkt
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_Reply
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ping_iface
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_sendreport
</UL>

<P><STRONG><a name="[1b0]"></a>_pkt_buf2root</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _pkt_buf2root &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_handler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_handler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_recv
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_handler
</UL>

<P><STRONG><a name="[1b2]"></a>ip_handler</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1372<LI>Call Chain = ip_handler &rArr; udp_handler &rArr; dhcp_handler &rArr; dhcp_getopts &rArr; dhcp_set_results &rArr; dhcp_up &rArr; sta_up &rArr; set_sta_connection &rArr; ifdown &rArr;  ifctl_tick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_Unreach
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_handler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pkt_buf2root
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksum
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_recv
</UL>

<P><STRONG><a name="[1b9]"></a>pkt_recv</STRONG> (Thumb, 218 bytes, Stack size 232 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1604<LI>Call Chain = pkt_recv &rArr; ip_handler &rArr; udp_handler &rArr; dhcp_handler &rArr; dhcp_getopts &rArr; dhcp_set_results &rArr; dhcp_up &rArr; sta_up &rArr; set_sta_connection &rArr; ifdown &rArr;  ifctl_tick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_handler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_handler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pkt_buf2root
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_rx_data_timer
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_network_process_ethernet_data
</UL>

<P><STRONG><a name="[1bd]"></a>_pkt_buf2xmem</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _pkt_buf2xmem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_bxwrite
</UL>

<P><STRONG><a name="[1be]"></a>pkt_reply_ip</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pkt_reply_ip
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_write
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[1bf]"></a>pkt_make_ip</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pkt_make_ip &rArr; arpcache_hwa
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_iface
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_hwa
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pendingpkt
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ping_iface
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_sendreport
</UL>

<P><STRONG><a name="[1c3]"></a>gchecksum</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gchecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lchecksum
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_write
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_Reply
</UL>

<P><STRONG><a name="[1c2]"></a>lchecksum</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lchecksum &rArr; gchecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gchecksum
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
</UL>

<P><STRONG><a name="[bc]"></a>get_sta_connection</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifimgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNetLink
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_sendto
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_monitor
</UL>

<P><STRONG><a name="[37c]"></a>get_uap_connection</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifimgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_sendto
</UL>

<P><STRONG><a name="[268]"></a>get_connection</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wifimgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_recvfrom
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_CheckNetLink
</UL>

<P><STRONG><a name="[122]"></a>set_sta_retry_interval</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifimgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetwork
</UL>

<P><STRONG><a name="[133]"></a>sta_up</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = sta_up &rArr; set_sta_connection &rArr; ifdown &rArr;  ifctl_tick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_connection
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_ports
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_up
</UL>

<P><STRONG><a name="[1cf]"></a>sectype_bcm2mx</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, wifimgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_ap_list_adv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
</UL>

<P><STRONG><a name="[140]"></a>stop_scan</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = stop_scan &rArr; wiced_wifi_stop_scan &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_stop_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_scan
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_adv_scan
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopScan
</UL>

<P><STRONG><a name="[13e]"></a>user_scan</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184<LI>Call Chain = user_scan &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_scan
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ap_list
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_scan
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_scan
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haier_loop_scan
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScan
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipStartScan
</UL>

<P><STRONG><a name="[1e4]"></a>sta_down</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = sta_down &rArr; set_sta_connection &rArr; ifdown &rArr;  ifctl_tick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_link_events_handler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_disconnect
</UL>

<P><STRONG><a name="[1e7]"></a>uap_stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = uap_stop &rArr; wiced_wifi_stop_ap &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_down
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_stop_ap
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect
</UL>

<P><STRONG><a name="[128]"></a>sta_disconnect</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = sta_disconnect &rArr; wiced_wifi_leave &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_down
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_powersave
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_leave
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_del_all
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvNetwork
</UL>

<P><STRONG><a name="[121]"></a>wlan_connect</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = wlan_connect &rArr; wiced_wifi_start_ap &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_stop
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_up
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_scan
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_disconnect
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_start_ap
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetwork
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reboot
</UL>

<P><STRONG><a name="[10e]"></a>wlan_set_link_event_hander</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = wlan_set_link_event_hander &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_set_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reboot_only
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reboot
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_up
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init
</UL>

<P><STRONG><a name="[1ec]"></a>wifi_reboot</STRONG> (Thumb, 128 bytes, Stack size 112 bytes, wifimgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenEasylink
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_link_event_hander
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_on
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_off
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_end_time
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1ee]"></a>wifi_reboot_only</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wifimgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_link_event_hander
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_on
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_off
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msleep
</UL>

<P><STRONG><a name="[109]"></a>wlan_disconnect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = wlan_disconnect &rArr; uap_stop &rArr; wiced_wifi_stop_ap &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_stop
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_down
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_powersave
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_scan
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_leave
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_del_all
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainnetcmd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenConfigmodeWPS
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenConfigmodeNFC
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_StartNetwork
</UL>

<P><STRONG><a name="[1ef]"></a>sectype_mx2bcm</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, wifimgr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_connect_with_apinfo
</UL>

<P><STRONG><a name="[129]"></a>sta_connect_with_apinfo</STRONG> (Thumb, 390 bytes, Stack size 192 bytes, wifimgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sectype_mx2bcm
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_scan
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connected_ap_info
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_pmk
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2hex
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join_specific
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvNetwork
</UL>

<P><STRONG><a name="[143]"></a>user_adv_scan</STRONG> (Thumb, 148 bytes, Stack size 80 bytes, wifimgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_scan
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ap_list
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_scan
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_scan
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvScan
</UL>

<P><STRONG><a name="[1f0]"></a>mf_scan</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = mf_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ap_list
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_scan
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
</UL>

<P><STRONG><a name="[1f1]"></a>wlan_get_tx_power</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wifimgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_tx_power
</UL>

<P><STRONG><a name="[1f3]"></a>wlan_set_tx_power</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wifimgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_tx_power
</UL>

<P><STRONG><a name="[6c0]"></a>wlan_set_channel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifimgr.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>wlan_get_mac_address</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wlan_get_mac_address
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_mac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNetPara
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_up
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_enc_data
</UL>

<P><STRONG><a name="[170]"></a>set_country_code</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, wifimgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_config
</UL>

<P><STRONG><a name="[426]"></a>get_max_channel</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, wifimgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_start
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ssid_key_start
</UL>

<P><STRONG><a name="[b0]"></a>wlan_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = wlan_init &rArr; wiced_management_init &rArr; wiced_management_wifi_on &rArr; wiced_wifi_set_maxassoc &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_link_event_hander
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[1f7]"></a>wlan_tick</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120<LI>Call Chain = wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_retry_tick
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wait_bus_free
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_poll_all
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
</UL>

<P><STRONG><a name="[13d]"></a>set_scan_interval</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wifimgr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScan
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipStartScan
</UL>

<P><STRONG><a name="[1fa]"></a>CheckNetLink</STRONG> (Thumb, 100 bytes, Stack size 144 bytes, wifimgr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sta_connection
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_rssi
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_channel
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_ap_info
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[65a]"></a>NoOS_systick_irq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, noos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1fe]"></a>gpio_irq_enable</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, gpio_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gpio_irq_enable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_port_to_port_number
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_input_irq_enable
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_enable_oob_interrupt
</UL>

<P><STRONG><a name="[202]"></a>gpio_irq_disable</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, gpio_irq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_input_irq_disable
</UL>

<P><STRONG><a name="[654]"></a>gpio_irq</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, gpio_irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[204]"></a>sdio_irq</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, wwd_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdio_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_platform_notify_irq
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_set_semaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[206]"></a>dma_irq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wwd_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_set_semaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[207]"></a>host_enable_oob_interrupt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wwd_bus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[6c1]"></a>host_platform_get_oob_interrupt_pin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wwd_bus.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>host_platform_bus_init</STRONG> (Thumb, 484 bytes, Stack size 40 bytes, wwd_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = host_platform_bus_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetSDIOReadWaitMode
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_init_semaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_on
</UL>

<P><STRONG><a name="[20f]"></a>host_platform_bus_deinit</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, wwd_bus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_deinit_semaphore
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_bus_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_off
</UL>

<P><STRONG><a name="[214]"></a>host_platform_sdio_transfer</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, wwd_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_semaphore
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_optimal_block_size
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_prepare_data_transfer
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_bus_irq
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_cmd52
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_cmd53
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_init
</UL>

<P><STRONG><a name="[218]"></a>host_platform_enable_high_speed_sdio</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, wwd_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = host_platform_enable_high_speed_sdio &rArr; SDIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_bus_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_init
</UL>

<P><STRONG><a name="[1de]"></a>mf_printf</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mf_printf &rArr; uart_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_results_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssid_get
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bcast_test
</UL>

<P><STRONG><a name="[6c2]"></a>is_mf_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mftest.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>flash_check</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = flash_check &rArr; calc_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
</UL>

<P><STRONG><a name="[21b]"></a>udp_bcast_test</STRONG> (Thumb, 120 bytes, Stack size 184 bytes, mftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2608<LI>Call Chain = udp_bcast_test &rArr; msleep &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msleep
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_printf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
</UL>

<P><STRONG><a name="[21d]"></a>tcp_mf_test</STRONG> (Thumb, 152 bytes, Stack size 232 bytes, mftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368<LI>Call Chain = tcp_mf_test &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_established
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fastwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
</UL>

<P><STRONG><a name="[21f]"></a>mf_cmd_config_recv</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, mftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_rx_buffer
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_sum
</UL>

<P><STRONG><a name="[223]"></a>ssid_get</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, mftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ssid_get &rArr; inet_addr &rArr; aton2 &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_line
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_printf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
</UL>

<P><STRONG><a name="[152]"></a>getversion</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_lib_version
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_baseinfo
</UL>

<P><STRONG><a name="[1df]"></a>mf_scan_finished</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mftest.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_results_handler
</UL>

<P><STRONG><a name="[106]"></a>mf_test_main</STRONG> (Thumb, 790 bytes, Stack size 176 bytes, mftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2784<LI>Call Chain = mf_test_main &rArr; udp_bcast_test &rArr; msleep &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_version
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_scan
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_uart_init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_mac_address
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_wifi_version
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msleep
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_lib_version
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_otp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sta_connection
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_input_get
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssid_get
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_mf_test
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bcast_test
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_sta_start
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_printf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipInit
</UL>

<P><STRONG><a name="[229]"></a>aes_128_encrypt_block</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, otp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = aes_128_encrypt_block &rArr; aes_encrypt &rArr; AesSetKey &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_enc_data
</UL>

<P><STRONG><a name="[22e]"></a>write_to_otp</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, otp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_enc_data
</UL>

<P><STRONG><a name="[a9]"></a>verify_otp</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, otp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = verify_otp &rArr; generate_enc_data &rArr; aes_128_encrypt_block &rArr; aes_encrypt &rArr; AesSetKey &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_enc_data
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_verify
</UL>

<P><STRONG><a name="[b3]"></a>md5_vector</STRONG> (Thumb, 58 bytes, Stack size 112 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = md5_vector &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_hex
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_mac
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[237]"></a>md5_mac</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
</UL>

<P><STRONG><a name="[238]"></a>hmac_md5_vector</STRONG> (Thumb, 320 bytes, Stack size 168 bytes, md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
</UL>

<P><STRONG><a name="[239]"></a>hmac_md5</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
</UL>

<P><STRONG><a name="[23a]"></a>sEE_LowLevel_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, nfc_tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sEE_LowLevel_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_TAG_INIT
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_GetSsidPassword
</UL>

<P><STRONG><a name="[23c]"></a>Wait_For_OPT_Finish</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nfc_tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Wait_For_OPT_Finish
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Flag_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_PageWrite
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_ReadBuffer
</UL>

<P><STRONG><a name="[23e]"></a>nfcEE_ReadBuffer</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, nfc_tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nfcEE_ReadBuffer &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Flag_Status
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_OPT_Finish
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_TAG_INIT
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_GetSsidPassword
</UL>

<P><STRONG><a name="[246]"></a>nfcEE_PageWrite</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, nfc_tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nfcEE_PageWrite &rArr; Wait_For_OPT_Finish
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Flag_Status
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_OPT_Finish
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_TAG_INIT
</UL>

<P><STRONG><a name="[247]"></a>NFC_GetSsidPassword</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, nfc_tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = NFC_GetSsidPassword &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_ReadBuffer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_read
</UL>

<P><STRONG><a name="[24a]"></a>nfc_read</STRONG> (Thumb, 94 bytes, Stack size 272 bytes, nfc_tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = nfc_read &rArr; NFC_GetSsidPassword &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RptConfigmodeRslt
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_RptConfigmodeRslt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_GetSsidPassword
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nfc_tag.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>NFC_TAG_INIT</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, nfc_tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = NFC_TAG_INIT &rArr; nfc_gpio_init &rArr; wiced_gpio_input_irq_enable &rArr; gpio_irq_enable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_PageWrite
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_ReadBuffer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_config_start
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[15c]"></a>is_nfc_up</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nfc_tag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComponentNFC
</UL>

<P><STRONG><a name="[15f]"></a>nfc_config_start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nfc_tag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_TAG_INIT
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenConfigmodeNFC
</UL>

<P><STRONG><a name="[6f]"></a>nfc_config_stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nfc_tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nfc_config_stop &rArr; RptConfigmodeRslt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RptConfigmodeRslt
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_RptConfigmodeRslt
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseConfigmodeNFC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file.o(.text)
</UL>
<P><STRONG><a name="[24f]"></a>haieruhome_setSSLmode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSLmode
</UL>

<P><STRONG><a name="[250]"></a>haieruhome_getMacbySocket</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMacbySocket
</UL>

<P><STRONG><a name="[251]"></a>haieruhome_GetUartPara</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartPara
</UL>

<P><STRONG><a name="[253]"></a>haieruhome_GetUartNum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartNum
</UL>

<P><STRONG><a name="[254]"></a>haieruhome_SetUartPara</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartPara
</UL>

<P><STRONG><a name="[256]"></a>haieruhome_OpenUART</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenUART
</UL>

<P><STRONG><a name="[257]"></a>haieruhome_StartNetwork</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetwork
</UL>

<P><STRONG><a name="[258]"></a>haieruhome_getNetPara</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNetPara
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_uap_mode
</UL>

<P><STRONG><a name="[25a]"></a>haieruhome_ReallocIP</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReallocIP
</UL>

<P><STRONG><a name="[25b]"></a>haieruhome_gethostbyname</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL>

<P><STRONG><a name="[25c]"></a>haieruhome_StopScan</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopScan
</UL>

<P><STRONG><a name="[25d]"></a>haieruhome_StartScan</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScan
</UL>

<P><STRONG><a name="[25e]"></a>haieruhome_SetTimer</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
</UL>

<P><STRONG><a name="[25f]"></a>haieruhome_SelectSupport</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectSupport
</UL>

<P><STRONG><a name="[261]"></a>haieruhome_md5</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
</UL>

<P><STRONG><a name="[262]"></a>haieruhome_ps_enable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_enable
</UL>

<P><STRONG><a name="[264]"></a>haieruhome_ps_disable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_disable
</UL>

<P><STRONG><a name="[265]"></a>haieruhome_system_reload</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_reload
</UL>

<P><STRONG><a name="[267]"></a>haieruhome_CheckNetLink</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_rssi
</UL>

<P><STRONG><a name="[269]"></a>haieruhome_OpenEasylink</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenEasylink
</UL>

<P><STRONG><a name="[26a]"></a>haieruhome_CloseEasylink</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseEasylink
</UL>

<P><STRONG><a name="[26b]"></a>haieruhome_OpenBT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenBT
</UL>

<P><STRONG><a name="[26d]"></a>haieruhome_CloseBT</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseBT
</UL>

<P><STRONG><a name="[26f]"></a>haieruhome_SetBTAddr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTAddr
</UL>

<P><STRONG><a name="[271]"></a>haieruhome_SetBTName</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTName
</UL>

<P><STRONG><a name="[273]"></a>haieruhome_SetBTpin</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTpin
</UL>

<P><STRONG><a name="[275]"></a>haieruhome_SetBTboundleID</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTboundleID
</UL>

<P><STRONG><a name="[277]"></a>haieruhome_SetBTseedID</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTseedID
</UL>

<P><STRONG><a name="[279]"></a>haieruhome_SetBTsdkProto</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTsdkProto
</UL>

<P><STRONG><a name="[27b]"></a>haieruhome_SetBT_SearchAppPara</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBT_SearchAppPara
</UL>

<P><STRONG><a name="[27d]"></a>haieruhome_GetBTArg</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBTArg
</UL>

<P><STRONG><a name="[27f]"></a>haieruhome_GetBTDevlist</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBTDevlist
</UL>

<P><STRONG><a name="[281]"></a>haieruhome_GetBTLastDev</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBTLastDev
</UL>

<P><STRONG><a name="[283]"></a>haieruhome_CheckComponentBT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComponentBT
</UL>

<P><STRONG><a name="[284]"></a>haieruhome_CheckComponentWIFI</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComponentWIFI
</UL>

<P><STRONG><a name="[285]"></a>haieruhome_CheckComponentNFC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComponentNFC
</UL>

<P><STRONG><a name="[286]"></a>haieruhome_OpenConfigmodeNFC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenConfigmodeNFC
</UL>

<P><STRONG><a name="[287]"></a>haieruhome_CloseConfigmodeNFC</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseConfigmodeNFC
</UL>

<P><STRONG><a name="[288]"></a>haieruhome_bind</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[289]"></a>haieruhome_listen</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>

<P><STRONG><a name="[28a]"></a>haieruhome_select</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[6c3]"></a>haieruhome_FD_CLR</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)

<P><STRONG><a name="[6c4]"></a>haieruhome_FD_ISSET</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)

<P><STRONG><a name="[6c5]"></a>haieruhome_FD_SET</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>haieruhome_FD_ZERO</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[28c]"></a>haieruhome_accept</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[28d]"></a>haieruhome_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[28e]"></a>haieruhome_htonl</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>

<P><STRONG><a name="[28f]"></a>haieruhome_htons</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>

<P><STRONG><a name="[290]"></a>haieruhome_ntohl</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
</UL>

<P><STRONG><a name="[291]"></a>haieruhome_ntohs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>

<P><STRONG><a name="[292]"></a>haieruhome_inet_addr</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
</UL>

<P><STRONG><a name="[293]"></a>haieruhome_read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[294]"></a>haieruhome_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[295]"></a>haieruhome_send</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[296]"></a>haieruhome_sendto</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[297]"></a>haieruhome_recv</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[298]"></a>haieruhome_recvfrom</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[299]"></a>haieruhome_socket</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[29a]"></a>haieruhome_setsockopt</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[29b]"></a>haieruhome_connect</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[29c]"></a>haieruhome_OpenConfigmodeWPS</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenConfigmodeWPS
</UL>

<P><STRONG><a name="[29d]"></a>haieruhome_CloseConfigmodeWPS</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseConfigmodeWPS
</UL>

<P><STRONG><a name="[6c6]"></a>haieruhome_ChgWIFIWorkMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, haier.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>haieruhome_sleep</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep
</UL>

<P><STRONG><a name="[29f]"></a>haieruhome_msleep</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msleep
</UL>

<P><STRONG><a name="[2a0]"></a>haieruhome_rand</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>

<P><STRONG><a name="[2a1]"></a>haieruhome_srand</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>

<P><STRONG><a name="[2a2]"></a>haieruhome_inet_ntoa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
</UL>

<P><STRONG><a name="[2a3]"></a>haieruhome_memory_status</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_status
</UL>

<P><STRONG><a name="[2a5]"></a>haieruhome_get_malloc_list</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_malloc_list
</UL>

<P><STRONG><a name="[2a6]"></a>haieruhome_malloc_list_mem</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_list_mem
</UL>

<P><STRONG><a name="[2a7]"></a>haieruhome_setSslMaxlen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSslMaxlen
</UL>

<P><STRONG><a name="[2a8]"></a>haieruhome_getSslMaxlen</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSslMaxlen
</UL>

<P><STRONG><a name="[2a9]"></a>haieruhome_FlashGetInfo</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashGetInfo
</UL>

<P><STRONG><a name="[2ab]"></a>haieruhome_FlashRead</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
</UL>

<P><STRONG><a name="[2ad]"></a>haieruhome_FlashWrite</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[2af]"></a>haieruhome_FlashErase</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
</UL>

<P><STRONG><a name="[2b1]"></a>haieruhome_set_cert</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cert
</UL>

<P><STRONG><a name="[2b2]"></a>haieruhome_set_tcp_keepalive</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tcp_keepalive
</UL>

<P><STRONG><a name="[2b4]"></a>haieruhome_get_tcp_keepalive</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_keepalive
</UL>

<P><STRONG><a name="[2b6]"></a>haieruhome_get_tcp_clients</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_clients
</UL>

<P><STRONG><a name="[2b8]"></a>haieruhome_time</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_time
</UL>

<P><STRONG><a name="[2ba]"></a>haieruhome_is_softreset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reset_reason
</UL>

<P><STRONG><a name="[2bc]"></a>haieruhome_led_conctrol</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, haier.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_led_blink_cfg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_led_control
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_led_enable
</UL>

<P><STRONG><a name="[114]"></a>haieruhome_WatchDog</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, haier.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetWatchDog
</UL>

<P><STRONG><a name="[13b]"></a>haieruhome_WifiStatusHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, haier.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_status_callback
</UL>

<P><STRONG><a name="[24b]"></a>haieruhome_RptConfigmodeRslt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, haier.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_config_stop
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_success
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_fail
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_read
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_end
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cooee_success
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cooee_fail
</UL>

<P><STRONG><a name="[132]"></a>haieruhome_NetCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, haier.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_up
</UL>

<P><STRONG><a name="[16d]"></a>haieruhome_ApListCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, haier.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_report
</UL>

<P><STRONG><a name="[2bf]"></a>_arp_unlink_to</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, arp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arpcache_delete
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_tick
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_purge_iface
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_create_iface
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_sched_to
</UL>

<P><STRONG><a name="[2be]"></a>_arp_sched_to</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _arp_sched_to
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_unlink_to
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_sched_to_multicast
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_sched_to_multicast_random
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_tick
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_flush
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_load
</UL>

<P><STRONG><a name="[2c0]"></a>arpcache_load</STRONG> (Thumb, 304 bytes, Stack size 60 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = arpcache_load &rArr;  arpcache_load (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_load
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_sched_to
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_handler
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_joingroup_userflag_iface
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_new
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_add
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_load
</UL>

<P><STRONG><a name="[2c1]"></a>arpcache_search_iface</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_any_my_addr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_for_iface
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_handler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_handler
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicast_ingroup
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_joingroup_userflag_iface
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_leavegroup_userflag
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_sendreport
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_add
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_create_iface
</UL>

<P><STRONG><a name="[2c3]"></a>arpcache_create_iface</STRONG> (Thumb, 406 bytes, Stack size 56 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = arpcache_create_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search_iface
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_unlink_to
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_handler
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_joingroup_userflag_iface
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_new
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_create
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_add
</UL>

<P><STRONG><a name="[2c4]"></a>router_add</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = router_add &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_iface
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_create_iface
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search_iface
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_load
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_add_gateway
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_results
</UL>

<P><STRONG><a name="[2c5]"></a>_arp_add_gateway</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_add
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_config
</UL>

<P><STRONG><a name="[2c6]"></a>_arp_request</STRONG> (Thumb, 170 bytes, Stack size 96 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_gather
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_iface
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_arp_to_gw
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifctl_ethernet
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_tick
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
</UL>

<P><STRONG><a name="[2c8]"></a>_arp_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _arp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_init
</UL>

<P><STRONG><a name="[2c9]"></a>arpcache_purge_iface</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arpcache_purge_iface
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_unlink_to
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifctl_tick
</UL>

<P><STRONG><a name="[2ca]"></a>arpcache_search</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = arpcache_search &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
</UL>

<P><STRONG><a name="[1c1]"></a>arpcache_hwa</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arpcache_hwa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_make_ip
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_sendto
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_resolve
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_xsendto
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tick
</UL>

<P><STRONG><a name="[1c0]"></a>arpcache_iface</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arpcache_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_make_ip
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_sendto
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_xsendto
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_pendcheck
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_iface
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
</UL>

<P><STRONG><a name="[1aa]"></a>arpcache_ipaddr</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arpcache_ipaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_print_ifs
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
</UL>

<P><STRONG><a name="[2cb]"></a>arpcache_flush</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arpcache_flush &rArr; _arp_sched_to
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_sched_to
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_close
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_resolve
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_tick
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_delete
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_check
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_del_all
</UL>

<P><STRONG><a name="[2cc]"></a>arpcache_create</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_create_iface
</UL>

<P><STRONG><a name="[2cd]"></a>arpcache_new</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = arpcache_new &rArr; arpcache_create_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_nonlocal_subnet
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_create_iface
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_load
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
</UL>

<P><STRONG><a name="[2ce]"></a>arpcache_printflags</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_print
</UL>

<P><STRONG><a name="[2cf]"></a>arpcache_print</STRONG> (Thumb, 100 bytes, Stack size 120 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ethtoa
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_printflags
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_printall
</UL>

<P><STRONG><a name="[2d0]"></a>arpcache_printall</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_print
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2d1]"></a>router_ipaddr</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, arp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_for_iface
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_delete
</UL>

<P><STRONG><a name="[1a8]"></a>router_for_iface</STRONG> (Thumb, 988 bytes, Stack size 80 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_nonlocal_subnet
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_ipaddr
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_print_ifs
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_iface
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
</UL>

<P><STRONG><a name="[2d3]"></a>arpresolve_start_iface</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = arpresolve_start_iface &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_for_iface
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_iface
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast_addr
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_nonlocal_subnet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_all_nonlocal_subnet
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_request
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_create_iface
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search_iface
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_sched_to
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_sendto
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_xsendto
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_extopen
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ping_iface
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tick
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start
</UL>

<P><STRONG><a name="[2d4]"></a>arpresolve_start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = arpresolve_start &rArr; arpresolve_start_iface &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_resolve
</UL>

<P><STRONG><a name="[6c7]"></a>arpresolve_ipaddr</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, arp.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>arpresolve_check</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arpresolve_check &rArr; arpcache_flush &rArr; _arp_sched_to
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_sendto
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_resolve
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_xsendto
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_Retransmitter
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pendingpkt
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_resolved
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ping_iface
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tick
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ath_resolved
</UL>

<P><STRONG><a name="[2d6]"></a>wait_ath_resolved</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = wait_ath_resolved &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_sendto
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_xsendto
</UL>

<P><STRONG><a name="[2d7]"></a>router_delete</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = router_delete &rArr; arpcache_flush &rArr; _arp_sched_to
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_ipaddr
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
</UL>

<P><STRONG><a name="[1e9]"></a>router_del_all</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = router_del_all &rArr; arpcache_flush &rArr; _arp_sched_to
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_disconnect
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
</UL>

<P><STRONG><a name="[2d8]"></a>router_print</STRONG> (Thumb, 336 bytes, Stack size 120 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_printall
</UL>

<P><STRONG><a name="[2d9]"></a>router_printall</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, arp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_print
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2da]"></a>_arp_tick</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _arp_tick &rArr; _igmp_sendreport &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_sendreport
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_flush
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_request
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_sched_to
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_unlink_to
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_tick_internal
</UL>

<P><STRONG><a name="[1bc]"></a>_arp_handler</STRONG> (Thumb, 760 bytes, Stack size 144 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _arp_handler &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifpending
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pkt_buf2root
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_gather
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_source
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_arp
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_create_iface
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search_iface
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_load
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_recv
</UL>

<P><STRONG><a name="[ff]"></a>_arp_resolve</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168<LI>Call Chain = _arp_resolve &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_hwa
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_check
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMacbySocket
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[38d]"></a>_arpcache_multicast_setuserflag</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _arpcache_multicast_setuserflag
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_joingroup_userflag_iface
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_leavegroup_userflag
</UL>

<P><STRONG><a name="[391]"></a>_arpcache_multicast_getuserflag</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _arpcache_multicast_getuserflag
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicast_ingroup
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_leavegroup_userflag
</UL>

<P><STRONG><a name="[38e]"></a>_arpcache_multicast_saveslot</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _arpcache_multicast_saveslot
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_joingroup_userflag_iface
</UL>

<P><STRONG><a name="[393]"></a>_arpcache_multicast_checkhashremove</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _arpcache_multicast_checkhashremove
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_leavegroup_userflag
</UL>

<P><STRONG><a name="[2dd]"></a>_arpcache_delete</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _arpcache_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_unlink_to
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_leavegroup_userflag
</UL>

<P><STRONG><a name="[2de]"></a>_arp_sched_to_multicast_random</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _arp_sched_to_multicast_random &rArr; _arp_sched_to
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_sched_to
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_handler
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arpcache_report_all_multicasts
</UL>

<P><STRONG><a name="[2df]"></a>_arpcache_report_all_multicasts</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _arpcache_report_all_multicasts &rArr; _arp_sched_to_multicast_random &rArr; _arp_sched_to
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_sched_to_multicast_random
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_handler
</UL>

<P><STRONG><a name="[2e0]"></a>_arp_sched_to_multicast</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _arp_sched_to_multicast &rArr; _arp_sched_to
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_sched_to
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_joingroup_userflag_iface
</UL>

<P><STRONG><a name="[bd]"></a>send_arp_to_gw</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = send_arp_to_gw &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;health_monitor
</UL>

<P><STRONG><a name="[2e2]"></a>dns_request</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, dns.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isaddr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve
</UL>

<P><STRONG><a name="[2e5]"></a>dns_tick</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = dns_tick &rArr; send_req &rArr; udp_raw_packet &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_hwa
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_ip_set
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_next
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_first
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_req
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_check
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
</UL>

<P><STRONG><a name="[2e9]"></a>dns_handler</STRONG> (Thumb, 462 bytes, Stack size 48 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dns_handler &rArr; servlist_set_health &rArr; _servlist_sort_preferences
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_set_health
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_next
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
</UL>

<P><STRONG><a name="[2ec]"></a>dns_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dns.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_next
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_first
</UL>

<P><STRONG><a name="[138]"></a>resolve</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, dns.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_request
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL>

<P><STRONG><a name="[12f]"></a>name_server_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_server_get &rArr; servlist_first
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_first
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNetPara
</UL>

<P><STRONG><a name="[2ee]"></a>_send_ping_iface</STRONG> (Thumb, 272 bytes, Stack size 144 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2280<LI>Call Chain = _send_ping_iface &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_make_ip
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksum
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_gather
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_check
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ping
</UL>

<P><STRONG><a name="[2ef]"></a>_send_ping</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2312<LI>Call Chain = _send_ping &rArr; _send_ping_iface &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ping_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
</UL>

<P><STRONG><a name="[6c8]"></a>_chk_ping</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, icmp.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>icmp_Reply</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = icmp_Reply &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gchecksum
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksum
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_gather
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
</UL>

<P><STRONG><a name="[1b8]"></a>icmp_Unreach</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_handler
</UL>

<P><STRONG><a name="[6c9]"></a>set_icmp_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icmp.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>icmp_handler</STRONG> (Thumb, 830 bytes, Stack size 192 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = icmp_handler &rArr; _abort_socks &rArr; tcp_abort &rArr; _tcp_send &rArr; arpresolve_start_iface &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lchecksum
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_reply_ip
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pkt_buf2root
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_iface
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_source
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast_addr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_udp_notify
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_notify
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_socks
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_Reply
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_add
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_load
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_handler
</UL>

<P><STRONG><a name="[228]"></a>ping</STRONG> (Thumb, 148 bytes, Stack size 128 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440<LI>Call Chain = ping &rArr; _send_ping &rArr; _send_ping_iface &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_resolve
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ping
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_printf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
</UL>

<P><STRONG><a name="[315]"></a>set_timeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_handler
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_timer_init
</UL>

<P><STRONG><a name="[6ca]"></a>set_ttimeout</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>chk_timeout</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_for_iface
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_resolve
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_waitsend
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_waitopen
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_tick
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_tick_internal
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_Retransmitter
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_tick
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_timer_expired
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ping_iface
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tick
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[1ab]"></a>ifpending</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_print_ifs
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifup
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifdown
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
</UL>

<P><STRONG><a name="[2f5]"></a>ifctl_tick</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_tick
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_purge_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifup
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifdown
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_tick_internal
</UL>

<P><STRONG><a name="[2f1]"></a>_abort_socks</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = _abort_socks &rArr; tcp_abort &rArr; _tcp_send &rArr; arpresolve_start_iface &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_iface
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abortpending
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifdown
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_tick
</UL>

<P><STRONG><a name="[135]"></a>ifdown</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + In Cycle
<LI>Call Chain = ifdown &rArr;  ifctl_tick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifpending
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifctl_tick
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_socks
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_retry_tick
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uap_connection
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_connection
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReallocIP
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_tick
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[2fa]"></a>if_max_mtu</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
</UL>

<P><STRONG><a name="[136]"></a>ifup</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifpending
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifctl_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_link_up
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uap_connection
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReallocIP
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_acquire
</UL>

<P><STRONG><a name="[123]"></a>ifconfig</STRONG> (Thumb, 2320 bytes, Stack size 112 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_for_iface
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifpending
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_ipaddr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_iface
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifup
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifdown
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_delete
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_add
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_max_mtu
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_next
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_first
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_delete
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_add
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_del_all
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNetPara
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetwork
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvNetwork
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_config_old
</UL>

<P><STRONG><a name="[2fd]"></a>tcp_config_old</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = tcp_config_old &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_init
</UL>

<P><STRONG><a name="[bf]"></a>sock_init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = sock_init &rArr; _igmp_init &rArr; pd_addmulticast &rArr; wiced_wifi_register_multicast_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_init
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sock_init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_config_old
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_socks
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmStack_Init
</UL>

<P><STRONG><a name="[302]"></a>_chk_socket</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sockstate
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_tbleft
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_tbused
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_tbsize
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_rbleft
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_rbused
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_rbsize
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getpeername
</UL>

<P><STRONG><a name="[301]"></a>sock_rbsize</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chk_socket
</UL>

<P><STRONG><a name="[303]"></a>sock_rbused</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chk_socket
</UL>

<P><STRONG><a name="[304]"></a>sock_rbleft</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chk_socket
</UL>

<P><STRONG><a name="[305]"></a>sock_tbsize</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chk_socket
</UL>

<P><STRONG><a name="[306]"></a>sock_tbused</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chk_socket
</UL>

<P><STRONG><a name="[307]"></a>sock_tbleft</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chk_socket
</UL>

<P><STRONG><a name="[308]"></a>set_my_ip</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
</UL>

<P><STRONG><a name="[309]"></a>_inet_atoeth</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethip
</UL>

<P><STRONG><a name="[30b]"></a>ethip</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_inet_atoeth
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_config
</UL>

<P><STRONG><a name="[30d]"></a>_add_server</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_config
</UL>

<P><STRONG><a name="[30c]"></a>tcp_config</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_add
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_server
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethip
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_add_gateway
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>

<P><STRONG><a name="[6cb]"></a>is_if_up</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>ifctl_ethernet</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_request
</UL>

<P><STRONG><a name="[6cc]"></a>is_valid_iface</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[6cd]"></a>virtual_eth</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[6ce]"></a>virtual_set</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[6cf]"></a>sock_yield</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[6d0]"></a>sock_mode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>sock_alive</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sock_alive &rArr; tcp_unthread &rArr; tcp_setstate &rArr; socket_connected &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_unthread
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_tick_internal
</UL>

<P><STRONG><a name="[31b]"></a>sock_waiting</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_dataready
</UL>

<P><STRONG><a name="[6d1]"></a>sock_writable</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>sock_readable</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_peek
</UL>

<P><STRONG><a name="[314]"></a>ip_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay2
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay1
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay0
</UL>

<P><STRONG><a name="[316]"></a>ip_timer_expired</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay2
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay1
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay0
</UL>

<P><STRONG><a name="[6d2]"></a>tcp_checkfor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>tcp_shutdown</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abortpending
</UL>

<P><STRONG><a name="[1ca]"></a>tcp_set_ports</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_up
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_up
</UL>

<P><STRONG><a name="[6d3]"></a>tcp_get_ports</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>findfreeport</STRONG> (Thumb, 312 bytes, Stack size 12 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = findfreeport
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_open
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_extopen
</UL>

<P><STRONG><a name="[318]"></a>sock_abort</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_close
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay2
</UL>

<P><STRONG><a name="[e7]"></a>sock_dataready</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sock_dataready &rArr; _tbuf_xread &rArr; xmem2xmem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_xread
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_findchar
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_delete
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_waiting
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReady
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive
</UL>

<P><STRONG><a name="[31e]"></a>sock_bytesready</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_xread
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_findchar
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay1
</UL>

<P><STRONG><a name="[320]"></a>sock_close</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_close
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay1
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay0
</UL>

<P><STRONG><a name="[6d4]"></a>sock_set_ttl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[6d5]"></a>sock_set_tos</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>sock_iface</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_iface
</UL>

<P><STRONG><a name="[322]"></a>sock_resolved</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_check
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_waitopen
</UL>

<P><STRONG><a name="[323]"></a>_ip_delay0</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_established
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_msg
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_close
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_timer_expired
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_timer_init
</UL>

<P><STRONG><a name="[325]"></a>_ip_delay1</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_msg
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_close
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bytesready
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_timer_expired
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_timer_init
</UL>

<P><STRONG><a name="[326]"></a>_ip_delay2</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_msg
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_abort
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_timer_expired
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_timer_init
</UL>

<P><STRONG><a name="[327]"></a>rip</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>

<P><STRONG><a name="[6d6]"></a>sock_sselect</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>intel</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_handler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_open
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_write
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ProcessData
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pendingpkt
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_udp_notify
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_notify
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ping_iface
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_handler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_sendreport
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_request
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_getopts
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send
</UL>

<P><STRONG><a name="[149]"></a>intel16</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_handler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_write
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_process_options
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ProcessData
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_clearreserve
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_reserveport
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pendingpkt
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_udp_notify
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_notify
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_Reply
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ping_iface
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_handler
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_req
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_sendreport
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send
</UL>

<P><STRONG><a name="[6d7]"></a>sem_up</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>dcr_initdcr</STRONG> (Thumb, 330 bytes, Stack size 8 bytes, net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dcr_initdcr
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmStack_Init
</UL>

<P><STRONG><a name="[6d8]"></a>get_my_ip</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, net.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>tcp_buffer_config</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_buffer_config
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_config
</UL>

<P><STRONG><a name="[328]"></a>tcp_setstate</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_setstate &rArr; socket_connected &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_start
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_pendcheck
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_unthread
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[329]"></a>tcp_initreserve</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sock_init
</UL>

<P><STRONG><a name="[2ff]"></a>tcp_sock_init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tcp_sock_init &rArr; xalloc &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xalloc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_initreserve
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_init
</UL>

<P><STRONG><a name="[32b]"></a>tcp_alloc_buffer</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcp_alloc_buffer &rArr; xalloc &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_open
</UL>

<P><STRONG><a name="[32c]"></a>tcp_free_buffer</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tcp_free_buffer &rArr; xrelease &rArr; crypto_mem_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xrelease
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_start
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_tcp_list
</UL>

<P><STRONG><a name="[31a]"></a>_tbuf_xread</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _tbuf_xread &rArr; xmem2xmem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmem2xmem
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_dataready
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_gets
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_read
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_preread
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_peek
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bytesready
</UL>

<P><STRONG><a name="[32f]"></a>_tbuf_xwrite</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _tbuf_xwrite &rArr; xmem2xmem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmem2xmem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_udp_notify
</UL>

<P><STRONG><a name="[330]"></a>_tbuf_bxwrite</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _tbuf_bxwrite &rArr; _pkt_buf2xmem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pkt_buf2xmem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ProcessData
</UL>

<P><STRONG><a name="[31c]"></a>_tbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_dataready
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_gets
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_process_ack
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_read
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bytesready
</UL>

<P><STRONG><a name="[336]"></a>_tbuf_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_open
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_extopen
</UL>

<P><STRONG><a name="[31d]"></a>_tbuf_findchar</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _tbuf_findchar &rArr; xmemchr
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemchr
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_dataready
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_chr
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_findmem
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bytesready
</UL>

<P><STRONG><a name="[332]"></a>_tbuf_findmem</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcmp
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_findchar
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_cmp
</UL>

<P><STRONG><a name="[339]"></a>_tbuf_ref</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
</UL>

<P><STRONG><a name="[334]"></a>sockstate</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chk_socket
</UL>

<P><STRONG><a name="[335]"></a>sock_preread</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_xread
</UL>

<P><STRONG><a name="[6d9]"></a>sock_stats</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[6da]"></a>sock_stats_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>_tcp_open</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _tcp_open &rArr; tcp_alloc_buffer &rArr; xalloc &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_reset
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc_buffer
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_msg
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfreeport
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_extlisten
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_extopen
</UL>

<P><STRONG><a name="[33a]"></a>_tcp_sendsoon</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_update
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
</UL>

<P><STRONG><a name="[338]"></a>_tcp_send</STRONG> (Thumb, 1068 bytes, Stack size 176 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = _tcp_send &rArr; arpresolve_start_iface &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gchecksum
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_make_ip
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksum
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_gather
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_sendsoon
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_ref
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_check
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_Flush
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_update
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_Retransmitter
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_keepalive
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[33b]"></a>tcp_connect</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tcp_connect &rArr; _tcp_send &rArr; arpresolve_start_iface &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setstate
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_extopen
</UL>

<P><STRONG><a name="[33c]"></a>tcp_extopen</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = tcp_extopen &rArr; tcp_connect &rArr; _tcp_send &rArr; arpresolve_start_iface &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_iface
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_open
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_open
</UL>

<P><STRONG><a name="[d8]"></a>tcp_open</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = tcp_open &rArr; tcp_extopen &rArr; tcp_connect &rArr; _tcp_send &rArr; arpresolve_start_iface &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_extopen
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_mf_test
</UL>

<P><STRONG><a name="[33d]"></a>tcp_child_clean</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
</UL>

<P><STRONG><a name="[e0]"></a>tcp_listen_start</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = tcp_listen_start &rArr; tcp_free_buffer &rArr; xrelease &rArr; crypto_mem_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_buffer
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setstate
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_extlisten
</UL>

<P><STRONG><a name="[33e]"></a>tcp_pendingpkt</STRONG> (Thumb, 306 bytes, Stack size 144 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tcp_pendingpkt &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_make_ip
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksum
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_gather
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_check
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_pendcheck
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abortpending
</UL>

<P><STRONG><a name="[340]"></a>tcp_pendingpoolreturn</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_removepending
</UL>

<P><STRONG><a name="[33f]"></a>tcp_removepending</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_removepending
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pendingpoolreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_pendcheck
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abortpending
</UL>

<P><STRONG><a name="[341]"></a>_tcp_pendcheck</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _tcp_pendcheck &rArr; tcp_pendingpkt &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_iface
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_removepending
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pendingpkt
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setstate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_extlisten
</UL>

<P><STRONG><a name="[342]"></a>tcp_extlisten</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_start
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_open
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_pendcheck
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
</UL>

<P><STRONG><a name="[343]"></a>tcp_listen</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_extlisten
</UL>

<P><STRONG><a name="[311]"></a>tcp_unthread</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tcp_unthread &rArr; tcp_setstate &rArr; socket_connected &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setstate
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_Retransmitter
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_alive
</UL>

<P><STRONG><a name="[31f]"></a>tcp_close</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + In Cycle
<LI>Call Chain = tcp_close &rArr;  tcp_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setstate
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_unthread
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sock_close
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_ssl_close
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_read
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_Retransmitter
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_close
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bytesready
</UL>

<P><STRONG><a name="[e2]"></a>tcp_abort</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = tcp_abort &rArr; _tcp_send &rArr; arpresolve_start_iface &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_unthread
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_sturdy
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_Retransmitter
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_abort
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_socks
</UL>

<P><STRONG><a name="[2f9]"></a>tcp_abortpending</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tcp_abortpending &rArr; tcp_pendingpkt &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_removepending
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pendingpkt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_socks
</UL>

<P><STRONG><a name="[345]"></a>tcp_send_keepalive</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = tcp_send_keepalive &rArr; _tcp_send &rArr; arpresolve_start_iface &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_Retransmitter
</UL>

<P><STRONG><a name="[347]"></a>tcp_reset_keepalive</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_Retransmitter
</UL>

<P><STRONG><a name="[346]"></a>tcp_Retransmitter</STRONG> (Thumb, 726 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = tcp_Retransmitter &rArr; tcp_close &rArr;  tcp_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_reset_keepalive
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_keepalive
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_unthread
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_msg
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_check
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_tick_internal
</UL>

<P><STRONG><a name="[cf]"></a>tcp_sock_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = tcp_sock_close &rArr; tcp_close &rArr;  tcp_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[116]"></a>free_tcp_list</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400<LI>Call Chain = free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_clean
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
</UL>

<P><STRONG><a name="[348]"></a>_tcp_tick_internal</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = _tcp_tick_internal &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check_lease
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_tick
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_Retransmitter
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_alive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifctl_tick
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
</UL>

<P><STRONG><a name="[dc]"></a>tcp_tick</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2136<LI>Call Chain = tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_tick
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_tick_internal
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_sendto
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_recvfrom
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_resolve
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply_tinywait
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_waitsend
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_xsendto
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_waitopen
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_write
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay2
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay1
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay0
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_close
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ping_iface
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ath_resolved
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_mf_test
</UL>

<P><STRONG><a name="[6db]"></a>tcp_set_debug_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>tcp_established</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay0
</UL>

<P><STRONG><a name="[6dc]"></a>_tcp_lookup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>_tcp_notify</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _tcp_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
</UL>

<P><STRONG><a name="[34b]"></a>sock_update</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = sock_update &rArr; _tcp_send &rArr; arpresolve_start_iface &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_sendsoon
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_gets
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_read
</UL>

<P><STRONG><a name="[34c]"></a>tcp_read</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = tcp_read &rArr; sock_update &rArr; _tcp_send &rArr; arpresolve_start_iface &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_update
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_xread
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_read
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fastread
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_xfastread
</UL>

<P><STRONG><a name="[fb]"></a>tcp_wr_len</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buf_size
</UL>

<P><STRONG><a name="[34d]"></a>tcp_write</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = tcp_write &rArr; _tcp_send &rArr; arpresolve_start_iface &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_sendsoon
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_xwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_xfastwrite
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_axwrite
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_write
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_write_one_packet
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fastwrite
</UL>

<P><STRONG><a name="[34e]"></a>tcp_Flush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_flush
</UL>

<P><STRONG><a name="[353]"></a>clamp16k</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ProcessData
</UL>

<P><STRONG><a name="[34f]"></a>tcp_reserveport</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
</UL>

<P><STRONG><a name="[350]"></a>tcp_clearreserve</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
</UL>

<P><STRONG><a name="[351]"></a>_tcp_process_ack</STRONG> (Thumb, 172 bytes, Stack size 12 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _tcp_process_ack &rArr; _tbuf_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
</UL>

<P><STRONG><a name="[352]"></a>tcp_ProcessData</STRONG> (Thumb, 630 bytes, Stack size 72 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcp_ProcessData &rArr; _tbuf_bxwrite &rArr; _pkt_buf2xmem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clamp16k
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_bxwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
</UL>

<P><STRONG><a name="[354]"></a>tcp_rst</STRONG> (Thumb, 326 bytes, Stack size 160 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tcp_rst &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_reply_ip
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksum
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_gather
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_reset_line
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
</UL>

<P><STRONG><a name="[356]"></a>_tcp_process_options</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _tcp_process_options
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
</UL>

<P><STRONG><a name="[358]"></a>tcp_pendingpoolget</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
</UL>

<P><STRONG><a name="[1b4]"></a>tcp_handler</STRONG> (Thumb, 3288 bytes, Stack size 144 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = tcp_handler &rArr; tcp_close &rArr;  tcp_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lchecksum
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pkt_buf2root
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksum
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_source
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pendingpoolget
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_process_options
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_ProcessData
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_process_ack
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clamp16k
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_reset_keepalive
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_pendcheck
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_removepending
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pendingpkt
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_send
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_sendsoon
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_reset
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc_buffer
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setstate
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_in_loop
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_unthread
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abortpending
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_msg
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_new
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_handler
</UL>

<P><STRONG><a name="[359]"></a>printsock</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[35a]"></a>printpend</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[35b]"></a>tcp_keepalive</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_reset_keepalive
</UL>

<P><STRONG><a name="[f7]"></a>sock_read</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_read
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_getc
</UL>

<P><STRONG><a name="[f2]"></a>sock_fastread</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = sock_fastread &rArr; tcp_read &rArr; sock_update &rArr; _tcp_send &rArr; arpresolve_start_iface &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_read
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive
</UL>

<P><STRONG><a name="[f3]"></a>tcp_recv</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = tcp_recv &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_read
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[35c]"></a>sock_xfastread</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_read
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_axread
</UL>

<P><STRONG><a name="[35d]"></a>sock_axread</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_xfastread
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_aread
</UL>

<P><STRONG><a name="[35e]"></a>sock_aread</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_axread
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
</UL>

<P><STRONG><a name="[35f]"></a>sock_chr</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_findchar
</UL>

<P><STRONG><a name="[360]"></a>sock_cmp</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_findmem
</UL>

<P><STRONG><a name="[361]"></a>sock_write_one_packet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
</UL>

<P><STRONG><a name="[362]"></a>sock_write</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176<LI>Call Chain = sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_puts
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_putc
</UL>

<P><STRONG><a name="[ed]"></a>sock_send</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176<LI>Call Chain = sock_send &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[21e]"></a>sock_fastwrite</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = sock_fastwrite &rArr; tcp_write &rArr; _tcp_send &rArr; arpresolve_start_iface &rArr; _arp_request &rArr; ip_iface &rArr; router_for_iface &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_mf_test
</UL>

<P><STRONG><a name="[363]"></a>sock_axwrite</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_awrite
</UL>

<P><STRONG><a name="[364]"></a>sock_awrite</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_axwrite
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
</UL>

<P><STRONG><a name="[365]"></a>sock_xfastwrite</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[36b]"></a>sock_noflush</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_puts
</UL>

<P><STRONG><a name="[366]"></a>sock_flush</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_Flush
</UL>

<P><STRONG><a name="[368]"></a>sock_flushnext</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_puts
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_putc
</UL>

<P><STRONG><a name="[367]"></a>sock_putc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_flushnext
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_write
</UL>

<P><STRONG><a name="[369]"></a>sock_getc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_read
</UL>

<P><STRONG><a name="[36a]"></a>sock_puts</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_flushnext
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_noflush
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[36c]"></a>sock_gets</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddrSS
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_update
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_xread
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_delete
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>

<P><STRONG><a name="[da]"></a>sock_established</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_mf_test
</UL>

<P><STRONG><a name="[db]"></a>sock_closed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[d9]"></a>sock_is_nonblock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[36e]"></a>sock_sturdy</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>

<P><STRONG><a name="[2b3]"></a>set_tcp_keepalive</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_set_tcp_keepalive
</UL>

<P><STRONG><a name="[2b5]"></a>get_tcp_keepalive</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_get_tcp_keepalive
</UL>

<P><STRONG><a name="[2b7]"></a>get_tcp_clients</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_get_tcp_clients
</UL>

<P><STRONG><a name="[300]"></a>udp_sock_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = udp_sock_init &rArr; xalloc &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_init
</UL>

<P><STRONG><a name="[371]"></a>udp_alloc_buffer</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_extopen
</UL>

<P><STRONG><a name="[d1]"></a>udp_free_buffer</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[d0]"></a>udp_close</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000<LI>Call Chain = udp_close &rArr; _multicast_leavegroup_userflag &rArr; pd_removemulticast &rArr; wiced_wifi_unregister_multicast_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_leavegroup_userflag
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_extopen
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_close
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_abort
</UL>

<P><STRONG><a name="[370]"></a>udp_extopen</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = udp_extopen &rArr; _multicast_joingroup_userflag &rArr; _multicast_joingroup_userflag_iface &rArr; pd_addmulticast &rArr; wiced_wifi_register_multicast_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_close
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_joingroup_userflag
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_alloc_buffer
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_reset
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_msg
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findfreeport
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_waitopen
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_anonymous_open
</UL>

<P><STRONG><a name="[d6]"></a>udp_open</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = udp_open &rArr; udp_extopen &rArr; _multicast_joingroup_userflag &rArr; _multicast_joingroup_userflag_iface &rArr; pd_addmulticast &rArr; wiced_wifi_register_multicast_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_extopen
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bcast_test
</UL>

<P><STRONG><a name="[373]"></a>udp_anonymous_open</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_extopen
</UL>

<P><STRONG><a name="[dd]"></a>udp_connect</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_joingroup_userflag
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[374]"></a>udp_waitopen</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_extopen
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_resolved
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
</UL>

<P><STRONG><a name="[1b5]"></a>udp_handler</STRONG> (Thumb, 1248 bytes, Stack size 144 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1348<LI>Call Chain = udp_handler &rArr; dhcp_handler &rArr; dhcp_getopts &rArr; dhcp_set_results &rArr; dhcp_up &rArr; sta_up &rArr; set_sta_connection &rArr; ifdown &rArr;  ifctl_tick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_Unreach
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lchecksum
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pkt_buf2xmem
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pkt_buf2root
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksum
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_source
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast_addr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xavail
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_handler
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handler
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_xalloc
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xrelease
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddrSS
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_bxwrite
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_xwrite
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_handler
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_new
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_handler
</UL>

<P><STRONG><a name="[379]"></a>udp_write</STRONG> (Thumb, 504 bytes, Stack size 232 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gchecksum
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_reply_ip
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksum
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_gather
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_sendto
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_xsendto
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_raw_packet
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send
</UL>

<P><STRONG><a name="[37a]"></a>udp_xsendto</STRONG> (Thumb, 364 bytes, Stack size 72 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = udp_xsendto &rArr; wait_ath_resolved &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_iface
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_hwa
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicast_iptohw
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_write
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_msg
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ath_resolved
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_check
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[21c]"></a>udp_sendto</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = udp_sendto &rArr; udp_xsendto &rArr; wait_ath_resolved &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_xsendto
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_waitsend
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bcast_test
</UL>

<P><STRONG><a name="[ee]"></a>udp_sock_sendto</STRONG> (Thumb, 486 bytes, Stack size 88 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248 + In Cycle
<LI>Call Chain = udp_sock_sendto &rArr;  udp_sock_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uap_connection
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_iface
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_hwa
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_sendto
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sta_connection
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicast_iptohw
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_write
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_msg
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ath_resolved
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_check
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpresolve_start_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_sendto
</UL>

<P><STRONG><a name="[37d]"></a>udp_waitsend</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[37e]"></a>udp_recvfrom</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = udp_recvfrom &rArr; _tbuf_xread &rArr; xmem2xmem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddrSS
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_xread
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_recvfrom
</UL>

<P><STRONG><a name="[f4]"></a>udp_sock_recvfrom</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2168<LI>Call Chain = udp_sock_recvfrom &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[313]"></a>udp_peek</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddr
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_xread
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_readable
</UL>

<P><STRONG><a name="[6dd]"></a>udp_bypass_arp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, udp.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>udp_read</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmem2root
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmem2xmem
</UL>

<P><STRONG><a name="[2f3]"></a>_udp_notify</STRONG> (Thumb, 384 bytes, Stack size 112 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _udp_notify &rArr; _tbuf_xwrite &rArr; xmem2xmem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddrSS
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_xwrite
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_handler
</UL>

<P><STRONG><a name="[392]"></a>_udp_check_multicast_sockets</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_leavegroup_userflag
</UL>

<P><STRONG><a name="[2e4]"></a>udp_raw_packet</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = udp_raw_packet &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_req
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet_to_client
</UL>

<P><STRONG><a name="[125]"></a>dhcp_server_ip_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dhcpd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetwork
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvNetwork
</UL>

<P><STRONG><a name="[381]"></a>init_config</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, dhcpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_config &rArr; htonl
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_start
</UL>

<P><STRONG><a name="[108]"></a>dhcpd_end</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dhcpd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_disconnect
</UL>

<P><STRONG><a name="[126]"></a>dhcpd_start</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dhcpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dhcpd_start &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetwork
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvNetwork
</UL>

<P><STRONG><a name="[376]"></a>dhcps_handler</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, dhcpd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = dhcps_handler &rArr; sendOffer &rArr; send_packet &rArr; send_packet_to_client &rArr; udp_raw_packet &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_inform
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNAK
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lease_expired
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_option
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_lease_by_yiaddr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_lease_by_chaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
</UL>

<P><STRONG><a name="[37b]"></a>multicast_iptohw</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = multicast_iptohw
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_sendto
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_joingroup_userflag_iface
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_leavegroup_userflag
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_xsendto
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_init
</UL>

<P><STRONG><a name="[38a]"></a>pd_addmulticast</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = pd_addmulticast &rArr; wiced_wifi_register_multicast_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_register_multicast_address
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_joingroup_userflag_iface
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_init
</UL>

<P><STRONG><a name="[2fe]"></a>_igmp_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = _igmp_init &rArr; pd_addmulticast &rArr; wiced_wifi_register_multicast_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pd_addmulticast
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicast_iptohw
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_create_iface
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_load
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_init
</UL>

<P><STRONG><a name="[349]"></a>_igmp_tick</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _igmp_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_tick_internal
</UL>

<P><STRONG><a name="[1b7]"></a>_igmp_handler</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _igmp_handler &rArr; arpcache_search_iface &rArr; is_subnet_bcast_addr &rArr;  is_subnet_bcast_addr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pkt_buf2root
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksum
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timeout
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arpcache_report_all_multicasts
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_sched_to_multicast_random
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_handler
</UL>

<P><STRONG><a name="[2db]"></a>_igmp_sendreport</STRONG> (Thumb, 300 bytes, Stack size 112 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _igmp_sendreport &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_make_ip
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fchecksum
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_gather
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search_iface
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_joingroup_userflag_iface
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_leavegroup_userflag
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_tick
</UL>

<P><STRONG><a name="[38c]"></a>_multicast_joingroup_userflag_iface</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = _multicast_joingroup_userflag_iface &rArr; pd_addmulticast &rArr; wiced_wifi_register_multicast_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pd_addmulticast
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicast_iptohw
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_sendreport
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_sched_to_multicast
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arpcache_multicast_saveslot
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arpcache_multicast_setuserflag
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_create_iface
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search_iface
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_load
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_joingroup_userflag
</UL>

<P><STRONG><a name="[372]"></a>_multicast_joingroup_userflag</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = _multicast_joingroup_userflag &rArr; _multicast_joingroup_userflag_iface &rArr; pd_addmulticast &rArr; wiced_wifi_register_multicast_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_joingroup_userflag_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicast_joingroup
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_extopen
</UL>

<P><STRONG><a name="[ca]"></a>multicast_joingroup</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, igmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_joingroup_userflag
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[38f]"></a>pd_removemulticast</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = pd_removemulticast &rArr; wiced_wifi_unregister_multicast_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_unregister_multicast_address
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_leavegroup_userflag
</UL>

<P><STRONG><a name="[36f]"></a>_multicast_leavegroup_userflag</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, igmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = _multicast_leavegroup_userflag &rArr; pd_removemulticast &rArr; wiced_wifi_unregister_multicast_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pd_removemulticast
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicast_iptohw
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_udp_check_multicast_sockets
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_sendreport
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arpcache_delete
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arpcache_multicast_checkhashremove
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arpcache_multicast_getuserflag
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arpcache_multicast_setuserflag
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_close
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multicast_leavegroup
</UL>

<P><STRONG><a name="[cb]"></a>multicast_leavegroup</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, igmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_multicast_leavegroup_userflag
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[394]"></a>multicast_ingroup</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, igmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arpcache_multicast_getuserflag
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_search_iface
</UL>

<P><STRONG><a name="[16b]"></a>ssl_set_cert</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_cert
</UL>

<P><STRONG><a name="[395]"></a>SSL_CTX_new</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Ctx
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_wrap_init
</UL>

<P><STRONG><a name="[397]"></a>SSL_CTX_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL_Ctx
</UL>

<P><STRONG><a name="[399]"></a>SSL_new</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = SSL_new &rArr; InitSSL &rArr; InitRng &rArr; RNG_GenerateBlock &rArr; Arc4Process &rArr; MakeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_connect_ssl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_accept_ssl
</UL>

<P><STRONG><a name="[39c]"></a>SSL_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SSL_free &rArr; FreeSSL &rArr; GetSession &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_ssl_close
</UL>

<P><STRONG><a name="[41e]"></a>SSL_set_fd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_connect_ssl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_accept_ssl
</UL>

<P><STRONG><a name="[39d]"></a>SSL_write</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2304<LI>Call Chain = SSL_write &rArr; SendData &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_LEAVE
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ENTER
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_ssl_send
</UL>

<P><STRONG><a name="[3a1]"></a>SSL_read</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4880<LI>Call Chain = SSL_read &rArr; ReceiveData &rArr; ProcessReply_tinywait &rArr; DoProcessReply &rArr; DoHandShakeMsg &rArr; DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ssl_max_len
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_LEAVE
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ENTER
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_ssl_recv
</UL>

<P><STRONG><a name="[3a4]"></a>SSL_shutdown</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360<LI>Call Chain = SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_ssl_close
</UL>

<P><STRONG><a name="[6de]"></a>SSL_get_error</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>ERR_error_string</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrorString
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_error_string_n
</UL>

<P><STRONG><a name="[3a8]"></a>ERR_error_string_n</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_error_string
</UL>

<P><STRONG><a name="[3a9]"></a>ERR_print_errors_fp</STRONG> (Thumb, 30 bytes, Stack size 96 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrorString
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[6df]"></a>SSL_pending</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>SSL_CTX_load_verify_locations</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
</UL>

<P><STRONG><a name="[3b4]"></a>SSL_CTX_use_certificate_file</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_load_cert
</UL>

<P><STRONG><a name="[3b5]"></a>SSL_CTX_use_PrivateKey_file</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_load_cert
</UL>

<P><STRONG><a name="[41d]"></a>SSL_CTX_set_verify</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_wrap_init
</UL>

<P><STRONG><a name="[3b6]"></a>GetSession</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetSession &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowResTimer
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOldClientHello
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_get_session
</UL>

<P><STRONG><a name="[3b8]"></a>SSL_get_session</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSession
</UL>

<P><STRONG><a name="[3b9]"></a>SetSession</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowResTimer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_set_session
</UL>

<P><STRONG><a name="[3ba]"></a>SSL_set_session</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSession
</UL>

<P><STRONG><a name="[6e0]"></a>SSL_load_error_strings</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[6e1]"></a>SSL_library_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>SSL_CTX_use_certificate_chain_file</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
</UL>

<P><STRONG><a name="[41c]"></a>SSL_CTX_set_session_cache_mode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_wrap_init
</UL>

<P><STRONG><a name="[3bc]"></a>SSL_CTX_set_cipher_list</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherList
</UL>

<P><STRONG><a name="[3be]"></a>SSLv3_client_method</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeSSLv3
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Method
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_wrap_init
</UL>

<P><STRONG><a name="[3c1]"></a>SSL_connect</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChangeCipher
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_MSG
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_LEAVE
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ERROR
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ENTER
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_connect_ssl
</UL>

<P><STRONG><a name="[3ca]"></a>SSLv3_server_method</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeSSLv3
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Method
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_wrap_init
</UL>

<P><STRONG><a name="[3cb]"></a>SSL_accept</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = SSL_accept &rArr; ProcessReply &rArr; DoProcessReply &rArr; DoHandShakeMsg &rArr; DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHelloDone
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHello
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChangeCipher
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_MSG
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_LEAVE
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ERROR
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ENTER
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_accept_ssl
</UL>

<P><STRONG><a name="[6e2]"></a>InitCyaSSL</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ssl.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>FreeCyaSSL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
</UL>

<P><STRONG><a name="[3d0]"></a>AddSession</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ssl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AddSession &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowResTimer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
</UL>

<P><STRONG><a name="[3d1]"></a>CyaSSL_check_domain_name</STRONG> (Thumb, 624 bytes, Stack size 16 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[3c0]"></a>InitSSL_Method</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, cyassl_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSLv3_server_method
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSLv3_client_method
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSv1_1_server_method
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSv1_server_method
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSv1_1_client_method
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSv1_client_method
</UL>

<P><STRONG><a name="[3d2]"></a>InitSuites</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InitSuites
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOldClientHello
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Ctx
</UL>

<P><STRONG><a name="[396]"></a>InitSSL_Ctx</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, cyassl_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSuites
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CTX_new
</UL>

<P><STRONG><a name="[398]"></a>FreeSSL_Ctx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cyassl_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSigners
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CTX_free
</UL>

<P><STRONG><a name="[39a]"></a>InitSSL</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = InitSSL &rArr; InitRng &rArr; RNG_GenerateBlock &rArr; Arc4Process &rArr; MakeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSha
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRng
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMd5
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_new
</UL>

<P><STRONG><a name="[39b]"></a>FreeSSL</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FreeSSL &rArr; GetSession &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSession
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_free
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_new
</UL>

<P><STRONG><a name="[3bf]"></a>MakeSSLv3</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cyassl_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSLv3_server_method
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSLv3_client_method
</UL>

<P><STRONG><a name="[3df]"></a>Timer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cyassl_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[3b7]"></a>LowResTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cyassl_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSession
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSession
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSession
</UL>

<P><STRONG><a name="[3e6]"></a>GetReady</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = GetReady &rArr; sock_dataready &rArr; _tbuf_xread &rArr; xmem2xmem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_dataready
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcessReply
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_can_read
</UL>

<P><STRONG><a name="[3e7]"></a>ssl_can_read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ssl_can_read &rArr; GetReady &rArr; sock_dataready &rArr; _tbuf_xread &rArr; xmem2xmem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReady
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_ssl_recv
</UL>

<P><STRONG><a name="[3c3]"></a>CYASSL_MSG</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CYASSL_MSG &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply_tinywait
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcessReply
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_LEAVE
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ERROR
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ENTER
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_accept
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_connect
</UL>

<P><STRONG><a name="[3a0]"></a>CYASSL_LEAVE</STRONG> (Thumb, 38 bytes, Stack size 96 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CYASSL_LEAVE &rArr; CYASSL_MSG &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_MSG
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply_tinywait
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_accept
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_connect
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_read
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_write
</UL>

<P><STRONG><a name="[3c4]"></a>CYASSL_ERROR</STRONG> (Thumb, 34 bytes, Stack size 88 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CYASSL_ERROR &rArr; CYASSL_MSG &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_MSG
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcessReply
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_accept
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_connect
</UL>

<P><STRONG><a name="[39e]"></a>CYASSL_ENTER</STRONG> (Thumb, 34 bytes, Stack size 88 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CYASSL_ENTER &rArr; CYASSL_MSG &rArr; __2fprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_MSG
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply_tinywait
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_accept
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_connect
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_read
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_write
</UL>

<P><STRONG><a name="[40b]"></a>DoProcessReply</STRONG> (Thumb, 608 bytes, Stack size 48 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4808<LI>Call Chain = DoProcessReply &rArr; DoHandShakeMsg &rArr; DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReady
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOldClientHello
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordHeader
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptMessage
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFinished
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoApplicationData
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAlert
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_MSG
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ERROR
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply_tinywait
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
</UL>

<P><STRONG><a name="[40c]"></a>ProcessReply_tinywait</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = ProcessReply_tinywait &rArr; DoProcessReply &rArr; DoHandShakeMsg &rArr; DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcessReply
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNonBlocking
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetError
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_MSG
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_LEAVE
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ENTER
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_select
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
</UL>

<P><STRONG><a name="[e6]"></a>ssl_select</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4832<LI>Call Chain = ssl_select &rArr; ProcessReply_tinywait &rArr; DoProcessReply &rArr; DoHandShakeMsg &rArr; DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply_tinywait
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[40f]"></a>Send</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2208<LI>Call Chain = Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LastError
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_write
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWrapper
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHelloDone
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHello
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
</UL>

<P><STRONG><a name="[3c2]"></a>SendBuffered</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2224<LI>Call Chain = SendBuffered &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_connect
</UL>

<P><STRONG><a name="[410]"></a>SendWrapper</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240<LI>Call Chain = SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChangeCipher
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
</UL>

<P><STRONG><a name="[3c6]"></a>ProcessReply</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4824<LI>Call Chain = ProcessReply &rArr; DoProcessReply &rArr; DoHandShakeMsg &rArr; DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcessReply
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsNonBlocking
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetError
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_MSG
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_LEAVE
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ENTER
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_accept
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_connect
</UL>

<P><STRONG><a name="[3c8]"></a>SendChangeCipher</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272<LI>Call Chain = SendChangeCipher &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_accept
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_connect
</UL>

<P><STRONG><a name="[3c9]"></a>SendFinished</STRONG> (Thumb, 216 bytes, Stack size 216 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456<LI>Call Chain = SendFinished &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWrapper
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFinished
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c32to24
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSession
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_accept
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_connect
</UL>

<P><STRONG><a name="[3cd]"></a>SendCertificate</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256<LI>Call Chain = SendCertificate &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c32to24
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_accept
</UL>

<P><STRONG><a name="[39f]"></a>SendData</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2280<LI>Call Chain = SendData &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWrapper
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_MSG
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ERROR
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_write
</UL>

<P><STRONG><a name="[3a3]"></a>ReceiveData</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = ReceiveData &rArr; ProcessReply_tinywait &rArr; DoProcessReply &rArr; DoHandShakeMsg &rArr; DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply_tinywait
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillData
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_LEAVE
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ERROR
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ENTER
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_read
</UL>

<P><STRONG><a name="[3a5]"></a>SendAlert</STRONG> (Thumb, 116 bytes, Stack size 112 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352<LI>Call Chain = SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWrapper
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_shutdown
</UL>

<P><STRONG><a name="[3a7]"></a>SetErrorString</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, cyassl_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_print_errors_fp
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_error_string
</UL>

<P><STRONG><a name="[3bd]"></a>SetCipherList</STRONG> (Thumb, 1038 bytes, Stack size 96 bytes, cyassl_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CTX_set_cipher_list
</UL>

<P><STRONG><a name="[3c5]"></a>SendClientHello</STRONG> (Thumb, 286 bytes, Stack size 176 bytes, cyassl_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GenerateBlock
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWrapper
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c32to24
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_connect
</UL>

<P><STRONG><a name="[3c7]"></a>SendClientKeyExchange</STRONG> (Thumb, 376 bytes, Stack size 760 bytes, cyassl_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicKeyDecode
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicEncrypt
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GenerateBlock
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRsaKey
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRsaKey
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWrapper
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c32to24
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_connect
</UL>

<P><STRONG><a name="[3cc]"></a>SendServerHello</STRONG> (Thumb, 282 bytes, Stack size 168 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376<LI>Call Chain = SendServerHello &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GenerateBlock
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c32to24
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_accept
</UL>

<P><STRONG><a name="[3ce]"></a>SendServerHelloDone</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256<LI>Call Chain = SendServerHelloDone &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c32to24
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_accept
</UL>

<P><STRONG><a name="[6e3]"></a>CyaSSL_Debugging_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cyassl_int.o(.text), UNUSED)

<P><STRONG><a name="[6e4]"></a>CyaSSL_Debugging_OFF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cyassl_int.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>set_ssl_max_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cyassl_int.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSslMaxlen
</UL>

<P><STRONG><a name="[169]"></a>get_ssl_max_len</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cyassl_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSslMaxlen
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_read
</UL>

<P><STRONG><a name="[41b]"></a>ssl_load_cert</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ssl_wrap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CTX_use_PrivateKey_file
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CTX_use_certificate_file
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_wrap_init
</UL>

<P><STRONG><a name="[d3]"></a>ssl_wrap_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ssl_wrap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_load_cert
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSLv3_server_method
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSLv3_client_method
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CTX_set_session_cache_mode
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CTX_set_verify
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CTX_new
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSLmode
</UL>

<P><STRONG><a name="[cd]"></a>sock_ssl_close</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ssl_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376<LI>Call Chain = sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_shutdown
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_free
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_connect_ssl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_accept_ssl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_clean
</UL>

<P><STRONG><a name="[d4]"></a>fd_connect_ssl</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ssl_wrap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_ssl_close
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_connect
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_set_fd
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_new
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSSLmode
</UL>

<P><STRONG><a name="[e3]"></a>fd_accept_ssl</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ssl_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4848<LI>Call Chain = fd_accept_ssl &rArr; SSL_accept &rArr; ProcessReply &rArr; DoProcessReply &rArr; DoHandShakeMsg &rArr; DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_ssl_close
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_accept
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_set_fd
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_new
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[ef]"></a>sock_ssl_send</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ssl_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328<LI>Call Chain = sock_ssl_send &rArr; SSL_write &rArr; SendData &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[f5]"></a>sock_ssl_recv</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ssl_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4904<LI>Call Chain = sock_ssl_recv &rArr; SSL_read &rArr; ReceiveData &rArr; ProcessReply_tinywait &rArr; DoProcessReply &rArr; DoHandShakeMsg &rArr; DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssl_can_read
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_read
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[fc]"></a>get_ssl_socket</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssl_wrap.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMacbySocket
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buf_size
</UL>

<P><STRONG><a name="[c3]"></a>crypto_mem_malloc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cyassl_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer_uniq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_empty_inode
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicEncrypt
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecrypt
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWrapper
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificate
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeSigner
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CyaSSL_check_domain_name
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSession
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSLv3_server_method
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSLv3_client_method
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_new
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CTX_new
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PemToDer
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xalloc
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_init
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSignature
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreKey
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaSSL_Sign
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaSSL_Verify
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSv1_1_server_method
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSv1_server_method
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSv1_1_client_method
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSv1_client_method
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get
</UL>

<P><STRONG><a name="[c5]"></a>crypto_mem_free</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cyassl_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = crypto_mem_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnSetTimer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchip_timer_tick
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_clean
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_fd
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicEncrypt
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecrypt
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSigners
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificate
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBuffered
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL_Ctx
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDecodedCert
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CyaSSL_check_domain_name
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCyaSSL
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xrelease
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_child_clean
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_init
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_deinit
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaSSL_Sign
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaSSL_Verify
</UL>

<P><STRONG><a name="[41f]"></a>crypto_mem_calloc</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, cyassl_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[421]"></a>crypto_mem_realloc</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cyassl_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = crypto_mem_realloc &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>

<P><STRONG><a name="[1ed]"></a>easy_link_end_time</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, easylink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reboot
</UL>

<P><STRONG><a name="[154]"></a>easy_link_start</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, easylink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = easy_link_start &rArr; wiced_wifi_add_packet_filter &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer_uniq
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_packet_filter
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_monitor_mode
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_add_packet_filter
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_time
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_channle
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenEasylink
</UL>

<P><STRONG><a name="[11c]"></a>easy_link_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, easylink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseEasylink
</UL>

<P><STRONG><a name="[42e]"></a>host_network_process_raw_packet</STRONG> (Thumb, 540 bytes, Stack size 40 bytes, easylink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_size
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_process_packet
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_invalid_data
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_process_sdpcm
</UL>

<P><STRONG><a name="[433]"></a>wlan_add_packet_filter</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, easylink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_add_packet_filter
</UL>

<P><STRONG><a name="[434]"></a>wlan_enable_packet_filter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, easylink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_packet_filter
</UL>

<P><STRONG><a name="[435]"></a>wlan_disable_pakcet_filter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, easylink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_packet_filter
</UL>

<P><STRONG><a name="[436]"></a>wlan_remove_packet_filter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, easylink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_remove_packet_filter
</UL>

<P><STRONG><a name="[437]"></a>wlan_sniffer_start</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, easylink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_channel
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_monitor_mode
</UL>

<P><STRONG><a name="[438]"></a>wlan_sniffer_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, easylink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_monitor_mode
</UL>

<P><STRONG><a name="[439]"></a>ath_set_channel</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, easylink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_channel
</UL>

<P><STRONG><a name="[6e5]"></a>wiced_platform_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, platform.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>init_platform</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, platform.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[43a]"></a>host_platform_reset_wifi</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = host_platform_reset_wifi
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_init
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_deinit
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_init
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_deinit
</UL>

<P><STRONG><a name="[43d]"></a>host_platform_power_wifi</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = host_platform_power_wifi
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_init
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_deinit
</UL>

<P><STRONG><a name="[44e]"></a>host_rtos_create_thread</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, wwd_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = host_rtos_create_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_init
</UL>

<P><STRONG><a name="[44b]"></a>host_rtos_finish_thread</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wwd_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_thread_end
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_func
</UL>

<P><STRONG><a name="[450]"></a>host_rtos_delete_terminated_thread</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wwd_rtos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_quit
</UL>

<P><STRONG><a name="[209]"></a>host_rtos_init_semaphore</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wwd_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_start_ap
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join_specific
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_init_sdpcm
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_init
</UL>

<P><STRONG><a name="[423]"></a>host_rtos_get_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wwd_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_stop
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_start
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_channle
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_semaphore
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wait_bus_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_end_time
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_start_timer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_timer_tick
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_thread
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_thread_timeout
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_channle
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_receive_one_packet
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_delay_milliseconds
</UL>

<P><STRONG><a name="[217]"></a>host_rtos_get_semaphore</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wwd_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_time
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_poll_all
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_sdio_transfer
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_stop_ap
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_start_ap
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join_specific
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_sdpcm_common
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_packet_to_send
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_func
</UL>

<P><STRONG><a name="[205]"></a>host_rtos_set_semaphore</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wwd_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_irq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_handle_apsta_event
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_join_events_handler
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_sdpcm_common
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_process_sdpcm
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_init_sdpcm
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_packet_to_send
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_quit
</UL>

<P><STRONG><a name="[210]"></a>host_rtos_deinit_semaphore</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wwd_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_deinit
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_stop_ap
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_start_ap
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join_specific
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_quit_sdpcm
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_init_sdpcm
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_quit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_func
</UL>

<P><STRONG><a name="[43e]"></a>host_rtos_delay_milliseconds</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, wwd_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = host_rtos_delay_milliseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_start_ap
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_download_firmware
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_reset_device_core
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_disable_device_core
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_prepare_join
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_init
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_ensure_wlan_bus_is_up
</UL>

<P><STRONG><a name="[43f]"></a>wiced_send_one_packet</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wwd_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = wiced_send_one_packet &rArr; wiced_bus_transfer_buffer &rArr; wiced_bus_transfer_bytes &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_packet_to_send
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_transfer_buffer
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_ensure_wlan_bus_is_up
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_poll_all
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_func
</UL>

<P><STRONG><a name="[443]"></a>wiced_receive_one_packet</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wwd_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_time
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_frame
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_process_sdpcm
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wait_bus_free
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_poll_all
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_func
</UL>

<P><STRONG><a name="[44c]"></a>wiced_thread_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wwd_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wiced_thread_init &rArr; host_rtos_create_thread
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_init_semaphore
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_init_sdpcm
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_create_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_on
</UL>

<P><STRONG><a name="[1f8]"></a>wiced_poll_all</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wwd_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetWatchDog
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_process_interrupt
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_receive_one_packet
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_one_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_tick
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_semaphore
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wait_bus_free
</UL>

<P><STRONG><a name="[1f9]"></a>wiced_wait_bus_free</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, wwd_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = wiced_wait_bus_free &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_time
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_poll_all
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_available_bus_credits
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_poke_wlan
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_receive_one_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_tick
</UL>

<P><STRONG><a name="[44f]"></a>wiced_thread_quit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wwd_thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_set_semaphore
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_deinit_semaphore
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_quit_sdpcm
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_delete_terminated_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_off
</UL>

<P><STRONG><a name="[203]"></a>wiced_platform_notify_irq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wwd_thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_oob_irq_handler
</UL>

<P><STRONG><a name="[454]"></a>wiced_thread_notify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wwd_thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_sdpcm_common
</UL>

<P><STRONG><a name="[456]"></a>wiced_setting_poll_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wwd_thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
</UL>

<P><STRONG><a name="[44d]"></a>wiced_init_sdpcm</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, sdpcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wiced_init_sdpcm
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_set_semaphore
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_init_semaphore
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_deinit_semaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_init
</UL>

<P><STRONG><a name="[44a]"></a>wiced_quit_sdpcm</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sdpcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = wiced_quit_sdpcm &rArr; host_buffer_release &rArr; crypto_mem_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_deinit_semaphore
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_next_buffer_in_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_quit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_func
</UL>

<P><STRONG><a name="[455]"></a>wiced_send_ioctl</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, sdpcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872<LI>Call Chain = wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_size
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_set_semaphore
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_semaphore
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_add_remove_at_front
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_sdpcm_common
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_setting_poll_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_roam_trigger
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_pmk
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_powersave
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_on
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_channel
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_monitor_mode
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_monitor_mode
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_start_ap
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_leave
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join_specific
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_rssi
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_channel
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_ap_info
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_powersave_with_throughput
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_associated_client_list
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_select_antenna
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_powersave
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_prepare_join
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_down
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>

<P><STRONG><a name="[458]"></a>wiced_send_iovar</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sdpcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_maxassoc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_wifi_version
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_on
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_remove_packet_filter
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_monitor_mode
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_monitor_mode
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_add_packet_filter
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_unregister_multicast_address
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_register_multicast_address
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_stop_scan
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_stop_ap
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_start_ap
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_tx_power
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_scan
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_tx_power
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_powersave_with_throughput
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_set_event_handler
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_keep_alive
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_add_keep_alive
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_packet_filter_list
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_clear_packet_filter_stats
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_packet_filter_stats
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_toggle_packet_filter
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_packet_filter_mode
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_counters
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_manage_custom_ie
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_acparams_sta
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_send_action_frame
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_cck_dutycycle
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_ofdm_dutycycle
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_cck_dutycycle
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_ofdm_dutycycle
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_listen_interval
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_listen_interval
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_listen_interval_assoc
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_mac_address
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_prepare_join
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_mac_address
</UL>

<P><STRONG><a name="[459]"></a>wiced_network_send_ethernet_data</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, sdpcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = wiced_network_send_ethernet_data &rArr; wiced_send_sdpcm_common &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_add_remove_at_front
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_sdpcm_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_send_eapol_packet
</UL>

<P><STRONG><a name="[45a]"></a>wiced_process_bus_credit_update</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sdpcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = wiced_process_bus_credit_update &rArr; host_buffer_release &rArr; crypto_mem_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_set_flow_control
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_frame
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_process_sdpcm
</UL>

<P><STRONG><a name="[445]"></a>wiced_process_sdpcm</STRONG> (Thumb, 834 bytes, Stack size 48 bytes, sdpcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_network_process_raw_packet
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_set_semaphore
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_is_packet_from_ap
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_network_process_ethernet_data
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_add_remove_at_front
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_process_bus_credit_update
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_receive_one_packet
</UL>

<P><STRONG><a name="[45e]"></a>wiced_get_iovar_buffer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sdpcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wiced_get_iovar_buffer &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_maxassoc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_wifi_version
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_on
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_remove_packet_filter
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_monitor_mode
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_monitor_mode
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_add_packet_filter
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_unregister_multicast_address
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_register_multicast_address
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_stop_scan
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_stop_ap
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_start_ap
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_tx_power
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_scan
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_tx_power
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_powersave_with_throughput
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_set_event_handler
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_keep_alive
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_add_keep_alive
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_packet_filter_list
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_clear_packet_filter_stats
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_packet_filter_stats
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_toggle_packet_filter
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_packet_filter_mode
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_counters
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_manage_custom_ie
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_acparams_sta
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_send_action_frame
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_cck_dutycycle
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_ofdm_dutycycle
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_cck_dutycycle
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_ofdm_dutycycle
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_listen_interval
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_listen_interval
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_listen_interval_assoc
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_mac_address
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_prepare_join
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_mac_address
</UL>

<P><STRONG><a name="[1eb]"></a>wiced_management_set_event_handler</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, sdpcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_link_event_hander
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_stop_ap
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_start_ap
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_scan
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_leave
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_prepare_join
</UL>

<P><STRONG><a name="[460]"></a>wiced_get_ioctl_buffer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sdpcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wiced_get_ioctl_buffer &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_roam_trigger
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_pmk
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_powersave
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_on
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_channel
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_monitor_mode
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_monitor_mode
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_start_ap
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_leave
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join_specific
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_rssi
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_channel
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_ap_info
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_powersave_with_throughput
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_associated_client_list
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_select_antenna
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_powersave
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_prepare_join
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_down
</UL>

<P><STRONG><a name="[440]"></a>wiced_get_packet_to_send</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, sdpcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = wiced_get_packet_to_send &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_tx_error_timer
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_set_semaphore
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_semaphore
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_is_flow_controlled
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_next_buffer_in_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_one_packet
</UL>

<P><STRONG><a name="[447]"></a>wiced_get_available_bus_credits</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdpcm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wait_bus_free
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_func
</UL>

<P><STRONG><a name="[10d]"></a>wiced_management_wifi_on</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, wwd_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = wiced_management_wifi_on &rArr; wiced_wifi_set_maxassoc &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_maxassoc
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_init
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_mac_address
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_init
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reboot_only
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reboot
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_up
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_init
</UL>

<P><STRONG><a name="[1f6]"></a>wiced_management_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wwd_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = wiced_management_init &rArr; wiced_management_wifi_on &rArr; wiced_wifi_set_maxassoc &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_on
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init
</UL>

<P><STRONG><a name="[10b]"></a>wiced_management_wifi_off</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wwd_management.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_deinit
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_down
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_deinit
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_deinit
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_quit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reboot_only
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reboot
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_power_down
</UL>

<P><STRONG><a name="[6e6]"></a>wiced_set_country</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wwd_management.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>wiced_get_mac_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wwd_management.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_mac_address
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_thread
</UL>

<P><STRONG><a name="[1db]"></a>wiced_wifi_scan</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_set_event_handler
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_scan
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_scan
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_scan
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_adv_scan
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_scan
</UL>

<P><STRONG><a name="[1d9]"></a>wiced_wifi_stop_scan</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = wiced_wifi_stop_scan &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_scan
</UL>

<P><STRONG><a name="[1e2]"></a>wiced_wifi_leave</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = wiced_wifi_leave &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_set_event_handler
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_retry_tick
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_disconnect
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join_specific
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_leave
</UL>

<P><STRONG><a name="[46c]"></a>wiced_wifi_is_ready_to_transceive</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, wwd_wifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join_specific
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_join_rslt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_join_events_handler
</UL>

<P><STRONG><a name="[1cd]"></a>wiced_wifi_join</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2056<LI>Call Chain = wiced_wifi_join &rArr; wiced_wifi_prepare_join &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_init_semaphore
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_semaphore
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_deinit_semaphore
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_leave
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_is_ready_to_transceive
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_prepare_join
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_connect_with_apinfo
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_sta_start
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_join
</UL>

<P><STRONG><a name="[1cc]"></a>wiced_wifi_join_specific</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = wiced_wifi_join_specific &rArr; wiced_wifi_prepare_join &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_init_semaphore
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_semaphore
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_deinit_semaphore
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_leave
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_is_ready_to_transceive
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_prepare_join
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_connect_with_apinfo
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_join
</UL>

<P><STRONG><a name="[465]"></a>wiced_wifi_get_mac_address</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = wiced_wifi_get_mac_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_on
</UL>

<P><STRONG><a name="[46e]"></a>wiced_wifi_set_mac_address</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>

<P><STRONG><a name="[1c4]"></a>wiced_wifi_enable_powersave_with_throughput</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = wiced_wifi_enable_powersave_with_throughput &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_init_wlan_powersave_clock
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ps
</UL>

<P><STRONG><a name="[470]"></a>wiced_wifi_enable_powersave</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_init_wlan_powersave_clock
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
</UL>

<P><STRONG><a name="[14f]"></a>wiced_wifi_disable_powersave</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = wiced_wifi_disable_powersave &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_deinit_wlan_powersave_clock
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_disconnect
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_ps_mode
</UL>

<P><STRONG><a name="[1f2]"></a>wiced_wifi_get_tx_power</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_tx_power
</UL>

<P><STRONG><a name="[1f4]"></a>wiced_wifi_set_tx_power</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_tx_power
</UL>

<P><STRONG><a name="[472]"></a>wiced_wifi_set_listen_interval_assoc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_listen_interval
</UL>

<P><STRONG><a name="[473]"></a>wiced_wifi_set_listen_interval</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_listen_interval_assoc
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>

<P><STRONG><a name="[474]"></a>wiced_wifi_get_listen_interval</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>

<P><STRONG><a name="[475]"></a>wiced_wifi_set_ofdm_dutycycle</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>

<P><STRONG><a name="[476]"></a>wiced_wifi_set_cck_dutycycle</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>

<P><STRONG><a name="[477]"></a>wiced_wifi_get_ofdm_dutycycle</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>

<P><STRONG><a name="[478]"></a>wiced_wifi_get_cck_dutycycle</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>

<P><STRONG><a name="[12b]"></a>wiced_wifi_get_pmk</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = wiced_wifi_get_pmk &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_connect_with_apinfo
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_get_pmk
</UL>

<P><STRONG><a name="[38b]"></a>wiced_wifi_register_multicast_address</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = wiced_wifi_register_multicast_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pd_addmulticast
</UL>

<P><STRONG><a name="[390]"></a>wiced_wifi_unregister_multicast_address</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = wiced_wifi_unregister_multicast_address &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pd_removemulticast
</UL>

<P><STRONG><a name="[1fb]"></a>wiced_wifi_get_rssi</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNetLink
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_CheckNetLink
</UL>

<P><STRONG><a name="[479]"></a>wiced_wifi_select_antenna</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
</UL>

<P><STRONG><a name="[110]"></a>wiced_wifi_set_roam_trigger</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_roam_trigger
</UL>

<P><STRONG><a name="[47a]"></a>wiced_wifi_send_action_frame</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[47b]"></a>wiced_wifi_get_acparams_sta</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[42b]"></a>wiced_wifi_enable_monitor_mode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = wiced_wifi_enable_monitor_mode &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_start
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_start
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sniffer_start
</UL>

<P><STRONG><a name="[424]"></a>wiced_wifi_disable_monitor_mode</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + In Cycle
<LI>Call Chain = wiced_wifi_disable_monitor_mode &rArr;  wiced_send_iovar (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sniffer_stop
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_success
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_fail
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_cooee_stop
</UL>

<P><STRONG><a name="[467]"></a>wiced_wifi_set_down</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_off
</UL>

<P><STRONG><a name="[47c]"></a>wiced_wifi_manage_custom_ie</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = wiced_wifi_manage_custom_ie &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_remove_vendor_ie
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_add_vendor_ie
</UL>

<P><STRONG><a name="[6e7]"></a>wiced_wifi_prioritize_acparams</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, wwd_wifi.o(.text), UNUSED)

<P><STRONG><a name="[6e8]"></a>wiced_wifi_get_available_tos</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wwd_wifi.o(.text), UNUSED)

<P><STRONG><a name="[47d]"></a>print_ac_params</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1fd]"></a>wiced_wifi_get_channel</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNetLink
</UL>

<P><STRONG><a name="[42a]"></a>wiced_wifi_set_channel</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896<LI>Call Chain = wiced_wifi_set_channel &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_start
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_set_channel
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_sniffer_start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_channle
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_channle
</UL>

<P><STRONG><a name="[47e]"></a>wiced_wifi_get_counters</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[47f]"></a>wiced_wifi_set_packet_filter_mode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>

<P><STRONG><a name="[428]"></a>wiced_wifi_add_packet_filter</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = wiced_wifi_add_packet_filter &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_start
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_start
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_add_packet_filter
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ssid_key_start
</UL>

<P><STRONG><a name="[425]"></a>wiced_wifi_remove_packet_filter</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + In Cycle
<LI>Call Chain = wiced_wifi_remove_packet_filter &rArr;  wiced_send_iovar (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_remove_packet_filter
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ssid_key_start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_success
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_fail
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_cooee_stop
</UL>

<P><STRONG><a name="[480]"></a>wiced_wifi_toggle_packet_filter</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = wiced_wifi_toggle_packet_filter &rArr;  wiced_send_iovar (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_packet_filter
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_packet_filter
</UL>

<P><STRONG><a name="[429]"></a>wiced_wifi_enable_packet_filter</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wiced_wifi_enable_packet_filter &rArr; wiced_wifi_toggle_packet_filter &rArr;  wiced_send_iovar (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_toggle_packet_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_start
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_start
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_enable_packet_filter
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ssid_key_start
</UL>

<P><STRONG><a name="[427]"></a>wiced_wifi_disable_packet_filter</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wiced_wifi_disable_packet_filter &rArr; wiced_wifi_toggle_packet_filter &rArr;  wiced_send_iovar (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_toggle_packet_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disable_pakcet_filter
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ssid_key_start
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_cooee_stop
</UL>

<P><STRONG><a name="[481]"></a>wiced_wifi_get_packet_filter_stats</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>

<P><STRONG><a name="[482]"></a>wiced_wifi_clear_packet_filter_stats</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>

<P><STRONG><a name="[483]"></a>wiced_wifi_get_packet_filter_list</STRONG> (Thumb, 628 bytes, Stack size 64 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_disabled_packet_filter_list
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_enabled_packet_filter_list
</UL>

<P><STRONG><a name="[484]"></a>wiced_wifi_get_enabled_packet_filter_list</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_packet_filter_list
</UL>

<P><STRONG><a name="[485]"></a>wiced_wifi_get_disabled_packet_filter_list</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_packet_filter_list
</UL>

<P><STRONG><a name="[486]"></a>wiced_wifi_delete_packet_filter_list</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[487]"></a>wiced_wifi_add_keep_alive</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_keep_alive
</UL>

<P><STRONG><a name="[488]"></a>wiced_wifi_get_keep_alive</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_size
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[489]"></a>wiced_wifi_disable_keep_alive</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_add_keep_alive
</UL>

<P><STRONG><a name="[48a]"></a>wiced_wifi_get_associated_client_list</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_size
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1fc]"></a>wiced_wifi_get_ap_info</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, wwd_wifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNetLink
</UL>

<P><STRONG><a name="[174]"></a>wiced_wifi_get_wifi_version</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = wiced_wifi_get_wifi_version &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_driver_version
</UL>

<P><STRONG><a name="[176]"></a>wiced_wifi_set_maxassoc</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = wiced_wifi_set_maxassoc &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_on
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_set_max_station_num
</UL>

<P><STRONG><a name="[1ea]"></a>wiced_wifi_start_ap</STRONG> (Thumb, 574 bytes, Stack size 56 bytes, wwd_ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1992<LI>Call Chain = wiced_wifi_start_ap &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_init_semaphore
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_semaphore
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_deinit_semaphore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_set_event_handler
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_delay_milliseconds
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect
</UL>

<P><STRONG><a name="[1e8]"></a>wiced_wifi_stop_ap</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, wwd_ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = wiced_wifi_stop_ap &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_semaphore
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_deinit_semaphore
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_set_event_handler
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_stop
</UL>

<P><STRONG><a name="[45c]"></a>wiced_wifi_is_packet_from_ap</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wwd_ap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_process_sdpcm
</UL>

<P><STRONG><a name="[45d]"></a>host_network_process_ethernet_data</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wwd_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1628<LI>Call Chain = host_network_process_ethernet_data &rArr; pkt_recv &rArr; ip_handler &rArr; udp_handler &rArr; dhcp_handler &rArr; dhcp_getopts &rArr; dhcp_set_results &rArr; dhcp_up &rArr; sta_up &rArr; set_sta_connection &rArr; ifdown &rArr;  ifctl_tick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_recv
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_size
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_process_sdpcm
</UL>

<P><STRONG><a name="[1af]"></a>low_level_output</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, wwd_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_add_remove_at_front
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_network_send_ethernet_data
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_gather
</UL>

<P><STRONG><a name="[ab]"></a>init_clocks</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f2xx_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_clocks &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_irq
</UL>

<P><STRONG><a name="[6e9]"></a>init_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_platform.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>init_architecture</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f2xx_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = init_architecture &rArr; host_platform_init &rArr; init_wlan_powersave_clock &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[499]"></a>wiced_gpio_output_high</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_transfer
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_init
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_transfer
</UL>

<P><STRONG><a name="[49e]"></a>wiced_gpio_init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset_wlan_powersave_clock
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_init
</UL>

<P><STRONG><a name="[49f]"></a>wiced_spi_init</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CalculateCRC
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_init
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_output_high
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_configure_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_transfer
</UL>

<P><STRONG><a name="[4a4]"></a>wiced_gpio_output_low</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset_wlan_powersave_clock
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_transfer
</UL>

<P><STRONG><a name="[4a5]"></a>wiced_spi_transfer</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_output_low
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_init
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_output_high
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_config
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_transfer
</UL>

<P><STRONG><a name="[6ea]"></a>wiced_spi_deinit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_platform.o(.text), UNUSED)

<P><STRONG><a name="[4a9]"></a>wiced_adc_init</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonStructInit
</UL>

<P><STRONG><a name="[4b0]"></a>wiced_adc_take_sample</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>

<P><STRONG><a name="[6eb]"></a>wiced_adc_take_sample_stream</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_platform.o(.text), UNUSED)

<P><STRONG><a name="[6ec]"></a>wiced_adc_deinit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_platform.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>wiced_gpio_input_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f2xx_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wiced_gpio_input_get
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
</UL>

<P><STRONG><a name="[24e]"></a>wiced_gpio_input_irq_enable</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, stm32f2xx_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wiced_gpio_input_irq_enable &rArr; gpio_irq_enable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_gpio_init
</UL>

<P><STRONG><a name="[4b5]"></a>wiced_gpio_input_irq_disable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_disable
</UL>

<P><STRONG><a name="[4b6]"></a>wiced_pwm_init</STRONG> (Thumb, 406 bytes, Stack size 96 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>

<P><STRONG><a name="[4c6]"></a>wiced_pwm_start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[4c9]"></a>wiced_pwm_stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[6ed]"></a>wiced_platform_get_rtc_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_platform.o(.text), UNUSED)

<P><STRONG><a name="[6ee]"></a>wiced_platform_set_rtc_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_platform.o(.text), UNUSED)

<P><STRONG><a name="[4ca]"></a>platform_power_down_hook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_power_down_hook
</UL>

<P><STRONG><a name="[4cc]"></a>RTC_WKUP_irq</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ClearFlag
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clocks
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WakeUpCmd
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetWakeUpCounter
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
</UL>

<P><STRONG><a name="[6ef]"></a>wiced_platform_mcu_enable_powersave</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_platform.o(.text), UNUSED)

<P><STRONG><a name="[6f0]"></a>wiced_platform_mcu_disable_powersave</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_platform.o(.text), UNUSED)

<P><STRONG><a name="[6f1]"></a>platform_idle_hook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_platform.o(.text), UNUSED)

<P><STRONG><a name="[4d4]"></a>host_platform_rand</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, stm32f2xx_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = host_platform_rand &rArr; RNG_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetRandomNumber
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetFlagStatus
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_DeInit
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Cmd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_random_bytes
</UL>

<P><STRONG><a name="[11a]"></a>easylink2_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, easylink2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseEasylink2
</UL>

<P><STRONG><a name="[156]"></a>easylink2_start</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, easylink2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_channel
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer_uniq
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_channel
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_packet_filter
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_monitor_mode
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_add_packet_filter
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_time
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_withdata
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenEasylink2
</UL>

<P><STRONG><a name="[158]"></a>easylink2_withdata</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, easylink2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_start
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenEasylink2_withdata
</UL>

<P><STRONG><a name="[432]"></a>easylink2_process_packet</STRONG> (Thumb, 654 bytes, Stack size 56 bytes, easylink2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_size
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cooee_success
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_network_process_raw_packet
</UL>

<P><STRONG><a name="[4ff]"></a>besl_wps_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wps_host.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pbc_start
</UL>

<P><STRONG><a name="[6f2]"></a>besl_wps_get_result</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wps_host.o(.text), UNUSED)

<P><STRONG><a name="[500]"></a>besl_wps_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wps_host.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_end
</UL>

<P><STRONG><a name="[4e5]"></a>besl_wps_enrollee</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, wps_host.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap32
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_thread
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pbc_start
</UL>

<P><STRONG><a name="[4e9]"></a>wps_host_start_timer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wps_host_start_timer &rArr; SetTimer &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_done
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_packet
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_start
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_join
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_scan
</UL>

<P><STRONG><a name="[4ea]"></a>wps_host_scan</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024<LI>Call Chain = wps_host_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_scan
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_find_and_join_ap
</UL>

<P><STRONG><a name="[4eb]"></a>wps_host_create_eapol_packet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wps_host_create_eapol_packet &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_add_remove_at_front
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_frag_ack
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_prepare_basic_packet
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_identity
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m5
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m7
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_start
</UL>

<P><STRONG><a name="[4ec]"></a>wps_host_get_eapol_data</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wps_host_get_eapol_data
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_frag_ack
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_prepare_basic_packet
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_identity
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m5
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m7
</UL>

<P><STRONG><a name="[4ed]"></a>wps_host_get_eapol_packet_size</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wps_host_get_eapol_packet_size
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_size
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_send_eapol_packet
</UL>

<P><STRONG><a name="[4ee]"></a>wps_host_send_eapol_packet</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = wps_host_send_eapol_packet &rArr; wiced_network_send_ethernet_data &rArr; wiced_send_sdpcm_common &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_get_eapol_packet_size
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_add_remove_at_front
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_network_send_ethernet_data
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_frag_ack
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_ack
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_done
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_nack
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_packet
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_start
</UL>

<P><STRONG><a name="[4ef]"></a>wps_host_leave</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960<LI>Call Chain = wps_host_leave &rArr; wiced_wifi_leave &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_leave
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_restart
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[4f0]"></a>wps_host_join</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080<LI>Call Chain = wps_host_join &rArr; wiced_wifi_join &rArr; wiced_wifi_prepare_join &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join_specific
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_start_timer
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_join_rslt
</UL>
<BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_find_and_join_ap
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[4f1]"></a>wps_host_add_vendor_ie</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = wps_host_add_vendor_ie &rArr; wiced_wifi_manage_custom_ie &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_manage_custom_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[4f2]"></a>wps_host_remove_vendor_ie</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968<LI>Call Chain = wps_host_remove_vendor_ie &rArr; wiced_wifi_manage_custom_ie &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_manage_custom_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_cleanup
</UL>

<P><STRONG><a name="[4f3]"></a>wps_host_store_ap</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = wps_host_store_ap &rArr; tlv_find_tlv8
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_find_tlv8
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_scan_result_handler
</UL>

<P><STRONG><a name="[5af]"></a>wps_host_retrieve_ap</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wps_host.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_find_and_join_ap
</UL>

<P><STRONG><a name="[5b0]"></a>wps_host_get_ap_list_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wps_host.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_find_and_join_ap
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[4f5]"></a>wps_host_store_credential</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wps_host_store_credential &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
</UL>

<P><STRONG><a name="[5b7]"></a>wps_host_stop_timer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wps_host.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_restart
</UL>

<P><STRONG><a name="[6f3]"></a>wps_ntoh16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wps_host.o(.text), UNUSED)

<P><STRONG><a name="[4f6]"></a>host_hton32</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = host_hton32
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap32
</UL>
<BR>[Called By]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_kdf
</UL>

<P><STRONG><a name="[4f7]"></a>host_hton16_ptr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = host_hton16_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_write_value
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_read_value
</UL>

<P><STRONG><a name="[4f8]"></a>host_hton16</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = host_hton16
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_write_value
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_write_header
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_find_tlv16
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_scan_result_handler
</UL>

<P><STRONG><a name="[6f4]"></a>wps_ntoh32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wps_host.o(.text), UNUSED)

<P><STRONG><a name="[4f9]"></a>host_hton32_ptr</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = host_hton32_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap32
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_write_value
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_read_value
</UL>

<P><STRONG><a name="[4fa]"></a>wps_host_random_bytes</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_host_random_bytes &rArr; host_platform_rand &rArr; RNG_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_encrypt_data
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
</UL>

<P><STRONG><a name="[4fb]"></a>wps_host_init_unfragmented_packet</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wps_host_init_unfragmented_packet &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
</UL>

<P><STRONG><a name="[4fc]"></a>wps_host_append_fragment</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wps_host_append_fragment &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
</UL>

<P><STRONG><a name="[5d8]"></a>wps_host_retrieve_unfragmented_packet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wps_host.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
</UL>

<P><STRONG><a name="[4fd]"></a>wps_host_free_unfragmented_packet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wps_host_free_unfragmented_packet &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_cleanup
</UL>

<P><STRONG><a name="[120]"></a>wps_is_running</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wps_host.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetwork
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdvNetwork
</UL>

<P><STRONG><a name="[4fe]"></a>wps_set_timeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wps_host.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pbc_start
</UL>

<P><STRONG><a name="[11e]"></a>wps_stop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wps_stop &rArr; SetTimer &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseConfigmodeWPS
</UL>

<P><STRONG><a name="[162]"></a>wps_pbc_start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_set_timeout
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;besl_wps_enrollee
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;besl_wps_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenConfigmodeWPS
</UL>

<P><STRONG><a name="[4df]"></a>wps_end</STRONG> (Thumb, 120 bytes, Stack size 208 bytes, wps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wps_end &rArr; RptConfigmodeRslt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RptConfigmodeRslt
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_RptConfigmodeRslt
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;besl_wps_deinit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_thread_end
</UL>

<P><STRONG><a name="[2aa]"></a>FlashGetInfo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_FlashGetInfo
</UL>

<P><STRONG><a name="[2ac]"></a>FlashRead</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_FlashRead
</UL>

<P><STRONG><a name="[2ae]"></a>FlashWrite</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnInit
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_FlashWrite
</UL>

<P><STRONG><a name="[2b0]"></a>FlashErase</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnInit
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_FlashErase
</UL>

<P><STRONG><a name="[508]"></a>newimage_write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnInit
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
</UL>

<P><STRONG><a name="[509]"></a>newimage_erase</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnInit
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[32a]"></a>xalloc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xalloc &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_xalloc
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc_buffer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sock_init
</UL>

<P><STRONG><a name="[378]"></a>_xalloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _xalloc &rArr; xalloc &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
</UL>

<P><STRONG><a name="[377]"></a>xavail</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
</UL>

<P><STRONG><a name="[6f5]"></a>_xavail</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>xmem2root</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xmem2root &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_read
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_getopts
</UL>

<P><STRONG><a name="[32d]"></a>xrelease</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xrelease &rArr; crypto_mem_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free_buffer
</UL>

<P><STRONG><a name="[36d]"></a>paddrSS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_gets
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_udp_notify
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send
</UL>

<P><STRONG><a name="[32e]"></a>xmem2xmem</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xmem2xmem &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_read
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_xwrite
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_xread
</UL>

<P><STRONG><a name="[331]"></a>xmemchr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xmemchr
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_findchar
</UL>

<P><STRONG><a name="[333]"></a>xmemcmp</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xmemcmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handler
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tbuf_findmem
</UL>

<P><STRONG><a name="[515]"></a>xgetint</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_getopts
</UL>

<P><STRONG><a name="[514]"></a>xgetlong</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handler
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_getopts
</UL>

<P><STRONG><a name="[50a]"></a>root2xmem</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[319]"></a>paddr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_send
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_read
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fastread
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_dataready
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recvfrom
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_gets
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_awrite
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_write
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_write_one_packet
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_aread
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_preread
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_peek
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_bytesready
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fastwrite
</UL>

<P><STRONG><a name="[50c]"></a>sockerr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, neterrno.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_perror
</UL>

<P><STRONG><a name="[50d]"></a>sock_error</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, neterrno.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_perror
</UL>

<P><STRONG><a name="[50b]"></a>sock_perror</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, neterrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_error
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sockerr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2f8]"></a>sock_msg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, neterrno.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sock_sendto
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_open
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_xsendto
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_extopen
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_Retransmitter
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay2
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay1
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ip_delay0
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_udp_notify
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_notify
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_socks
</UL>

<P><STRONG><a name="[50e]"></a>_servlist_sort_preferences</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, servlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _servlist_sort_preferences
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_delete
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_add
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_set_health
</UL>

<P><STRONG><a name="[2fc]"></a>servlist_add</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, servlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = servlist_add &rArr; _servlist_sort_preferences
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_servlist_sort_preferences
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_config
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_results
</UL>

<P><STRONG><a name="[2fb]"></a>servlist_delete</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, servlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = servlist_delete &rArr; _servlist_sort_preferences
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_servlist_sort_preferences
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
</UL>

<P><STRONG><a name="[2ea]"></a>servlist_set_health</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, servlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = servlist_set_health &rArr; _servlist_sort_preferences
</UL>
<BR>[Calls]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_servlist_sort_preferences
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_handler
</UL>

<P><STRONG><a name="[6f6]"></a>servlist_flags</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, servlist.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>servlist_first</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, servlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = servlist_first
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_server_get
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_get
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tick
</UL>

<P><STRONG><a name="[2e8]"></a>servlist_next</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, servlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = servlist_next
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifconfig
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_get
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_handler
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tick
</UL>

<P><STRONG><a name="[50f]"></a>servlist_print</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, servlist.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[510]"></a>dhcp_send</STRONG> (Thumb, 762 bytes, Stack size 632 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_write
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paddrSS
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_tick
</UL>

<P><STRONG><a name="[511]"></a>dhcp_timeout</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcp_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_tick
</UL>

<P><STRONG><a name="[2f6]"></a>dhcp_tick</STRONG> (Thumb, 588 bytes, Stack size 24 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifdown
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_abort_socks
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_timeout
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check_lease
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifctl_tick
</UL>

<P><STRONG><a name="[2f7]"></a>dhcp_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifctl_tick
</UL>

<P><STRONG><a name="[512]"></a>dhcp_set_results</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = dhcp_set_results &rArr; dhcp_up &rArr; sta_up &rArr; set_sta_connection &rArr; ifdown &rArr;  ifctl_tick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_up
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_add
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_add
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_getopts
</UL>

<P><STRONG><a name="[513]"></a>dhcp_getopts</STRONG> (Thumb, 804 bytes, Stack size 336 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044<LI>Call Chain = dhcp_getopts &rArr; dhcp_set_results &rArr; dhcp_up &rArr; sta_up &rArr; set_sta_connection &rArr; ifdown &rArr;  ifctl_tick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmem2root
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sethostname
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_results
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgetlong
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgetint
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handler
</UL>

<P><STRONG><a name="[375]"></a>dhcp_handler</STRONG> (Thumb, 360 bytes, Stack size 160 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1204<LI>Call Chain = dhcp_handler &rArr; dhcp_getopts &rArr; dhcp_set_results &rArr; dhcp_up &rArr; sta_up &rArr; set_sta_connection &rArr; ifdown &rArr;  ifctl_tick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcmp
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_getopts
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xgetlong
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_handler
</UL>

<P><STRONG><a name="[2dc]"></a>dhcp_handle_arp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bootp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_handler
</UL>

<P><STRONG><a name="[34a]"></a>dhcp_check_lease</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, bootp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = dhcp_check_lease &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tcp_tick_internal
</UL>

<P><STRONG><a name="[517]"></a>dhcp_acquire</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bootp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifup
</UL>

<P><STRONG><a name="[518]"></a>dhcp_release</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bootp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifdown
</UL>

<P><STRONG><a name="[6f7]"></a>dhcp_get_timezone</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bootp.o(.text), UNUSED)

<P><STRONG><a name="[519]"></a>clear_lease</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, leases.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = clear_lease &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lease
</UL>

<P><STRONG><a name="[51b]"></a>oldest_expired_lease</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, leases.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oldest_expired_lease
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lease
</UL>

<P><STRONG><a name="[51a]"></a>add_lease</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, leases.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = add_lease &rArr; clear_lease &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oldest_expired_lease
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lease
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
</UL>

<P><STRONG><a name="[388]"></a>lease_expired</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, leases.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_handler
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_address
</UL>

<P><STRONG><a name="[383]"></a>find_lease_by_chaddr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, leases.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = find_lease_by_chaddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_handler
</UL>

<P><STRONG><a name="[387]"></a>find_lease_by_yiaddr</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, leases.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_handler
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_address
</UL>

<P><STRONG><a name="[51d]"></a>check_ip</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, leases.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_address
</UL>

<P><STRONG><a name="[51c]"></a>find_address</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, leases.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = find_address &rArr; htonl
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lease_expired
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_lease_by_yiaddr
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
</UL>

<P><STRONG><a name="[382]"></a>get_option</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, options.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_option
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_handler
</UL>

<P><STRONG><a name="[51f]"></a>end_option</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, options.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_option_string
</UL>

<P><STRONG><a name="[51e]"></a>add_option_string</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, options.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = add_option_string &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_option
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_inform
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_simple_option
</UL>

<P><STRONG><a name="[520]"></a>add_simple_option</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, options.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = add_simple_option &rArr; add_option_string &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_option_string
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_header
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_packet
</UL>

<P><STRONG><a name="[6f8]"></a>find_option</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, options.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>sendOffer</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, serverpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = sendOffer &rArr; send_packet &rArr; send_packet_to_client &rArr; udp_raw_packet &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lease_expired
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_option
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_lease_by_yiaddr
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_lease_by_chaddr
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_bootp_options
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_packet
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_simple_option
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_option_string
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_address
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lease
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_handler
</UL>

<P><STRONG><a name="[386]"></a>sendNAK</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, serverpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = sendNAK &rArr; send_packet &rArr; send_packet_to_client &rArr; udp_raw_packet &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_packet
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_handler
</UL>

<P><STRONG><a name="[385]"></a>sendACK</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, serverpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = sendACK &rArr; send_packet &rArr; send_packet_to_client &rArr; udp_raw_packet &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_option
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_bootp_options
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_packet
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_simple_option
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_option_string
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lease
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_handler
</UL>

<P><STRONG><a name="[389]"></a>send_inform</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, serverpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = send_inform &rArr; send_packet &rArr; send_packet_to_client &rArr; udp_raw_packet &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_bootp_options
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_packet
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_option_string
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcps_handler
</UL>

<P><STRONG><a name="[528]"></a>p_hash</STRONG> (Thumb, 192 bytes, Stack size 360 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = p_hash &rArr; HmacSetKey &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacUpdate
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacSetKey
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacFinal
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRF
</UL>

<P><STRONG><a name="[3ed]"></a>BuildTlsFinished</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = BuildTlsFinished &rArr; PRF &rArr; p_hash &rArr; HmacSetKey &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Final
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRF
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFinished
</UL>

<P><STRONG><a name="[3fa]"></a>DeriveTlsKeys</STRONG> (Thumb, 102 bytes, Stack size 240 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = DeriveTlsKeys &rArr; PRF &rArr; p_hash &rArr; HmacSetKey &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreKeys
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRF
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOldClientHello
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerHello
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTlsMasterSecret
</UL>

<P><STRONG><a name="[52f]"></a>MakeTlsMasterSecret</STRONG> (Thumb, 72 bytes, Stack size 88 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = MakeTlsMasterSecret &rArr; DeriveTlsKeys &rArr; PRF &rArr; p_hash &rArr; HmacSetKey &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveTlsKeys
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRF
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
</UL>

<P><STRONG><a name="[8d]"></a>TLS_hmac</STRONG> (Thumb, 166 bytes, Stack size 320 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = TLS_hmac &rArr; HmacSetKey &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacUpdate
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacSetKey
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacFinal
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMacSecret
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSEQIncrement
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c32toa
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keys.o(.text)
</UL>
<P><STRONG><a name="[534]"></a>TLSv1_client_method</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Method
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTLSv1
</UL>

<P><STRONG><a name="[536]"></a>TLSv1_1_client_method</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Method
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTLSv1_1
</UL>

<P><STRONG><a name="[538]"></a>TLSv1_server_method</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Method
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTLSv1
</UL>

<P><STRONG><a name="[539]"></a>TLSv1_1_server_method</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tls.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL_Method
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTLSv1_1
</UL>

<P><STRONG><a name="[3f6]"></a>SetCipherSpecs</STRONG> (Thumb, 366 bytes, Stack size 0 bytes, keys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerHello
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatchSuite
</UL>

<P><STRONG><a name="[52e]"></a>StoreKeys</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, keys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = StoreKeys &rArr; SetKeys &rArr; Des3_SetKey &rArr; DesSetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeys
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveTlsKeys
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveKeys
</UL>

<P><STRONG><a name="[3fb]"></a>DeriveKeys</STRONG> (Thumb, 220 bytes, Stack size 536 bytes, keys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = DeriveKeys &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Final
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSha
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMd5
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrefix
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreKeys
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOldClientHello
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerHello
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
</UL>

<P><STRONG><a name="[53f]"></a>CleanPreMaster</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, keys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CleanPreMaster &rArr; RNG_GenerateBlock &rArr; Arc4Process &rArr; MakeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GenerateBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
</UL>

<P><STRONG><a name="[3f3]"></a>MakeMasterSecret</STRONG> (Thumb, 262 bytes, Stack size 416 bytes, keys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032<LI>Call Chain = MakeMasterSecret &rArr; MakeTlsMasterSecret &rArr; DeriveTlsKeys &rArr; PRF &rArr; p_hash &rArr; HmacSetKey &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Final
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSha
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMd5
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveKeys
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPreMaster
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrefix
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTlsMasterSecret
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
</UL>

<P><STRONG><a name="[3db]"></a>InitSha</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sha.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveKeys
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmac
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHmac
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
</UL>

<P><STRONG><a name="[3dc]"></a>ShaUpdate</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLength
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseBytes
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveKeys
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOldClientHello
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildSHA
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashInput
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmac
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacKeyInnerHash
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacUpdate
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacSetKey
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacFinal
</UL>

<P><STRONG><a name="[3dd]"></a>ShaFinal</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, sha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ShaFinal &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSha
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLength
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseBytes
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveKeys
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTlsFinished
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildSHA
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmac
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacSetKey
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacFinal
</UL>

<P><STRONG><a name="[3ef]"></a>InitRsaKey</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rsa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
</UL>

<P><STRONG><a name="[3f4]"></a>FreeRsaKey</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FreeRsaKey &rArr; cyssl_mp_clear &rArr; crypto_mem_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
</UL>

<P><STRONG><a name="[41a]"></a>RsaPublicEncrypt</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_unsigned_bin_size
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaFunction
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
</UL>

<P><STRONG><a name="[3f2]"></a>RsaPrivateDecrypt</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3568<LI>Call Chain = RsaPrivateDecrypt &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaFunction
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaUnPad
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
</UL>

<P><STRONG><a name="[556]"></a>RsaSSL_Verify</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3568<LI>Call Chain = RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaFunction
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaUnPad
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
</UL>

<P><STRONG><a name="[557]"></a>RsaSSL_Sign</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_unsigned_bin_size
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaFunction
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad
</UL>

<P><STRONG><a name="[3f1]"></a>RsaEncryptSize</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RsaEncryptSize &rArr; cyssl_mp_unsigned_bin_size &rArr; mp_count_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_unsigned_bin_size
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
</UL>

<P><STRONG><a name="[3f9]"></a>RNG_GenerateBlock</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RNG_GenerateBlock &rArr; Arc4Process &rArr; MakeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc4Process
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRng
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOldClientHello
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHello
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GenerateByte
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanPreMaster
</UL>

<P><STRONG><a name="[558]"></a>GenerateSeed</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GenerateSeed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRng
</UL>

<P><STRONG><a name="[3de]"></a>InitRng</STRONG> (Thumb, 46 bytes, Stack size 304 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = InitRng &rArr; RNG_GenerateBlock &rArr; Arc4Process &rArr; MakeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GenerateBlock
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateSeed
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc4SetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
</UL>

<P><STRONG><a name="[559]"></a>RNG_GenerateByte</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, random.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GenerateBlock
</UL>

<P><STRONG><a name="[3d8]"></a>InitMd5</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cyssl_md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Final
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveKeys
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmac
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHmac
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
</UL>

<P><STRONG><a name="[3d9]"></a>Md5Update</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, cyssl_md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Md5Update &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLength
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveKeys
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOldClientHello
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMD5
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashInput
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmac
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacKeyInnerHash
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacUpdate
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacSetKey
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacFinal
</UL>

<P><STRONG><a name="[3da]"></a>Md5Final</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, cyssl_md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Md5Final &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMd5
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLength
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveKeys
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTlsFinished
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMD5
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmac
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacSetKey
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacFinal
</UL>

<P><STRONG><a name="[53c]"></a>Des3_SetKey</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Des3_SetKey &rArr; DesSetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reverse
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeys
</UL>

<P><STRONG><a name="[56e]"></a>DesRawProcessBlock</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DesRawProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotrFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3ProcessBlock
</UL>

<P><STRONG><a name="[412]"></a>Des3_CbcEncrypt</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Des3_CbcEncrypt &rArr; Des3ProcessBlock &rArr; DesRawProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3ProcessBlock
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt
</UL>

<P><STRONG><a name="[406]"></a>Des3_CbcDecrypt</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Des3_CbcDecrypt &rArr; Des3ProcessBlock &rArr; DesRawProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3ProcessBlock
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
</UL>

<P><STRONG><a name="[3b1]"></a>Base64Decode</STRONG> (Thumb, 364 bytes, Stack size 60 bytes, coding.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PemToDer
</UL>

<P><STRONG><a name="[571]"></a>GetLength</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSet
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSignature
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDate
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoId
</UL>

<P><STRONG><a name="[570]"></a>GetSequence</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetSequence &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicKeyDecode
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateKeyDecode
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValidity
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreKey
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoId
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCertHeader
</UL>

<P><STRONG><a name="[572]"></a>GetSet</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetSet &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
</UL>

<P><STRONG><a name="[574]"></a>GetVersion</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateKeyDecode
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExplicitVersion
</UL>

<P><STRONG><a name="[573]"></a>GetExplicitVersion</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetExplicitVersion &rArr; GetVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCertHeader
</UL>

<P><STRONG><a name="[575]"></a>GetInt</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2552<LI>Call Chain = GetInt &rArr; cyssl_mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_read_unsigned_bin
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicKeyDecode
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateKeyDecode
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCertHeader
</UL>

<P><STRONG><a name="[3f0]"></a>RsaPrivateKeyDecode</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2584<LI>Call Chain = RsaPrivateKeyDecode &rArr; GetInt &rArr; cyssl_mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVersion
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
</UL>

<P><STRONG><a name="[419]"></a>RsaPublicKeyDecode</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2584<LI>Call Chain = RsaPublicKeyDecode &rArr; GetInt &rArr; cyssl_mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
</UL>

<P><STRONG><a name="[3ac]"></a>InitDecodedCert</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, asn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificate
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
</UL>

<P><STRONG><a name="[3af]"></a>FreeDecodedCert</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FreeDecodedCert &rArr; crypto_mem_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificate
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
</UL>

<P><STRONG><a name="[3ad]"></a>ParseCert</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4576<LI>Call Chain = ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSignature
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToKey
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoId
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificate
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
</UL>

<P><STRONG><a name="[3ae]"></a>MakeSigner</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
</UL>

<P><STRONG><a name="[3d3]"></a>FreeSigners</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeSSL_Ctx
</UL>

<P><STRONG><a name="[53b]"></a>Arc4SetKey</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, arc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Arc4SetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRng
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeys
</UL>

<P><STRONG><a name="[405]"></a>Arc4Process</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, arc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Arc4Process &rArr; MakeByte
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GenerateBlock
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
</UL>

<P><STRONG><a name="[53d]"></a>AesSetKey</STRONG> (Thumb, 968 bytes, Stack size 40 bytes, cyssl_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AesSetKey &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_decrypt_pad
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt_pad
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetKeys
</UL>

<P><STRONG><a name="[592]"></a>AesEncrypt</STRONG> (Thumb, 874 bytes, Stack size 56 bytes, cyssl_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AesEncrypt &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWord32
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesCbcEncrypt
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt_pad
</UL>

<P><STRONG><a name="[593]"></a>AesDecrypt</STRONG> (Thumb, 878 bytes, Stack size 56 bytes, cyssl_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AesDecrypt &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWord32
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesCbcDecrypt
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_decrypt_pad
</UL>

<P><STRONG><a name="[22a]"></a>aes_encrypt</STRONG> (Thumb, 42 bytes, Stack size 320 bytes, cyssl_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = aes_encrypt &rArr; AesSetKey &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesEncrypt
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_encrypt_block
</UL>

<P><STRONG><a name="[413]"></a>AesCbcEncrypt</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, cyssl_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AesCbcEncrypt &rArr; AesEncrypt &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesEncrypt
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorbuf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt
</UL>

<P><STRONG><a name="[407]"></a>AesCbcDecrypt</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, cyssl_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AesCbcDecrypt &rArr; AesDecrypt &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesDecrypt
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorbuf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
</UL>

<P><STRONG><a name="[594]"></a>aes_cbc_encrypt_pad</STRONG> (Thumb, 186 bytes, Stack size 352 bytes, cyssl_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = aes_cbc_encrypt_pad &rArr; AesSetKey &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesEncrypt
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorbuf
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesSetKey
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_encrypt_data
</UL>

<P><STRONG><a name="[595]"></a>aes_cbc_decrypt_pad</STRONG> (Thumb, 188 bytes, Stack size 336 bytes, cyssl_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = aes_cbc_decrypt_pad &rArr; AesSetKey &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesDecrypt
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorbuf
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesSetKey
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_data
</UL>

<P><STRONG><a name="[463]"></a>host_platform_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wwd_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = host_platform_init &rArr; init_wlan_powersave_clock &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wlan_powersave_clock
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_power_wifi
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_reset_wifi
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_on
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_architecture
</UL>

<P><STRONG><a name="[469]"></a>host_platform_deinit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wwd_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset_wlan_powersave_clock
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_power_wifi
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_reset_wifi
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_off
</UL>

<P><STRONG><a name="[6f9]"></a>host_platform_get_cycle_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wwd_platform.o(.text), UNUSED)

<P><STRONG><a name="[6fa]"></a>host_platform_is_in_interrupt_context</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wwd_platform.o(.text), UNUSED)

<P><STRONG><a name="[46f]"></a>host_platform_init_wlan_powersave_clock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wwd_platform.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_powersave_with_throughput
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_powersave
</UL>

<P><STRONG><a name="[471]"></a>host_platform_deinit_wlan_powersave_clock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wwd_platform.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_powersave
</UL>

<P><STRONG><a name="[466]"></a>host_buffer_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, wwd_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = host_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_init
</UL>

<P><STRONG><a name="[45f]"></a>host_buffer_get</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, wwd_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_create_eapol_packet
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_frame
</UL>

<P><STRONG><a name="[431]"></a>host_buffer_release</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wwd_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = host_buffer_release &rArr; crypto_mem_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_wifi_version
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_pmk
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_network_process_raw_packet
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_unregister_multicast_address
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_register_multicast_address
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_stop_ap
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_start_ap
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_tx_power
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_rssi
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_channel
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_ap_info
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_associated_client_list
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_keep_alive
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_packet_filter_list
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_packet_filter_stats
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_counters
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_acparams_sta
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_cck_dutycycle
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_ofdm_dutycycle
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_listen_interval
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_prepare_join
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_mac_address
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_network_process_ethernet_data
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_process_bus_credit_update
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_network_send_ethernet_data
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_sdpcm_common
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_frame
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_quit_sdpcm
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_process_sdpcm
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_one_packet
</UL>

<P><STRONG><a name="[42f]"></a>host_buffer_get_current_piece_data_pointer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wwd_buffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_wifi_version
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_pmk
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_process_packet
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_network_process_raw_packet
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_unregister_multicast_address
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_register_multicast_address
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_stop_ap
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_start_ap
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_tx_power
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_rssi
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_channel
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_ap_info
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_send_eapol_packet
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_get_eapol_data
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_associated_client_list
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_keep_alive
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_packet_filter_list
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_packet_filter_stats
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_counters
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_acparams_sta
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_cck_dutycycle
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_ofdm_dutycycle
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_listen_interval
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_mac_address
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_network_process_ethernet_data
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_network_send_ethernet_data
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_sdpcm_common
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_set_next_buffer_in_queue
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_next_buffer_in_queue
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_frame
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_process_sdpcm
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_packet_to_send
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_transfer_buffer
</UL>

<P><STRONG><a name="[430]"></a>host_buffer_get_current_piece_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wwd_buffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_process_packet
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_network_process_raw_packet
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_get_eapol_packet_size
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_associated_client_list
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_keep_alive
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_network_process_ethernet_data
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_sdpcm_common
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_transfer_buffer
</UL>

<P><STRONG><a name="[6fb]"></a>host_buffer_get_next_piece</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wwd_buffer.o(.text), UNUSED)

<P><STRONG><a name="[457]"></a>host_buffer_add_remove_at_front</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wwd_buffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_send_eapol_packet
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_create_eapol_packet
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_network_send_ethernet_data
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_process_sdpcm
</UL>

<P><STRONG><a name="[6fc]"></a>host_buffer_check_leaked</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wwd_buffer.o(.text), UNUSED)

<P><STRONG><a name="[599]"></a>wiced_set_backplane_window</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, wwd_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wiced_set_backplane_window &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_register_value
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_image
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_wifi_nvram_image
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_backplane_value
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_backplane_value
</UL>

<P><STRONG><a name="[59b]"></a>wiced_device_core_is_up</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, wwd_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wiced_device_core_is_up &rArr; wiced_read_backplane_value &rArr; wiced_set_backplane_window &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_backplane_value
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_core_address
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_download_firmware
</UL>

<P><STRONG><a name="[59e]"></a>wiced_disable_device_core</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wwd_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wiced_disable_device_core &rArr; wiced_write_backplane_value &rArr; wiced_set_backplane_window &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_backplane_value
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_backplane_value
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_core_address
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_delay_milliseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_download_firmware
</UL>

<P><STRONG><a name="[5a0]"></a>wiced_reset_device_core</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wwd_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = wiced_reset_device_core &rArr; wiced_write_backplane_value &rArr; wiced_set_backplane_window &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_backplane_value
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_backplane_value
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_core_address
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_delay_milliseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_download_firmware
</UL>

<P><STRONG><a name="[5a4]"></a>wiced_bus_transfer_bytes</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wiced_bus_transfer_bytes &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_sdio_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_image
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_wifi_nvram_image
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_frame
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_transfer_buffer
</UL>

<P><STRONG><a name="[442]"></a>wiced_bus_transfer_buffer</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wiced_bus_transfer_buffer &rArr; wiced_bus_transfer_bytes &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_size
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_transfer_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_one_packet
</UL>

<P><STRONG><a name="[59a]"></a>wiced_write_register_value</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_sdio_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_abort_read
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_download_firmware
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_set_backplane_window
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_init
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_ensure_wlan_bus_is_up
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_allow_wlan_bus_to_sleep
</UL>

<P><STRONG><a name="[59f]"></a>wiced_write_backplane_value</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = wiced_write_backplane_value &rArr; wiced_set_backplane_window &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_sdio_transfer
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_set_backplane_window
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_ack_interrupt
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_abort_read
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_download_firmware
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_reset_device_core
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_disable_device_core
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_process_interrupt
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_poke_wlan
</UL>

<P><STRONG><a name="[464]"></a>wiced_bus_init</STRONG> (Thumb, 834 bytes, Stack size 48 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = wiced_bus_init &rArr; wiced_download_firmware &rArr; wiced_write_wifi_nvram_image &rArr; write_image &rArr; wiced_set_backplane_window &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_enable_high_speed_sdio
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_sdio_transfer
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_download_firmware
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_register_value
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_sdio_transfer
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_register_value
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_delay_milliseconds
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_power_wifi
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_reset_wifi
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_on
</UL>

<P><STRONG><a name="[468]"></a>wiced_bus_deinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wwd_bus_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_reset_wifi
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_off
</UL>

<P><STRONG><a name="[5a9]"></a>wiced_bus_ack_interrupt</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wwd_bus_protocol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_backplane_value
</UL>

<P><STRONG><a name="[59d]"></a>wiced_read_backplane_value</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = wiced_read_backplane_value &rArr; wiced_set_backplane_window &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_sdio_transfer
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_set_backplane_window
</UL>
<BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_reset_device_core
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_disable_device_core
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_device_core_is_up
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_process_interrupt
</UL>

<P><STRONG><a name="[446]"></a>wiced_bus_process_interrupt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wiced_bus_process_interrupt &rArr; wiced_write_backplane_value &rArr; wiced_set_backplane_window &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_backplane_value
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_backplane_value
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_poll_all
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_func
</UL>

<P><STRONG><a name="[441]"></a>wiced_bus_ensure_wlan_bus_is_up</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wiced_bus_ensure_wlan_bus_is_up &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_register_value
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_register_value
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_delay_milliseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_frame
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_one_packet
</UL>

<P><STRONG><a name="[444]"></a>wiced_read_frame</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = wiced_read_frame &rArr; wiced_abort_read &rArr; wiced_write_backplane_value &rArr; wiced_set_backplane_window &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_transfer_bytes
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_abort_read
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_sdio_transfer
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_process_bus_credit_update
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_ensure_wlan_bus_is_up
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_receive_one_packet
</UL>

<P><STRONG><a name="[448]"></a>wiced_bus_poke_wlan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wiced_bus_poke_wlan &rArr; wiced_write_backplane_value &rArr; wiced_set_backplane_window &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_backplane_value
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wait_bus_free
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_func
</UL>

<P><STRONG><a name="[45b]"></a>wiced_bus_set_flow_control</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_process_bus_credit_update
</UL>

<P><STRONG><a name="[461]"></a>wiced_bus_is_flow_controlled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_packet_to_send
</UL>

<P><STRONG><a name="[449]"></a>wiced_bus_allow_wlan_bus_to_sleep</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wiced_bus_allow_wlan_bus_to_sleep &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_register_value
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_func
</UL>

<P><STRONG><a name="[5c3]"></a>nn_swap</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nn_swap &rArr; htonl
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
</UL>

<P><STRONG><a name="[4e0]"></a>enrollee_process_event</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4040<LI>Call Chain = enrollee_process_event &rArr; wps_process_message &rArr; wps_process_m2 &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_identity
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m5
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m7
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_restart
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_wps_probe_ie
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_wps_assoc_request_ie
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_cleanup
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_find_and_join_ap
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_start
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_get_ap_list_size
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_add_vendor_ie
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_join
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_leave
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_start_enrollee
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_thread_msg_dequeue
</UL>

<P><STRONG><a name="[4e3]"></a>wps_start_enrollee</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wps_enrollee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_thread
</UL>

<P><STRONG><a name="[4f4]"></a>tlv_find_tlv8</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, tlv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tlv_find_tlv8
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wps_message
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_scan_result_handler
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_store_ap
</UL>

<P><STRONG><a name="[5ac]"></a>tlv_find_tlv16</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tlv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tlv_find_tlv16 &rArr; host_hton16
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_hton16
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_read_value
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_scan_result_handler
</UL>

<P><STRONG><a name="[5ce]"></a>tlv_read_value</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, tlv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tlv_read_value &rArr; tlv_find_tlv16 &rArr; host_hton16
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_find_tlv16
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_hton32_ptr
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_hton16_ptr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
</UL>

<P><STRONG><a name="[5b3]"></a>tlv_write_value</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tlv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tlv_write_value &rArr; host_hton32_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_hton32_ptr
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_hton16
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_hton16_ptr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_nack
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_prepare_basic_packet
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m5
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m7
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_wps_probe_ie
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_wps_assoc_request_ie
</UL>

<P><STRONG><a name="[5b4]"></a>tlv_write_header</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tlv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tlv_write_header &rArr; host_hton16
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_hton16
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_wps_probe_ie
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_wps_assoc_request_ie
</UL>

<P><STRONG><a name="[5d9]"></a>getpeername</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, bsdname.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chk_socket
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[5da]"></a>getsockname</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, bsdname.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_iface
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chk_socket
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[5db]"></a>getdomainname</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsdname.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[6fd]"></a>setdomainname</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsdname.o(.text), UNUSED)

<P><STRONG><a name="[5dc]"></a>gethostname</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsdname.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[516]"></a>sethostname</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsdname.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sethostname
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_getopts
</UL>

<P><STRONG><a name="[5dd]"></a>psocket</STRONG> (Thumb, 62 bytes, Stack size 272 bytes, bsdname.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>

<P><STRONG><a name="[525]"></a>init_header</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, packet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_header &rArr; add_simple_option &rArr; add_option_string &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_simple_option
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_packet
</UL>

<P><STRONG><a name="[549]"></a>cyssl_mp_clear</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cyssl_mp_clear &rArr; crypto_mem_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRsaKey
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_deinit
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_3
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init_multi
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCertHeader
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_to_unsigned_bin
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mulmod
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_exptmod
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaFunction
</UL>

<P><STRONG><a name="[54d]"></a>cyssl_mp_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cyssl_mp_init &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_init
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init_multi
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mulmod
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_exptmod
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaFunction
</UL>

<P><STRONG><a name="[5e0]"></a>cyssl_mp_init_multi</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cyssl_mp_init_multi &rArr; cyssl_mp_init &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[5e1]"></a>mp_count_bits</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_count_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_is_2k
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_calc_normalization
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_unsigned_bin_size
</UL>

<P><STRONG><a name="[554]"></a>cyssl_mp_unsigned_bin_size</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cyssl_mp_unsigned_bin_size &rArr; mp_count_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicEncrypt
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaEncryptSize
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_get_unsigned_bin_len
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_get_unsigned_bin
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaSSL_Sign
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaFunction
</UL>

<P><STRONG><a name="[5eb]"></a>bn_reverse</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bn_reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_to_unsigned_bin
</UL>

<P><STRONG><a name="[5e9]"></a>mp_exch</STRONG> (Thumb, 34 bytes, Stack size 28 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mp_exch
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_3
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>

<P><STRONG><a name="[5e7]"></a>mp_clamp</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_3
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_reduce
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_fast_mp_montgomery_reduce
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_dr_reduce
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_d
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_high_digs
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_sqr
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_read_unsigned_bin
</UL>

<P><STRONG><a name="[5e3]"></a>mp_zero</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_read_unsigned_bin
</UL>

<P><STRONG><a name="[5e2]"></a>mp_rshd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_rshd
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_reduce
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>

<P><STRONG><a name="[5e4]"></a>mp_grow</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2432<LI>Call Chain = mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_reduce
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_fast_mp_montgomery_reduce
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_dr_reduce
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_d
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_high_digs
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_sqr
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_read_unsigned_bin
</UL>

<P><STRONG><a name="[5e5]"></a>mp_copy</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456<LI>Call Chain = mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_abs
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
</UL>

<P><STRONG><a name="[5e6]"></a>mp_mod_2d</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480<LI>Call Chain = mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>

<P><STRONG><a name="[5e8]"></a>mp_div_2d</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2552<LI>Call Chain = mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_to_unsigned_bin
</UL>

<P><STRONG><a name="[5ea]"></a>mp_init_copy</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2472<LI>Call Chain = mp_init_copy &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_to_unsigned_bin
</UL>

<P><STRONG><a name="[555]"></a>cyssl_mp_to_unsigned_bin</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = cyssl_mp_to_unsigned_bin &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bn_reverse
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_get_unsigned_bin
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaFunction
</UL>

<P><STRONG><a name="[5ec]"></a>mp_lshd</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456<LI>Call Chain = mp_lshd &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
</UL>

<P><STRONG><a name="[5ed]"></a>mp_mul_2d</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2496<LI>Call Chain = mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_read_unsigned_bin
</UL>

<P><STRONG><a name="[54e]"></a>cyssl_mp_read_unsigned_bin</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520<LI>Call Chain = cyssl_mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_set_unsigned_bin
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaFunction
</UL>

<P><STRONG><a name="[5ee]"></a>mp_init_size</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mp_init_size &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_3
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
</UL>

<P><STRONG><a name="[5ef]"></a>fast_s_mp_mul_digs</STRONG> (Thumb, 276 bytes, Stack size 72 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2504<LI>Call Chain = fast_s_mp_mul_digs &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mul
</UL>

<P><STRONG><a name="[5f0]"></a>s_mp_mul_digs</STRONG> (Thumb, 210 bytes, Stack size 88 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mul
</UL>

<P><STRONG><a name="[552]"></a>cyssl_mp_mul</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2624<LI>Call Chain = cyssl_mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
</UL>
<BR>[Called By]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_mul
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mulmod
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaFunction
</UL>

<P><STRONG><a name="[5f1]"></a>s_mp_sqr</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = s_mp_sqr &rArr; mp_init_size &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
</UL>

<P><STRONG><a name="[5f2]"></a>fast_s_mp_sqr</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2496<LI>Call Chain = fast_s_mp_sqr &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
</UL>

<P><STRONG><a name="[5f3]"></a>mp_sqr</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2512<LI>Call Chain = mp_sqr &rArr; fast_s_mp_sqr &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_sqr
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[5f4]"></a>mp_set</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mp_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_calc_normalization
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[5f5]"></a>s_mp_sub</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2472<LI>Call Chain = s_mp_sub &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_reduce
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_fast_mp_montgomery_reduce
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_dr_reduce
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_calc_normalization
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_sub
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_add
</UL>

<P><STRONG><a name="[5f7]"></a>mp_cmp_mag</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_reduce
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_fast_mp_montgomery_reduce
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_dr_reduce
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_calc_normalization
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_cmp
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_sub
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_add
</UL>

<P><STRONG><a name="[5f6]"></a>s_mp_add</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480<LI>Call Chain = s_mp_add &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_sub
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_add
</UL>

<P><STRONG><a name="[553]"></a>cyssl_mp_add</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2512<LI>Call Chain = cyssl_mp_add &rArr; s_mp_add &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_add
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaFunction
</UL>

<P><STRONG><a name="[550]"></a>cyssl_mp_sub</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2512<LI>Call Chain = cyssl_mp_sub &rArr; s_mp_add &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_sub
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaFunction
</UL>

<P><STRONG><a name="[5f8]"></a>cyssl_mp_cmp</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cyssl_mp_cmp &rArr; mp_cmp_mag
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_cmp
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[5f9]"></a>mp_abs</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2472<LI>Call Chain = mp_abs &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_exptmod
</UL>

<P><STRONG><a name="[5fa]"></a>mp_div</STRONG> (Thumb, 412 bytes, Stack size 112 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2664<LI>Call Chain = mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_abs
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_cmp
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init_multi
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_sub
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_add
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_setup
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
</UL>

<P><STRONG><a name="[5fb]"></a>mp_mod</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2704<LI>Call Chain = mp_mod &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_add
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mulmod
</UL>

<P><STRONG><a name="[5fc]"></a>mp_reduce_2k_l</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2664<LI>Call Chain = mp_reduce_2k_l &rArr; cyssl_mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mul
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> integer.o(.text)
</UL>
<P><STRONG><a name="[5fd]"></a>mp_2expt</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2456<LI>Call Chain = mp_2expt &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_calc_normalization
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_setup
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
</UL>

<P><STRONG><a name="[5fe]"></a>mp_reduce_2k_setup_l</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2512<LI>Call Chain = mp_reduce_2k_setup_l &rArr; s_mp_sub &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[602]"></a>cyssl_mp_cmp_d</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_cmp_d
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
</UL>

<P><STRONG><a name="[5ff]"></a>fast_s_mp_mul_high_digs</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2504<LI>Call Chain = fast_s_mp_mul_high_digs &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
</UL>

<P><STRONG><a name="[600]"></a>s_mp_mul_high_digs</STRONG> (Thumb, 218 bytes, Stack size 88 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = s_mp_mul_high_digs &rArr; fast_s_mp_mul_high_digs &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_high_digs
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
</UL>

<P><STRONG><a name="[601]"></a>mp_reduce</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2664<LI>Call Chain = mp_reduce &rArr; cyssl_mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_cmp_d
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_cmp
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_sub
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mul
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> integer.o(.text)
</UL>
<P><STRONG><a name="[603]"></a>mp_reduce_setup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2680<LI>Call Chain = mp_reduce_setup &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[604]"></a>s_mp_exptmod</STRONG> (Thumb, 822 bytes, Stack size 616 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3320<LI>Call Chain = s_mp_exptmod &rArr; mp_mod &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_setup
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mul
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_exptmod
</UL>

<P><STRONG><a name="[551]"></a>cyssl_mp_mulmod</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2744<LI>Call Chain = cyssl_mp_mulmod &rArr; mp_mod &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mul
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_mulmod
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaFunction
</UL>

<P><STRONG><a name="[605]"></a>mp_mul_2</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464<LI>Call Chain = mp_mul_2 &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_calc_normalization
</UL>

<P><STRONG><a name="[606]"></a>mp_montgomery_calc_normalization</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2496<LI>Call Chain = mp_montgomery_calc_normalization &rArr; s_mp_sub &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
</UL>

<P><STRONG><a name="[607]"></a>mp_mul_d</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480<LI>Call Chain = mp_mul_d &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k
</UL>

<P><STRONG><a name="[608]"></a>mp_reduce_2k</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2592<LI>Call Chain = mp_reduce_2k &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_d
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> integer.o(.text)
</UL>
<P><STRONG><a name="[609]"></a>mp_reduce_2k_setup</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2512<LI>Call Chain = mp_reduce_2k_setup &rArr; s_mp_sub &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
</UL>

<P><STRONG><a name="[60a]"></a>mp_dr_reduce</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2528<LI>Call Chain = mp_dr_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> integer.o(.text)
</UL>
<P><STRONG><a name="[60f]"></a>mp_dr_setup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
</UL>

<P><STRONG><a name="[60b]"></a>cyssl_fast_mp_montgomery_reduce</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2536<LI>Call Chain = cyssl_fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_reduce
</UL>
<BR>[Address Reference Count : 1]<UL><LI> integer.o(.text)
</UL>
<P><STRONG><a name="[60c]"></a>mp_montgomery_reduce</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2576<LI>Call Chain = mp_montgomery_reduce &rArr; cyssl_fast_mp_montgomery_reduce &rArr; s_mp_sub &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_fast_mp_montgomery_reduce
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> integer.o(.text)
</UL>
<P><STRONG><a name="[60e]"></a>mp_montgomery_setup</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_montgomery_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
</UL>

<P><STRONG><a name="[60d]"></a>mp_exptmod_fast</STRONG> (Thumb, 922 bytes, Stack size 608 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3352<LI>Call Chain = mp_exptmod_fast &rArr; cyssl_mp_mulmod &rArr; mp_mod &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_setup
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_dr_setup
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_montgomery_calc_normalization
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mulmod
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mul
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_exptmod
</UL>

<P><STRONG><a name="[610]"></a>mp_reduce_is_2k</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mp_reduce_is_2k &rArr; mp_count_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_exptmod
</UL>

<P><STRONG><a name="[616]"></a>mp_dr_is_modulus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, integer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_exptmod
</UL>

<P><STRONG><a name="[615]"></a>mp_reduce_is_2k_l</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_reduce_is_2k_l
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_exptmod
</UL>

<P><STRONG><a name="[611]"></a>mp_div_2</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2464<LI>Call Chain = mp_div_2 &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
</UL>

<P><STRONG><a name="[612]"></a>mp_invmod_slow</STRONG> (Thumb, 794 bytes, Stack size 160 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2864<LI>Call Chain = mp_invmod_slow &rArr; mp_mod &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_cmp_d
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_cmp
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init_multi
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_sub
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_add
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod
</UL>

<P><STRONG><a name="[613]"></a>fast_mp_invmod</STRONG> (Thumb, 528 bytes, Stack size 128 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2832<LI>Call Chain = fast_mp_invmod &rArr; mp_mod &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_cmp_d
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_cmp
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init_multi
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_sub
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_add
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod
</UL>

<P><STRONG><a name="[614]"></a>mp_invmod</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2880<LI>Call Chain = mp_invmod &rArr; mp_invmod_slow &rArr; mp_mod &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_mp_invmod
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod_slow
</UL>
<BR>[Called By]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_exptmod
</UL>

<P><STRONG><a name="[54f]"></a>cyssl_mp_exptmod</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, integer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416 + In Cycle
<LI>Call Chain = cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_invmod
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_is_2k_l
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_dr_is_modulus
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_is_2k
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod_fast
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_abs
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_exptmod
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_exptmod
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_exptmod
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaFunction
</UL>

<P><STRONG><a name="[617]"></a>mp_div_3</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, integer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>

<P><STRONG><a name="[529]"></a>HmacSetKey</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HmacSetKey &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Final
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Final
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHmac
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_hmac
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_hash
</UL>

<P><STRONG><a name="[52a]"></a>HmacUpdate</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = HmacUpdate &rArr; HmacKeyInnerHash &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacKeyInnerHash
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_hmac
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_hash
</UL>

<P><STRONG><a name="[52b]"></a>HmacFinal</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = HmacFinal &rArr; HmacKeyInnerHash &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Final
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Final
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacKeyInnerHash
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_hmac
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_hash
</UL>

<P><STRONG><a name="[5a7]"></a>wiced_write_wifi_firmware_image</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wwd_firmware.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = wiced_write_wifi_firmware_image &rArr; write_image &rArr; wiced_set_backplane_window &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_image
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_download_firmware
</UL>

<P><STRONG><a name="[5a8]"></a>wiced_write_wifi_nvram_image</STRONG> (Thumb, 214 bytes, Stack size 88 bytes, wwd_firmware.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = wiced_write_wifi_nvram_image &rArr; write_image &rArr; wiced_set_backplane_window &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_image
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_transfer_bytes
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_set_backplane_window
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_download_firmware
</UL>

<P><STRONG><a name="[5d3]"></a>wps_kdf</STRONG> (Thumb, 118 bytes, Stack size 136 bytes, wps_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = wps_kdf &rArr; hmac_sha256 &rArr; SHA256_Update &rArr; sha256_block_data_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_hton32
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
</UL>

<P><STRONG><a name="[5bd]"></a>wps_encrypt_data</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, wps_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wps_encrypt_data &rArr; aes_cbc_encrypt_pad &rArr; AesSetKey &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt_pad
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_random_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m5
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m7
</UL>

<P><STRONG><a name="[5cc]"></a>wps_decrypt_data</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, wps_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = wps_decrypt_data &rArr; aes_cbc_decrypt_pad &rArr; AesSetKey &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_decrypt_pad
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
</UL>

<P><STRONG><a name="[5bc]"></a>hmac_sha256</STRONG> (Thumb, 210 bytes, Stack size 336 bytes, hmac_sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = hmac_sha256 &rArr; SHA256_Update &rArr; sha256_block_data_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_n
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_kdf
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m5
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m7
</UL>

<P><STRONG><a name="[621]"></a>hmac_sha256_n</STRONG> (Thumb, 120 bytes, Stack size 224 bytes, hmac_sha256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[622]"></a>sha256</STRONG> (Thumb, 40 bytes, Stack size 136 bytes, hmac_sha256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
</UL>

<P><STRONG><a name="[5c0]"></a>progressive_hmac_init</STRONG> (Thumb, 74 bytes, Stack size 80 bytes, progressive_hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = progressive_hmac_init &rArr; SHA256_Update &rArr; sha256_block_data_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wps_message
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m5
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m7
</UL>

<P><STRONG><a name="[5be]"></a>progressive_hmac_append</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, progressive_hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = progressive_hmac_append &rArr; SHA256_Update &rArr; sha256_block_data_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wps_message
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m5
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m7
</UL>

<P><STRONG><a name="[5bf]"></a>progressive_hmac_finalize</STRONG> (Thumb, 118 bytes, Stack size 88 bytes, progressive_hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = progressive_hmac_finalize &rArr; SHA256_Update &rArr; sha256_block_data_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wps_message
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m5
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m7
</UL>

<P><STRONG><a name="[627]"></a>SHA224_Init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sha256.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224
</UL>

<P><STRONG><a name="[61e]"></a>SHA256_Init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_init
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_finalize
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256
</UL>

<P><STRONG><a name="[623]"></a>sha256_block_host_order</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sha256_block_host_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_block
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
</UL>

<P><STRONG><a name="[620]"></a>SHA256_Final</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SHA256_Final &rArr; sha256_block_host_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_block_host_order
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_finalize
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256
</UL>

<P><STRONG><a name="[625]"></a>sha256_block_data_order</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sha256_block_data_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_block
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Transform
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
</UL>

<P><STRONG><a name="[61f]"></a>SHA256_Update</STRONG> (Thumb, 704 bytes, Stack size 56 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SHA256_Update &rArr; sha256_block_data_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_block_data_order
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_block_host_order
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_init
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_finalize
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_append
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256
</UL>

<P><STRONG><a name="[626]"></a>SHA224</STRONG> (Thumb, 44 bytes, Stack size 128 bytes, sha256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA224_Init
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
</UL>

<P><STRONG><a name="[5d2]"></a>SHA256</STRONG> (Thumb, 44 bytes, Stack size 128 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SHA256 &rArr; SHA256_Update &rArr; sha256_block_data_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Update
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Init
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
</UL>

<P><STRONG><a name="[628]"></a>SHA256_Transform</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sha256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_block_data_order
</UL>

<P><STRONG><a name="[5c5]"></a>crypto_mod_exp</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, crypto_internal-modexp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3480<LI>Call Chain = crypto_mod_exp &rArr; bignum_exptmod &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_set_unsigned_bin
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_init
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_get_unsigned_bin
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_exptmod
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
</UL>

<P><STRONG><a name="[619]"></a>InitSha256</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cyssl_sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Final
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHmac
</UL>

<P><STRONG><a name="[61a]"></a>Sha256Update</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cyssl_sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Sha256Update &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLength
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseBytes
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacKeyInnerHash
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacUpdate
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacSetKey
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacFinal
</UL>

<P><STRONG><a name="[61b]"></a>Sha256Final</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, cyssl_sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Sha256Final &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddLength
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseBytes
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSha256
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacSetKey
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacFinal
</UL>

<P><STRONG><a name="[629]"></a>bignum_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bignum_init &rArr; cyssl_mp_init &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>

<P><STRONG><a name="[62d]"></a>bignum_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bignum_deinit &rArr; cyssl_mp_clear &rArr; crypto_mem_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>

<P><STRONG><a name="[638]"></a>bignum_get_unsigned_bin_len</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_unsigned_bin_size
</UL>

<P><STRONG><a name="[62c]"></a>bignum_get_unsigned_bin</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2616<LI>Call Chain = bignum_get_unsigned_bin &rArr; cyssl_mp_to_unsigned_bin &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_unsigned_bin_size
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_to_unsigned_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>

<P><STRONG><a name="[62a]"></a>bignum_set_unsigned_bin</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2536<LI>Call Chain = bignum_set_unsigned_bin &rArr; cyssl_mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_read_unsigned_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>

<P><STRONG><a name="[639]"></a>bignum_cmp</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_cmp
</UL>

<P><STRONG><a name="[63a]"></a>bignum_cmp_d</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_cmp_d
</UL>

<P><STRONG><a name="[63b]"></a>bignum_add</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_add
</UL>

<P><STRONG><a name="[63c]"></a>bignum_sub</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_sub
</UL>

<P><STRONG><a name="[63d]"></a>bignum_mul</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mul
</UL>

<P><STRONG><a name="[63e]"></a>bignum_mulmod</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, bignum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mulmod
</UL>

<P><STRONG><a name="[62b]"></a>bignum_exptmod</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3440<LI>Call Chain = bignum_exptmod &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_exptmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>

<P><STRONG><a name="[63f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_xsys_deepMaster
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a4]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aton2
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[30a]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_config
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_inet_atoeth
</UL>

<P><STRONG><a name="[1c9]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_up
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_up
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcr_initdcr
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_rand
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateSeed
</UL>

<P><STRONG><a name="[1c8]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_up
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_up
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcr_initdcr
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_srand
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenerateSeed
</UL>

<P><STRONG><a name="[6fe]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNetLink
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reboot
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_results_handler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_ap_list
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pkt_buf2xmem
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pkt_buf2root
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_wifi_version
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_pmk
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_connect_with_apinfo
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_add_packet_filter
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_network_process_raw_packet
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Final
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveKeys
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesCbcEncrypt
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesCbcDecrypt
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendWrapper
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillData
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOldClientHello
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerHello
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificate
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoFinished
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoApplicationData
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAlert
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmac
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHello
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_unregister_multicast_address
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_register_multicast_address
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmem2root
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmem2xmem
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRead
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_read
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_enc_data
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_sdio_transfer
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_start_ap
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_scan
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join_specific
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_ap_info
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_n
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Final
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getpeername
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_kdf
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_write_value
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_read_value
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_init
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_finalize
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_append
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wps_message
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_identity
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_wifi_nvram_image
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_decrypt_pad
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt_pad
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSignature
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlgoID
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDigest
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSignature
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDate
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreKey
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaUnPad
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesSetKey
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreKeys
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacSetKey
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_hash
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRF
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_packet
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_simple_option
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_option_string
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_lease
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;root2xmem
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_append_fragment
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_store_credential
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_store_ap
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_thread_msg_enqueue
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cooee_success
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_rand
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_associated_client_list
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_keep_alive
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_add_keep_alive
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_packet_filter_list
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_manage_custom_ie
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_acparams_sta
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_prepare_join
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_result_handler
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RptConfigmodeRslt
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_scan
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_reboot
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_scan
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_ap_list_adv
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_scan
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_adv_scan
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveTlsKeys
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveKeys
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOldClientHello
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerHello
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFinished
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMD5
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildSHA
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSession
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSession
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_delete
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_wifi_nvram_image
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTlsMasterSecret
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_counters
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_send_action_frame
</UL>

<P><STRONG><a name="[526]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
</UL>

<P><STRONG><a name="[2c7]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_hwa
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_request
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_scan
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPad
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[6ff]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[700]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNetPara
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_results_handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_wifi_on
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecrypt
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GenerateBlock
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Final
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_write
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pendingpkt
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_Reply
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_ping_iface
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_igmp_sendreport
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_line
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_set_event_handler
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Final
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_finalize
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_register_value
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaSSL_Verify
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacSetKey
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_header
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_prepare_join
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_result_handler
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_sdpcm_common
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_frame
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softAPModeStart
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_ExecuteCommand
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_handler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lchecksum
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_make_ip
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_reply_ip
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pbc_start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_connect_with_apinfo
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_start
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_start
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_start
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcr_initdcr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_up
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_init
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_invalid_data
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_get_table
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_channle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ssid_key_start
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ssid_key_end
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_success
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOldClientHello
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSSL
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_extopen
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sock_init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arpcache_delete
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_request
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_create_iface
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_FD_ZERO
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_read
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_stop_scan
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_scan
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join_specific
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_init
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_finalize
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lease
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_getopts
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_end
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_store_credential
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;besl_wps_enrollee
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_thread
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_channle
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cooee_success
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_keep_alive
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_acparams_sta
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_prepare_join
</UL>

<P><STRONG><a name="[701]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[642]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1a0]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_req
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_printflags
</UL>

<P><STRONG><a name="[418]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherList
</UL>

<P><STRONG><a name="[1ce]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_ap_list
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_ap_list_adv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_connect_with_apinfo
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_success
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetErrorString
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherList
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CyaSSL_check_domain_name
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_config
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_request
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_end
</UL>

<P><STRONG><a name="[1a1]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rip
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_request
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_arp_add_gateway
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_getopts
</UL>

<P><STRONG><a name="[b9]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_scan
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_connect_with_apinfo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2hex
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_invalid_data
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherList
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CyaSSL_check_domain_name
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PemToDer
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_puts
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_request
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_req
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dns_pack_name
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_start_ap
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_printf
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostname
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdomainname
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_kdf
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_wps_probe_ie
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sethostname
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
</UL>

<P><STRONG><a name="[2ed]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolve
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_config
</UL>

<P><STRONG><a name="[2eb]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_gets
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_handler
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_getopts
</UL>

<P><STRONG><a name="[1bb]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_recv
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_otp
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_process_packet
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_network_process_raw_packet
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerHello
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoFinished
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoApplicationData
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoAlert
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCert
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSession
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_unregister_multicast_address
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_register_multicast_address
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_lease_by_chaddr
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmemcmp
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethip
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wps_message
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_scan_result_handler
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lease
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_store_ap
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlu_is_wpa_ie
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_process_sdpcm
</UL>

<P><STRONG><a name="[15d]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softAPModeStart
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetCallback
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_scan
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getversion
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComponentNFC
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_req
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostname
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdomainname
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sethostname
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_getopts
</UL>

<P><STRONG><a name="[1cb]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_ap_to_join
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTlsFinished
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificate
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherList
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssid_get
</UL>

<P><STRONG><a name="[420]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_calloc
</UL>

<P><STRONG><a name="[1a5]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aton2
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[30e]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_config
</UL>

<P><STRONG><a name="[645]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetChannelVolt
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[648]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[649]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[4bb]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gGetXDelay
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetChannelVolt
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>

<P><STRONG><a name="[4bc]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gGetXLogicLevel
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gGetXDelay
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetChannelVolt
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>

<P><STRONG><a name="[64a]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gGetXDelay
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetChannelVolt
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_setTrivolt
</UL>

<P><STRONG><a name="[4ba]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>

<P><STRONG><a name="[64b]"></a>__aeabi_ul2f</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ffltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gGetXLogicLevel
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gGetXDelay
</UL>

<P><STRONG><a name="[3e0]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer
</UL>

<P><STRONG><a name="[694]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_setTrivolt
</UL>

<P><STRONG><a name="[4bd]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>

<P><STRONG><a name="[668]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AdjMasterPosition
</UL>

<P><STRONG><a name="[4b7]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>

<P><STRONG><a name="[641]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[702]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[640]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[703]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[643]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[704]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[647]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[646]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[64e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[64c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[98]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[705]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[64d]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[706]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[707]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[650]"></a>ADCLED_GPIO_config</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32_gpio_config.o(i.ADCLED_GPIO_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADCLED_GPIO_config &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4ae]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_Cmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_adc_init
</UL>

<P><STRONG><a name="[4ad]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_CommonInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_adc_init
</UL>

<P><STRONG><a name="[4ac]"></a>ADC_CommonStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_CommonStructInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_adc_init
</UL>

<P><STRONG><a name="[4b3]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_GetConversionValue), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_adc_take_sample
</UL>

<P><STRONG><a name="[4b2]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_GetFlagStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_adc_take_sample
</UL>

<P><STRONG><a name="[4ab]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f2xx_adc.o(i.ADC_Init), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_adc_init
</UL>

<P><STRONG><a name="[4af]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f2xx_adc.o(i.ADC_RegularChannelConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_adc_init
</UL>

<P><STRONG><a name="[4b1]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_SoftwareStartConv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_adc_take_sample
</UL>

<P><STRONG><a name="[4aa]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(i.ADC_StructInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_adc_init
</UL>

<P><STRONG><a name="[16e]"></a>ApListCallback</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wificallback.o(i.ApListCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ApListCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_report
</UL>

<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[651]"></a>Button_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, platform.o(i.Button_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Button_Init &rArr; gpio_irq_enable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[652]"></a>Control_GPIO_config</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32_gpio_config.o(i.Control_GPIO_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Control_GPIO_config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[653]"></a>DATA_GPIO_config</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32_gpio_config.o(i.DATA_GPIO_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DATA_GPIO_config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainnetcmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbundledata
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Receive
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendhccommand
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_ExecuteCommand
</UL>

<P><STRONG><a name="[55]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; uart_dma_irq &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; dma_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[17d]"></a>DMA_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f2xx_dma.o(i.DMA_ClearFlag), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
</UL>

<P><STRONG><a name="[194]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f2xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_irq
</UL>

<P><STRONG><a name="[17e]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(i.DMA_Cmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_transfer
</UL>

<P><STRONG><a name="[17f]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f2xx_dma.o(i.DMA_DeInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_config
</UL>

<P><STRONG><a name="[188]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_dma.o(i.DMA_GetCurrDataCounter), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_recv
</UL>

<P><STRONG><a name="[49b]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f2xx_dma.o(i.DMA_GetFlagStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_transfer
</UL>

<P><STRONG><a name="[192]"></a>DMA_GetITStatus</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f2xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dma_irq
</UL>

<P><STRONG><a name="[185]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f2xx_dma.o(i.DMA_ITConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[180]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f2xx_dma.o(i.DMA_Init), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_config
</UL>

<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_IRQHandler &rArr; gpio_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI15_10_IRQHandler &rArr; gpio_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI3_IRQHandler &rArr; gpio_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI9_5_IRQHandler &rArr; gpio_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4cd]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_exti.o(i.EXTI_ClearITPendingBit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_irq
</UL>

<P><STRONG><a name="[201]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f2xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_disable
</UL>

<P><STRONG><a name="[230]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_flash.o(i.FLASH_ClearFlag), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_otp
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[504]"></a>FLASH_EraseSector</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f2xx_flash.o(i.FLASH_EraseSector), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newimage_erase
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
</UL>

<P><STRONG><a name="[656]"></a>FLASH_GetStatus</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32f2xx_flash.o(i.FLASH_GetStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[232]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_flash.o(i.FLASH_Lock), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_otp
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_UnInit
</UL>

<P><STRONG><a name="[491]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clocks
</UL>

<P><STRONG><a name="[231]"></a>FLASH_ProgramByte</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f2xx_flash.o(i.FLASH_ProgramByte), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_otp
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
</UL>

<P><STRONG><a name="[490]"></a>FLASH_SetLatency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clocks
</UL>

<P><STRONG><a name="[22f]"></a>FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_flash.o(i.FLASH_Unlock), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_otp
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>

<P><STRONG><a name="[655]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_flash.o(i.FLASH_WaitForLastOperation), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
</UL>

<P><STRONG><a name="[9c]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_init
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_GPIO_config
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_GPIO_config
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCLED_GPIO_config
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda_output
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda_input
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gpio_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6_gpio_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_enable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_status_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_enable_oob_interrupt
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wlan_powersave_clock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_adc_init
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_init
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_deinit
</UL>

<P><STRONG><a name="[17a]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCLED_GPIO_config
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gpio_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6_gpio_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wlan_powersave_clock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_init
</UL>

<P><STRONG><a name="[675]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_ReadInputData))
<BR><BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_fifo
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Receive
</UL>

<P><STRONG><a name="[4b4]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_input_get
</UL>

<P><STRONG><a name="[43b]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_output_low
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_power_wifi
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_reset_wifi
</UL>

<P><STRONG><a name="[43c]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_output_high
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_power_wifi
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_reset_wifi
</UL>

<P><STRONG><a name="[a2]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_ToggleBits))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_tick
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;green_led_toggle
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;red_led_toggle
</UL>

<P><STRONG><a name="[9e]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_irq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_led_control
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_led_enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_conncetion_status
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>

<P><STRONG><a name="[692]"></a>HC_SetBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_fpga_command.o(i.HC_SetBit))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hc4094ctrl
</UL>

<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HardFault_Handler &rArr; asm_dump &rArr; hard_fault_handler_c &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asm_dump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[242]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(i.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_ReadBuffer
</UL>

<P><STRONG><a name="[243]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f2xx_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_ReadBuffer
</UL>

<P><STRONG><a name="[248]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_TAG_INIT
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_GetSsidPassword
</UL>

<P><STRONG><a name="[23f]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_PageWrite
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_ReadBuffer
</UL>

<P><STRONG><a name="[245]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_PageWrite
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_ReadBuffer
</UL>

<P><STRONG><a name="[249]"></a>I2C_Init</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32f2xx_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_TAG_INIT
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_GetSsidPassword
</UL>

<P><STRONG><a name="[23d]"></a>I2C_Read_Flag_Status</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(i.I2C_Read_Flag_Status))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_PageWrite
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_ReadBuffer
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_For_OPT_Finish
</UL>

<P><STRONG><a name="[244]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_ReadBuffer
</UL>

<P><STRONG><a name="[240]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_PageWrite
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_ReadBuffer
</UL>

<P><STRONG><a name="[241]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_PageWrite
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfcEE_ReadBuffer
</UL>

<P><STRONG><a name="[657]"></a>InetConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wificallback.o(i.InetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InetConfig &rArr; lib_config &rArr; tcp_buffer_config
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lib_config
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[17c]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uart_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_deinit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_disable
</UL>

<P><STRONG><a name="[498]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_architecture
</UL>

<P><STRONG><a name="[65c]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[131]"></a>NetCallback</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, wificallback.o(i.NetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NetCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_up
</UL>

<P><STRONG><a name="[4ce]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_pwr.o(i.PWR_ClearFlag), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_irq
</UL>

<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeConfig
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gpio_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6_gpio_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_enable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_status_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_enable_oob_interrupt
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wlan_powersave_clock
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_adc_init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.constdata)
</UL>
<P><STRONG><a name="[4d6]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_AHB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_rand
</UL>

<P><STRONG><a name="[658]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_AHB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_DeInit
</UL>

<P><STRONG><a name="[95]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.constdata)
</UL>
<P><STRONG><a name="[23b]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
</UL>

<P><STRONG><a name="[93]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_gpio_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart6_gpio_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_deinit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_init
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_adc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(.constdata)
</UL>
<P><STRONG><a name="[659]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[104]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipInit
</UL>

<P><STRONG><a name="[4b8]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f2xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>

<P><STRONG><a name="[494]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f2xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clocks
</UL>

<P><STRONG><a name="[496]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clocks
</UL>

<P><STRONG><a name="[48d]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clocks
</UL>

<P><STRONG><a name="[48b]"></a>RCC_HSEConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clocks
</UL>

<P><STRONG><a name="[597]"></a>RCC_MCO1Config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_MCO1Config))
<BR><BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_wlan_powersave_clock
</UL>

<P><STRONG><a name="[48f]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clocks
</UL>

<P><STRONG><a name="[48e]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clocks
</UL>

<P><STRONG><a name="[493]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clocks
</UL>

<P><STRONG><a name="[492]"></a>RCC_PLLConfig</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f2xx_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_PLLConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clocks
</UL>

<P><STRONG><a name="[495]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clocks
</UL>

<P><STRONG><a name="[48c]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f2xx_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clocks
</UL>

<P><STRONG><a name="[4d7]"></a>RNG_Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_rng.o(i.RNG_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_rand
</UL>

<P><STRONG><a name="[4d5]"></a>RNG_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f2xx_rng.o(i.RNG_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RNG_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_rand
</UL>

<P><STRONG><a name="[4d8]"></a>RNG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rng.o(i.RNG_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_rand
</UL>

<P><STRONG><a name="[4d9]"></a>RNG_GetRandomNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rng.o(i.RNG_GetRandomNumber))
<BR><BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_rand
</UL>

<P><STRONG><a name="[4cf]"></a>RTC_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(i.RTC_ClearFlag), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_irq
</UL>

<P><STRONG><a name="[4d3]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(i.RTC_ClearITPendingBit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_irq
</UL>

<P><STRONG><a name="[4d0]"></a>RTC_ITConfig</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(i.RTC_ITConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_irq
</UL>

<P><STRONG><a name="[4d2]"></a>RTC_SetWakeUpCounter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rtc.o(i.RTC_SetWakeUpCounter), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_irq
</UL>

<P><STRONG><a name="[4d1]"></a>RTC_WakeUpCmd</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32f2xx_rtc.o(i.RTC_WakeUpCmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_irq
</UL>

<P><STRONG><a name="[24c]"></a>RptConfigmodeRslt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wificallback.o(i.RptConfigmodeRslt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RptConfigmodeRslt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_config_stop
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_success
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_fail
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nfc_read
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_end
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cooee_success
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cooee_fail
</UL>

<P><STRONG><a name="[20e]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_enable_high_speed_sdio
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_deinit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_init
</UL>

<P><STRONG><a name="[20a]"></a>SDIO_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f2xx_sdio.o(i.SDIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_enable_high_speed_sdio
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_deinit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_init
</UL>

<P><STRONG><a name="[4c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_IRQHandler &rArr; sdio_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[20b]"></a>SDIO_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_enable_high_speed_sdio
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_init
</UL>

<P><STRONG><a name="[20c]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_enable_high_speed_sdio
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_deinit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_init
</UL>

<P><STRONG><a name="[20d]"></a>SDIO_SetSDIOReadWaitMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(i.SDIO_SetSDIOReadWaitMode))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_init
</UL>

<P><STRONG><a name="[4a1]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(i.SPI_CalculateCRC), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_init
</UL>

<P><STRONG><a name="[4a3]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_spi.o(i.SPI_Cmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_init
</UL>

<P><STRONG><a name="[49d]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_spi.o(i.SPI_I2S_DMACmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_dma_config
</UL>

<P><STRONG><a name="[4a6]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_spi.o(i.SPI_I2S_GetFlagStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_transfer
</UL>

<P><STRONG><a name="[4a8]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_spi.o(i.SPI_I2S_ReceiveData), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_transfer
</UL>

<P><STRONG><a name="[4a7]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_spi.o(i.SPI_I2S_SendData), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_transfer
</UL>

<P><STRONG><a name="[4a2]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f2xx_spi.o(i.SPI_Init), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_init
</UL>

<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1ff]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f2xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
</UL>

<P><STRONG><a name="[497]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_clocks
</UL>

<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Handler &rArr; systick_irq &rArr; green_led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_irq
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoOS_systick_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f2xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[696]"></a>TCtrl_CreateDefTriggerSys</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tcontrol.o(i.TCtrl_CreateDefTriggerSys))
<BR><BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSystem
</UL>

<P><STRONG><a name="[4c7]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_Cmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_stop
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_start
</UL>

<P><STRONG><a name="[4c8]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_CtrlPWMOutputs), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_stop
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_start
</UL>

<P><STRONG><a name="[4be]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f2xx_tim.o(i.TIM_OC1Init), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>

<P><STRONG><a name="[4bf]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_OC1PreloadConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>

<P><STRONG><a name="[4c0]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f2xx_tim.o(i.TIM_OC2Init), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>

<P><STRONG><a name="[4c1]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_OC2PreloadConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>

<P><STRONG><a name="[4c2]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f2xx_tim.o(i.TIM_OC3Init), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>

<P><STRONG><a name="[4c3]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_OC3PreloadConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>

<P><STRONG><a name="[4c4]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f2xx_tim.o(i.TIM_OC4Init), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>

<P><STRONG><a name="[4c5]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_OC4PreloadConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>

<P><STRONG><a name="[4b9]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f2xx_tim.o(i.TIM_TimeBaseInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_pwm_init
</UL>

<P><STRONG><a name="[65d]"></a>TimeConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32_gpio_config.o(i.TimeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>USART6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.USART6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[186]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uart_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_uart_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[184]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_DMACmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[183]"></a>USART_DeInit</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32f2xx_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uart_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_uart_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[18c]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_rx_buffer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_data
</UL>

<P><STRONG><a name="[19a]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f2xx_usart.o(i.USART_GetITStatus), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uart_irq
</UL>

<P><STRONG><a name="[198]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f2xx_usart.o(i.USART_ITConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uart_irq
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uart_init
</UL>

<P><STRONG><a name="[182]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f2xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uart_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_reconfig
</UL>

<P><STRONG><a name="[190]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uart_irq
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_rx_buffer
</UL>

<P><STRONG><a name="[18d]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>

<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[13a]"></a>WifiStatusHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, wificallback.o(i.WifiStatusHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = WifiStatusHandler &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNetPara
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_status_callback
</UL>

<P><STRONG><a name="[65f]"></a>XCtrl_CreateDefDepth</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xcontrol.o(i.XCtrl_CreateDefDepth))
<BR><BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCtrl_CreateDefXSys
</UL>

<P><STRONG><a name="[660]"></a>XCtrl_CreateDefPhyXSys</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, xcontrol.o(i.XCtrl_CreateDefPhyXSys))
<BR><BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCtrl_CreateDefXSys
</UL>

<P><STRONG><a name="[65e]"></a>XCtrl_CreateDefXSys</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, xcontrol.o(i.XCtrl_CreateDefXSys))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = XCtrl_CreateDefXSys
</UL>
<BR>[Calls]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCtrl_CreateDefZoomSys
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCtrl_CreateDefPhyXSys
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCtrl_CreateDefDepth
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSystem
</UL>

<P><STRONG><a name="[661]"></a>XCtrl_CreateDefZoomSys</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, xcontrol.o(i.XCtrl_CreateDefZoomSys))
<BR><BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCtrl_CreateDefXSys
</UL>

<P><STRONG><a name="[662]"></a>YCtrl_CreateDefYSys</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ycontrol.o(i.YCtrl_CreateDefYSys))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = YCtrl_CreateDefYSys &rArr; hw_PushCommand &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_PushCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSystem
</UL>

<P><STRONG><a name="[664]"></a>YCtrl_SetYSensitivity</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ycontrol.o(i.YCtrl_SetYSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = YCtrl_SetYSensitivity &rArr; hw_PushCommand &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IsSensitivityValid
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_PushCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[666]"></a>_AdjMasterPosition</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xcontrol.o(i._AdjMasterPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _AdjMasterPosition &rArr; hw_PushCommand &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gGetXDelay
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_PushCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AdjMasterXPosition
</UL>

<P><STRONG><a name="[669]"></a>_AdjMasterSensitivity</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xcontrol.o(i._AdjMasterSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _AdjMasterSensitivity &rArr; hw_PushCommand &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_PushCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AdjMasterXSensitivity
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[10]"></a>_AdjMasterXPosition</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, xcontrol.o(i._AdjMasterXPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _AdjMasterXPosition &rArr; _AdjMasterPosition &rArr; hw_PushCommand &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AdjMasterPosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xcontrol.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>_AdjMasterXSensitivity</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, xcontrol.o(i._AdjMasterXSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _AdjMasterXSensitivity &rArr; _AdjMasterSensitivity &rArr; hw_PushCommand &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AdjMasterSensitivity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xcontrol.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>_Button_irq_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, platform.o(i._Button_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _Button_irq_handler &rArr; ap_set_function &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_set_function
</UL>
<BR>[Address Reference Count : 1]<UL><LI> platform.o(i.Button_Init)
</UL>
<P><STRONG><a name="[c]"></a>_GetChannelVolt</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ycontrol.o(i._GetChannelVolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _GetChannelVolt &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ycontrol.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>_GetMasterDepth</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xcontrol.o(i._GetMasterDepth))
<BR>[Address Reference Count : 1]<UL><LI> xcontrol.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>_GetMasterTimePerDiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, xcontrol.o(i._GetMasterTimePerDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _GetMasterTimePerDiv &rArr; gGetXLogicLevel &rArr; __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gGetXLogicLevel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xcontrol.o(.data)
</UL>
<P><STRONG><a name="[665]"></a>_IsSensitivityValid</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ycontrol.o(i._IsSensitivityValid))
<BR><BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YCtrl_SetYSensitivity
</UL>

<P><STRONG><a name="[66c]"></a>__0fprintf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[708]"></a>__1fprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)

<P><STRONG><a name="[3aa]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_MSG
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_print_errors_fp
</UL>

<P><STRONG><a name="[66e]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[709]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[ba]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stationModeStart
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softAPModeStart
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainnetcmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkdevice2cell
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_set_function
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink_user_data_result
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiStatusHandler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RptConfigmodeRslt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetCallback
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApListCallback
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_PushCommand
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_print_ifs
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_printall
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_print
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_printall
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpcache_print
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servlist_print
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_perror
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ac_params
</UL>

<P><STRONG><a name="[66f]"></a>__0snprintf$8</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[70a]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[178]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_version
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_connected
</UL>

<P><STRONG><a name="[670]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[70b]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[b6]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNetPara
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_results_handler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ethtoa
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComponentWIFI
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_up
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUartNum
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_baseinfo
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_LEAVE
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ERROR
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ENTER
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_connect
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printpend
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printsock
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;router_print
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssid_get
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bcast_test
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_wifi_nvram_image
</UL>

<P><STRONG><a name="[644]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[70c]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1d4]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainnetcmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_finished
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ap_list
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_finished_adv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_restart
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_cleanup
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_wifi_nvram_image
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_free_unfragmented_packet
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_append_fragment
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_thread_msg_dequeue
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_delete_packet_filter_list
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[1ad]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackinit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_results_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_result_list
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_result_list_adv
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkt_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpd_start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_wifi_nvram_image
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_append_fragment
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_init_unfragmented_packet
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_thread_msg_enqueue
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_packet_filter_list
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[70d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[70e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[70f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[66a]"></a>ap_set_function</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.ap_set_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ap_set_function &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Button_irq_handler
</UL>

<P><STRONG><a name="[674]"></a>data_Receive</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, hw_fpga_communicate.o(i.data_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = data_Receive &rArr; DATA_GPIO_config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_GPIO_config
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbundledata
</UL>

<P><STRONG><a name="[677]"></a>data_Send</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, hw_fpga_communicate.o(i.data_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_xsys_deepMaster
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_SmartStart
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpx_InitFifo
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbundledata
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_fifo
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendhccommand
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_setTriholdoff
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_setTriType
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_setTriSource
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_setTriPw
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_setTriMode
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_setTriEdge
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_Setsample_Master
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_SendDAC_Cmd
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_InitDAC
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_InitADC
</UL>

<P><STRONG><a name="[68f]"></a>delay_us</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, commonfunc.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkdevice2cell
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendhccommand
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_Setsample_Master
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_SendDAC_Cmd
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_InitDAC
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_InitADC
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_wdata
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_stop
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_start
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_rdata
</UL>

<P><STRONG><a name="[676]"></a>dpx_InitFifo</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dpx.o(i.dpx_InitFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dpx_InitFifo &rArr; data_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainnetcmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4dd]"></a>easylink_user_data_result</STRONG> (Thumb, 40 bytes, Stack size 112 bytes, wificallback.o(i.easylink_user_data_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNetPara
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cooee_success
</UL>

<P><STRONG><a name="[678]"></a>explainCommand</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, instructionset.o(i.explainCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 2432<LI>Call Chain = explainCommand &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_SmartStart
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_GPIO_config
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTriType
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTriSou
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTriSlope
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTriPw
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTriPol
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTriMode
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTriCoup
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTriCond
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCh2VoltsPerDiv
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCh2Coupling
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCh2BandWidth
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCh1VoltsPerDiv
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCh1Coupling
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCh1BandWidth
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AdjMasterSensitivity
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YCtrl_SetYSensitivity
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_PushCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainnetcmd
</UL>

<P><STRONG><a name="[688]"></a>explainnetcmd</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, unpackfunc.o(i.explainnetcmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 2624<LI>Call Chain = explainnetcmd &rArr; hw_ExecuteCommand &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReset
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpx_InitFifo
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_GPIO_config
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_disconnect
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbundledata
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_ExecuteCommand
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6aa]"></a>fpga_s6_reset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hw_fpga_communicate.o(i.fpga_s6_reset))
<BR><BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_fifo
</UL>

<P><STRONG><a name="[90]"></a>fputc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, platform.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printf8.o(i.__0fprintf$8)
<LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[667]"></a>gGetXDelay</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, xcontrol.o(i.gGetXDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gGetXDelay &rArr; __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AdjMasterPosition
</UL>

<P><STRONG><a name="[66b]"></a>gGetXLogicLevel</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, xcontrol.o(i.gGetXLogicLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gGetXLogicLevel &rArr; __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetMasterTimePerDiv
</UL>

<P><STRONG><a name="[68b]"></a>hw_ExecuteCommand</STRONG> (Thumb, 210 bytes, Stack size 192 bytes, stm32_fpga_command.o(i.hw_ExecuteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600<LI>Call Chain = hw_ExecuteCommand &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_GPIO_config
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_ExpandSysAll
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainnetcmd
</UL>

<P><STRONG><a name="[68d]"></a>hw_ExpandSysAll</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32_fpga_command.o(i.hw_ExpandSysAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hw_ExpandSysAll
</UL>
<BR>[Called By]<UL><LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_ExecuteCommand
</UL>

<P><STRONG><a name="[68e]"></a>hw_InitADC</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32_fpga_command.o(i.hw_InitADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hw_InitADC &rArr; data_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_SmartStart
</UL>

<P><STRONG><a name="[690]"></a>hw_InitDAC</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32_fpga_command.o(i.hw_InitDAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = hw_InitDAC &rArr; hw_SendDAC_Cmd &rArr; data_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_SendDAC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_SmartStart
</UL>

<P><STRONG><a name="[663]"></a>hw_PushCommand</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32_fpga_command.o(i.hw_PushCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hw_PushCommand &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AdjMasterPosition
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AdjMasterSensitivity
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YCtrl_SetYSensitivity
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YCtrl_CreateDefYSys
</UL>

<P><STRONG><a name="[691]"></a>hw_SendDAC_Cmd</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32_fpga_command.o(i.hw_SendDAC_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hw_SendDAC_Cmd &rArr; data_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_Ysys_baseline
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_setTrivolt
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_Ysys_gain
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_InitDAC
</UL>

<P><STRONG><a name="[b]"></a>hw_Setsample_Master</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32_fpga_command.o(i.hw_Setsample_Master))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hw_Setsample_Master &rArr; data_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_fpga_command.o(.data)
</UL>
<P><STRONG><a name="[687]"></a>hw_SmartStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32_fpga_command.o(i.hw_SmartStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hw_SmartStart &rArr; hw_InitDAC &rArr; hw_SendDAC_Cmd &rArr; data_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_InitDAC
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_InitADC
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[1]"></a>hw_Ysys_gain</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stm32_fpga_command.o(i.hw_Ysys_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = hw_Ysys_gain &rArr; hw_SendDAC_Cmd &rArr; data_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_SendDAC_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_fpga_command.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>hw_hc4094ctrl</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, stm32_fpga_command.o(i.hw_hc4094ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hw_hc4094ctrl &rArr; sendhccommand &rArr; DATA_GPIO_config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendhccommand
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC_SetBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_fpga_command.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>hw_setTriEdge</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32_fpga_command.o(i.hw_setTriEdge))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hw_setTriEdge &rArr; data_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_setTriType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_fpga_command.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>hw_setTriMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32_fpga_command.o(i.hw_setTriMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hw_setTriMode &rArr; data_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_fpga_command.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>hw_setTriPw</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32_fpga_command.o(i.hw_setTriPw))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hw_setTriPw &rArr; data_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_setTriType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_fpga_command.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>hw_setTriSource</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32_fpga_command.o(i.hw_setTriSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hw_setTriSource &rArr; data_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_fpga_command.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>hw_setTriType</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32_fpga_command.o(i.hw_setTriType))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hw_setTriType &rArr; hw_setTriPw &rArr; data_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_setTriPw
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_setTriEdge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_fpga_command.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>hw_setTriholdoff</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32_fpga_command.o(i.hw_setTriholdoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hw_setTriholdoff &rArr; data_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_fpga_command.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>hw_setTrivolt</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, stm32_fpga_command.o(i.hw_setTrivolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = hw_setTrivolt &rArr; hw_SendDAC_Cmd &rArr; data_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_SendDAC_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_fpga_command.o(.data)
</UL>
<P><STRONG><a name="[695]"></a>initSystem</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, systemdatastruct.o(i.initSystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = initSystem &rArr; YCtrl_CreateDefYSys &rArr; hw_PushCommand &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YCtrl_CreateDefYSys
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XCtrl_CreateDefXSys
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCtrl_CreateDefTriggerSys
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[697]"></a>linkdevice2cell</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, main.o(i.linkdevice2cell))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520<LI>Call Chain = linkdevice2cell &rArr; stationModeStart &rArr; StartNetwork &rArr; msleep &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stationModeStart
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softAPModeStart
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenEasylink
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>main</STRONG> (Thumb, 452 bytes, Stack size 1336 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 6336<LI>Call Chain = main &rArr; select &rArr; ssl_select &rArr; ProcessReply_tinywait &rArr; DoProcessReply &rArr; DoHandShakeMsg &rArr; DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpackinit
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_init
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_blkwrite
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_blkread
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSystem
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_ntoa
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_SmartStart
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainnetcmd
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpx_InitFifo
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InetConfig
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkdevice2cell
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeConfig
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_GPIO_config
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Control_GPIO_config
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCLED_GPIO_config
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[5de]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(i.putc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psocket
</UL>

<P><STRONG><a name="[5df]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psocket
</UL>

<P><STRONG><a name="[68a]"></a>readbundledata</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, unpackfunc.o(i.readbundledata))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440<LI>Call Chain = readbundledata &rArr; wait_fifo &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_GPIO_config
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_fifo
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainnetcmd
</UL>

<P><STRONG><a name="[422]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_realloc
</UL>

<P><STRONG><a name="[693]"></a>sendhccommand</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32_fpga_command.o(i.sendhccommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sendhccommand &rArr; DATA_GPIO_config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_GPIO_config
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_hc4094ctrl
</UL>

<P><STRONG><a name="[683]"></a>setCh1BandWidth</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ycontrol.o(i.setCh1BandWidth))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[681]"></a>setCh1Coupling</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ycontrol.o(i.setCh1Coupling))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[685]"></a>setCh1VoltsPerDiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ycontrol.o(i.setCh1VoltsPerDiv))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[684]"></a>setCh2BandWidth</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ycontrol.o(i.setCh2BandWidth))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[682]"></a>setCh2Coupling</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ycontrol.o(i.setCh2Coupling))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[686]"></a>setCh2VoltsPerDiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ycontrol.o(i.setCh2VoltsPerDiv))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[67f]"></a>setTriCond</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcontrol.o(i.setTriCond))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[67b]"></a>setTriCoup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcontrol.o(i.setTriCoup))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[679]"></a>setTriMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcontrol.o(i.setTriMode))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[67e]"></a>setTriPol</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcontrol.o(i.setTriPol))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[680]"></a>setTriPw</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcontrol.o(i.setTriPw))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[67d]"></a>setTriSlope</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcontrol.o(i.setTriSlope))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[67a]"></a>setTriSou</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcontrol.o(i.setTriSou))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[67c]"></a>setTriType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcontrol.o(i.setTriType))
<BR><BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainCommand
</UL>

<P><STRONG><a name="[698]"></a>softAPModeStart</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, wificallback.o(i.softAPModeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 2488<LI>Call Chain = softAPModeStart &rArr; StartNetwork &rArr; msleep &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetwork
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkdevice2cell
</UL>

<P><STRONG><a name="[699]"></a>stationModeStart</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wificallback.o(i.stationModeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 2488<LI>Call Chain = stationModeStart &rArr; StartNetwork &rArr; msleep &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetwork
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linkdevice2cell
</UL>

<P><STRONG><a name="[69d]"></a>swi2c_blkread</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, eeromfunc.o(i.swi2c_blkread))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = swi2c_blkread &rArr; swi2c_wdata &rArr; swi2c_sda_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_wdata
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_stop
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_start
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_rdata
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69c]"></a>swi2c_blkwrite</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, eeromfunc.o(i.swi2c_blkwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = swi2c_blkwrite &rArr; swi2c_wdata &rArr; swi2c_sda_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_wdata
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_stop
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69b]"></a>swi2c_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, eeromfunc.o(i.swi2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = swi2c_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a2]"></a>swi2c_rdata</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, eeromfunc.o(i.swi2c_rdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = swi2c_rdata &rArr; swi2c_sda_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda_output
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda_low
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda_input
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda_high
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_scl_low
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_scl_high
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_blkread
</UL>

<P><STRONG><a name="[6a4]"></a>swi2c_scl_high</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eeromfunc.o(i.swi2c_scl_high))
<BR><BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_wdata
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_stop
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_start
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_rdata
</UL>

<P><STRONG><a name="[6a6]"></a>swi2c_scl_low</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eeromfunc.o(i.swi2c_scl_low))
<BR><BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_wdata
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_stop
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_start
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_rdata
</UL>

<P><STRONG><a name="[6a5]"></a>swi2c_sda</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eeromfunc.o(i.swi2c_sda))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swi2c_sda
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_wdata
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_rdata
</UL>

<P><STRONG><a name="[6a9]"></a>swi2c_sda_high</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eeromfunc.o(i.swi2c_sda_high))
<BR><BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_wdata
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_stop
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_start
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_rdata
</UL>

<P><STRONG><a name="[6a3]"></a>swi2c_sda_input</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eeromfunc.o(i.swi2c_sda_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = swi2c_sda_input &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_wdata
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_rdata
</UL>

<P><STRONG><a name="[6a8]"></a>swi2c_sda_low</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eeromfunc.o(i.swi2c_sda_low))
<BR><BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_wdata
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_stop
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_start
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_rdata
</UL>

<P><STRONG><a name="[6a7]"></a>swi2c_sda_output</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eeromfunc.o(i.swi2c_sda_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = swi2c_sda_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_wdata
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_rdata
</UL>

<P><STRONG><a name="[69f]"></a>swi2c_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, eeromfunc.o(i.swi2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swi2c_start
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda_low
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda_high
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_scl_low
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_scl_high
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_blkwrite
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_blkread
</UL>

<P><STRONG><a name="[6a1]"></a>swi2c_stop</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, eeromfunc.o(i.swi2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swi2c_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda_low
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda_high
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_scl_low
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_scl_high
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_blkwrite
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_blkread
</UL>

<P><STRONG><a name="[6a0]"></a>swi2c_wdata</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, eeromfunc.o(i.swi2c_wdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = swi2c_wdata &rArr; swi2c_sda_output &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda_output
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda_low
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda_input
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda_high
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_sda
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_scl_low
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_scl_high
</UL>
<BR>[Called By]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_blkwrite
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_blkread
</UL>

<P><STRONG><a name="[227]"></a>system_version</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wificallback.o(i.system_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = system_version &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
</UL>

<P><STRONG><a name="[68c]"></a>unpack</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, unpackfunc.o(i.unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;explainnetcmd
</UL>

<P><STRONG><a name="[69a]"></a>unpackinit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, unpackfunc.o(i.unpackinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = unpackinit &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69e]"></a>wait_fifo</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hw_fpga_communicate.o(i.wait_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 2424<LI>Call Chain = wait_fifo &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mxchipTick
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpga_s6_reset
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readbundledata
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[65b]"></a>SetSysClock</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, system_stm32f2xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[0]"></a>hw_Ysys_baseline</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stm32_fpga_command.o(i.hw_Ysys_baseline))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = hw_Ysys_baseline &rArr; hw_SendDAC_Cmd &rArr; data_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_SendDAC_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_fpga_command.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>hw_xsys_deepMaster</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, stm32_fpga_command.o(i.hw_xsys_deepMaster))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hw_xsys_deepMaster &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_Send
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_fpga_command.o(.data)
</UL>
<P><STRONG><a name="[c1]"></a>fd_in_use</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, file.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_empty_fd
</UL>

<P><STRONG><a name="[c4]"></a>free_fd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = free_fd &rArr; crypto_mem_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_clean
</UL>

<P><STRONG><a name="[151]"></a>get_baseinfo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getversion
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComponentNFC
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComponentWIFI
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckComponentBT
</UL>

<P><STRONG><a name="[164]"></a>is_free_block</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_list_mem
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_malloc_list
</UL>

<P><STRONG><a name="[17b]"></a>DMA_RxConfiguration</STRONG> (Thumb, 134 bytes, Stack size 80 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[196]"></a>uart6_gpio_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_uart_init
</UL>

<P><STRONG><a name="[1d6]"></a>rssi_2_quility</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wifimgr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_results_handler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_ap_list
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_ap_list_adv
</UL>

<P><STRONG><a name="[72]"></a>enable_ps</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928<LI>Call Chain = enable_ps &rArr; wiced_wifi_enable_powersave_with_throughput &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_powersave_with_throughput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifimgr.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>wifi_up_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = wifi_up_cb &rArr; wifi_status_callback &rArr; WifiStatusHandler &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifimgr.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>wifi_down_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = wifi_down_cb &rArr; wifi_status_callback &rArr; WifiStatusHandler &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifimgr.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>uap_up_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = uap_up_cb &rArr; wifi_status_callback &rArr; WifiStatusHandler &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifimgr.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>uap_down_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = uap_down_cb &rArr; wifi_status_callback &rArr; WifiStatusHandler &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_status_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifimgr.o(.text)
</UL>
<P><STRONG><a name="[1c5]"></a>set_sta_connection</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = set_sta_connection &rArr; ifdown &rArr;  ifctl_tick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifdown
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ps_enabled
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer_uniq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_conncetion_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_down
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_link_up
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_up
</UL>

<P><STRONG><a name="[1c7]"></a>set_uap_connection</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = set_uap_connection &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifup
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifdown
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer_uniq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_conncetion_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_down
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_up
</UL>

<P><STRONG><a name="[1e0]"></a>insert_result_by_rssi</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = insert_result_by_rssi
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_results_handler
</UL>

<P><STRONG><a name="[79]"></a>select_ap_to_join</STRONG> (Thumb, 746 bytes, Stack size 128 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184<LI>Call Chain = select_ap_to_join &rArr; wiced_wifi_join &rArr; wiced_wifi_prepare_join &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sectype_bcm2mx
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connected_ap_info
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_fail
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_get_pmk
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_up
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifup
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sta_dhcp_mode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2hex
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join_specific
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifimgr.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>scan_finished_adv</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = scan_finished_adv &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApListadv_Callback
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifimgr.o(.text)
</UL>
<P><STRONG><a name="[1d5]"></a>append_ap_list_adv</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = append_ap_list_adv &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sectype_bcm2mx
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rssi_2_quility
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_result_list_adv
</UL>

<P><STRONG><a name="[1d7]"></a>get_scan_result_list_adv</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_scan_result_list_adv &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_ap_list_adv
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_results_handler
</UL>

<P><STRONG><a name="[1d8]"></a>free_ap_list</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = free_ap_list &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_scan
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_scan
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_scan
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_adv_scan
</UL>

<P><STRONG><a name="[76]"></a>haier_loop_scan</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192<LI>Call Chain = haier_loop_scan &rArr; user_scan &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifimgr.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>scan_finished</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = scan_finished &rArr; SetTimer_uniq &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_report
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer_uniq
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifimgr.o(.text)
</UL>
<P><STRONG><a name="[1dc]"></a>append_ap_list</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = append_ap_list &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rssi_2_quility
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_result_list
</UL>

<P><STRONG><a name="[1dd]"></a>get_scan_result_list</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_scan_result_list &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;append_ap_list
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_results_handler
</UL>

<P><STRONG><a name="[75]"></a>scan_results_handler</STRONG> (Thumb, 332 bytes, Stack size 128 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = scan_results_handler &rArr; SetTimer_uniq &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_result_list
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_result_list_adv
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_result_by_rssi
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rssi_2_quility
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer_uniq
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_scan_finished
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_printf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifimgr.o(.text)
</UL>
<P><STRONG><a name="[1da]"></a>join_scan</STRONG> (Thumb, 224 bytes, Stack size 120 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ap_list
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_scan
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_retry_tick
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_scan
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_adv_scan
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_connect_with_apinfo
</UL>

<P><STRONG><a name="[1e1]"></a>sta_retry_tick</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2112<LI>Call Chain = sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;join_scan
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifdown
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_leave
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_tick
</UL>

<P><STRONG><a name="[1e3]"></a>sta_link_up</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = sta_link_up &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_connection
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ifup
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_sta_dhcp_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_link_events_handler
</UL>

<P><STRONG><a name="[1e5]"></a>uap_up</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = uap_up &rArr; set_uap_connection &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uap_connection
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_ports
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_connect
</UL>

<P><STRONG><a name="[1e6]"></a>uap_down</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = uap_down &rArr; set_uap_connection &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uap_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uap_stop
</UL>

<P><STRONG><a name="[7a]"></a>sta_link_events_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wifimgr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = sta_link_events_handler &rArr; sta_link_up &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_down
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_link_up
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReallocIP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifimgr.o(.text)
</UL>
<P><STRONG><a name="[200]"></a>convert_port_to_port_number</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, gpio_irq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_irq_enable
</UL>

<P><STRONG><a name="[7b]"></a>sdio_oob_irq_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wwd_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sdio_oob_irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_platform_notify_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wwd_bus.o(.text)
</UL>
<P><STRONG><a name="[215]"></a>sdio_enable_bus_irq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wwd_bus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_enable_high_speed_sdio
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_sdio_transfer
</UL>

<P><STRONG><a name="[211]"></a>sdio_disable_bus_irq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wwd_bus.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_bus_deinit
</UL>

<P><STRONG><a name="[213]"></a>sdio_get_blocksize_dctrl</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, wwd_bus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_prepare_data_transfer
</UL>

<P><STRONG><a name="[212]"></a>sdio_prepare_data_transfer</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, wwd_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdio_prepare_data_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_get_blocksize_dctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_sdio_transfer
</UL>

<P><STRONG><a name="[216]"></a>find_optimal_block_size</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, wwd_bus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_sdio_transfer
</UL>

<P><STRONG><a name="[21a]"></a>calc_sum</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, mftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calc_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_cmd_config_recv
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check
</UL>

<P><STRONG><a name="[220]"></a>led_blink</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mftest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
</UL>

<P><STRONG><a name="[222]"></a>get_line</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, mftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_line &rArr; mf_get_rx_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_get_rx_buffer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssid_get
</UL>

<P><STRONG><a name="[224]"></a>mf_sta_start</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072<LI>Call Chain = mf_sta_start &rArr; wiced_wifi_join &rArr; wiced_wifi_prepare_join &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mf_test_main
</UL>

<P><STRONG><a name="[22d]"></a>get_chipID</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, otp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_enc_data
</UL>

<P><STRONG><a name="[22b]"></a>md5</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, otp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = md5 &rArr; md5_vector &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_enc_data
</UL>

<P><STRONG><a name="[22c]"></a>generate_enc_data</STRONG> (Thumb, 120 bytes, Stack size 88 bytes, otp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = generate_enc_data &rArr; aes_128_encrypt_block &rArr; aes_encrypt &rArr; AesSetKey &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlan_get_mac_address
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_encrypt_block
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_chipID
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_otp
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_otp
</UL>

<P><STRONG><a name="[234]"></a>MD5Transform</STRONG> (Thumb, 1802 bytes, Stack size 20 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MD5Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[233]"></a>MD5Final</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MD5Final &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
</UL>

<P><STRONG><a name="[235]"></a>MD5Update</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
</UL>

<P><STRONG><a name="[236]"></a>MD5Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
</UL>

<P><STRONG><a name="[7c]"></a>nfc_irq_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nfc_tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nfc_irq_handler &rArr; SetTimer &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nfc_tag.o(.text)
</UL>
<P><STRONG><a name="[24d]"></a>nfc_gpio_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nfc_tag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nfc_gpio_init &rArr; wiced_gpio_input_irq_enable &rArr; gpio_irq_enable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_input_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFC_TAG_INIT
</UL>

<P><STRONG><a name="[2e1]"></a>_dns_pack_name</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _dns_pack_name
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_req
</UL>

<P><STRONG><a name="[2e3]"></a>send_req</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, dns.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = send_req &rArr; udp_raw_packet &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intel16
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_raw_packet
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dns_pack_name
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tick
</UL>

<P><STRONG><a name="[344]"></a>tcp_free_socket</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_unthread
</UL>

<P><STRONG><a name="[357]"></a>socket_in_loop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_handler
</UL>

<P><STRONG><a name="[3a2]"></a>min</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_read
</UL>

<P><STRONG><a name="[3ab]"></a>AddCA</STRONG> (Thumb, 110 bytes, Stack size 128 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCert
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeSigner
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDecodedCert
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDecodedCert
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
</UL>

<P><STRONG><a name="[3b0]"></a>PemToDer</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base64Decode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessFile
</UL>

<P><STRONG><a name="[3b2]"></a>ProcessFile</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ssl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PemToDer
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddCA
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CTX_use_certificate_chain_file
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CTX_use_PrivateKey_file
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CTX_use_certificate_file
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSL_CTX_load_verify_locations
</UL>

<P><STRONG><a name="[416]"></a>min</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cyassl_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillData
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherList
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>

<P><STRONG><a name="[3d6]"></a>GetSEQIncrement</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSEQIncrement
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoApplicationData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmac
</UL>

<P><STRONG><a name="[3d7]"></a>c32toa</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cyassl_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmac
</UL>

<P><STRONG><a name="[3d5]"></a>c16toa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cyassl_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmac
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHelloDone
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHello
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
</UL>

<P><STRONG><a name="[3d4]"></a>GetMacSecret</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cyassl_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hmac
</UL>

<P><STRONG><a name="[7d]"></a>Hmac</STRONG> (Thumb, 314 bytes, Stack size 440 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = Hmac &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Final
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSha
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMd5
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMacSecret
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c32toa
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSEQIncrement
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cyassl_int.o(.text)
</UL>
<P><STRONG><a name="[415]"></a>c32to24</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cyassl_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHelloDone
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHello
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
</UL>

<P><STRONG><a name="[3fe]"></a>c24to32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cyassl_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHandShakeHeader
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificate
</UL>

<P><STRONG><a name="[3f8]"></a>ato16</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cyassl_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOldClientHello
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordHeader
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateRequest
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
</UL>

<P><STRONG><a name="[3e1]"></a>HashOutput</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = HashOutput &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHelloDone
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendServerHello
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientKeyExchange
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendClientHello
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCertificate
</UL>

<P><STRONG><a name="[3e2]"></a>HashInput</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = HashInput &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
</UL>

<P><STRONG><a name="[3e4]"></a>LastError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cyassl_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receive
</UL>

<P><STRONG><a name="[40e]"></a>SetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cyassl_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply_tinywait
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
</UL>

<P><STRONG><a name="[40d]"></a>IsNonBlocking</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cyassl_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply_tinywait
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessReply
</UL>

<P><STRONG><a name="[3e3]"></a>Receive</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160<LI>Call Chain = Receive &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_fastread
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sock_dataready
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LastError
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcessReply
</UL>

<P><STRONG><a name="[3e5]"></a>Wait</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = Wait &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcessReply
</UL>

<P><STRONG><a name="[3e8]"></a>DoAlert</STRONG> (Thumb, 172 bytes, Stack size 88 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DoAlert &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcessReply
</UL>

<P><STRONG><a name="[3e9]"></a>DoApplicationData</STRONG> (Thumb, 284 bytes, Stack size 104 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DoApplicationData &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSEQIncrement
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcessReply
</UL>

<P><STRONG><a name="[3ea]"></a>BuildSHA</STRONG> (Thumb, 118 bytes, Stack size 240 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = BuildSHA &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFinished
</UL>

<P><STRONG><a name="[3eb]"></a>BuildMD5</STRONG> (Thumb, 118 bytes, Stack size 248 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BuildMD5 &rArr; Md5Update &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Final
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildFinished
</UL>

<P><STRONG><a name="[3ec]"></a>BuildFinished</STRONG> (Thumb, 102 bytes, Stack size 208 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = BuildFinished &rArr; BuildTlsFinished &rArr; PRF &rArr; p_hash &rArr; HmacSetKey &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTlsFinished
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMD5
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildSHA
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcessReply
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
</UL>

<P><STRONG><a name="[3ee]"></a>DoClientKeyExchange</STRONG> (Thumb, 336 bytes, Stack size 176 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3744<LI>Call Chain = DoClientKeyExchange &rArr; RsaPrivateDecrypt &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateKeyDecode
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecrypt
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaEncryptSize
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRsaKey
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRsaKey
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
</UL>

<P><STRONG><a name="[3f5]"></a>MatchSuite</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MatchSuite
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherSpecs
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessOldClientHello
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
</UL>

<P><STRONG><a name="[3f7]"></a>DoClientHello</STRONG> (Thumb, 410 bytes, Stack size 120 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = DoClientHello &rArr; DeriveTlsKeys &rArr; PRF &rArr; p_hash &rArr; HmacSetKey &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GenerateBlock
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveTlsKeys
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveKeys
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSuites
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatchSuite
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ato16
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSession
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
</UL>

<P><STRONG><a name="[3fc]"></a>DoFinished</STRONG> (Thumb, 266 bytes, Stack size 88 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DoFinished &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
</UL>

<P><STRONG><a name="[3fd]"></a>DoCertificate</STRONG> (Thumb, 368 bytes, Stack size 144 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4720<LI>Call Chain = DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_free
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c24to32
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCert
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDecodedCert
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeDecodedCert
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
</UL>

<P><STRONG><a name="[403]"></a>DoServerKeyExchange</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cyassl_int.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
</UL>

<P><STRONG><a name="[3ff]"></a>DoCertificateRequest</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DoCertificateRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ato16
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
</UL>

<P><STRONG><a name="[400]"></a>DoServerHello</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560<LI>Call Chain = DoServerHello &rArr; DeriveTlsKeys &rArr; PRF &rArr; p_hash &rArr; HmacSetKey &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCipherSpecs
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveTlsKeys
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveKeys
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
</UL>

<P><STRONG><a name="[401]"></a>GetHandShakeHeader</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetHandShakeHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c24to32
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoHandShakeMsg
</UL>

<P><STRONG><a name="[402]"></a>DoHandShakeMsg</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4760<LI>Call Chain = DoHandShakeMsg &rArr; DoCertificate &rArr; ParseCert &rArr; ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHandShakeHeader
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerHello
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificateRequest
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoServerKeyExchange
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCertificate
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoFinished
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientHello
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoClientKeyExchange
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashInput
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_MSG
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_LEAVE
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYASSL_ENTER
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcessReply
</UL>

<P><STRONG><a name="[404]"></a>Decrypt</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Decrypt &rArr; AesCbcDecrypt &rArr; AesDecrypt &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3_CbcDecrypt
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc4Process
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesCbcDecrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptMessage
</UL>

<P><STRONG><a name="[408]"></a>DecryptMessage</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DecryptMessage &rArr; Decrypt &rArr; AesCbcDecrypt &rArr; AesDecrypt &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcessReply
</UL>

<P><STRONG><a name="[409]"></a>GetRecordHeader</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetRecordHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ato16
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcessReply
</UL>

<P><STRONG><a name="[40a]"></a>ProcessOldClientHello</STRONG> (Thumb, 828 bytes, Stack size 136 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664<LI>Call Chain = ProcessOldClientHello &rArr; DeriveTlsKeys &rArr; PRF &rArr; p_hash &rArr; HmacSetKey &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GenerateBlock
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveTlsKeys
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveKeys
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSuites
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatchSuite
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ato16
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSession
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoProcessReply
</UL>

<P><STRONG><a name="[411]"></a>Encrypt</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Encrypt &rArr; AesCbcEncrypt &rArr; AesEncrypt &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3_CbcEncrypt
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc4Process
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesCbcEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildMessage
</UL>

<P><STRONG><a name="[414]"></a>BuildMessage</STRONG> (Thumb, 302 bytes, Stack size 120 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = BuildMessage &rArr; HashOutput &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GenerateBlock
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypt
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HashOutput
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;c16toa
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFinished
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAlert
</UL>

<P><STRONG><a name="[417]"></a>FillData</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, cyassl_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FillData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveData
</UL>

<P><STRONG><a name="[7f]"></a>easy_link_fail</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, easylink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = easy_link_fail &rArr; wiced_wifi_remove_packet_filter &rArr;  wiced_send_iovar (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RptConfigmodeRslt
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_remove_packet_filter
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_monitor_mode
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_RptConfigmodeRslt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easylink.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>easy_link_success</STRONG> (Thumb, 86 bytes, Stack size 208 bytes, easylink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = easy_link_success &rArr; wiced_wifi_remove_packet_filter &rArr;  wiced_send_iovar (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RptConfigmodeRslt
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_remove_packet_filter
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_monitor_mode
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_RptConfigmodeRslt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easylink.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>get_ssid_key_end</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, easylink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = get_ssid_key_end &rArr; switch_channle &rArr; wiced_wifi_set_channel &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_channle
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easylink.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>get_ssid_key_start</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, easylink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1952<LI>Call Chain = get_ssid_key_start &rArr; wiced_wifi_add_packet_filter &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_channel
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer_uniq
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_remove_packet_filter
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_enable_packet_filter
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_packet_filter
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_add_packet_filter
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easylink.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>switch_channle</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, easylink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = switch_channle &rArr; wiced_wifi_set_channel &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer_uniq
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_channel
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_time
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easy_link_start
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ssid_key_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easylink.o(.text)
</UL>
<P><STRONG><a name="[42c]"></a>clear_get_table</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, easylink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_get_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_invalid_data
</UL>

<P><STRONG><a name="[42d]"></a>delete_invalid_data</STRONG> (Thumb, 608 bytes, Stack size 48 bytes, easylink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = delete_invalid_data &rArr; SetTimer_uniq &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer_uniq
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_get_table
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_network_process_raw_packet
</UL>

<P><STRONG><a name="[83]"></a>wiced_thread_func</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, wwd_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840<LI>Call Chain = wiced_thread_func &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_semaphore
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_deinit_semaphore
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_quit_sdpcm
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_available_bus_credits
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_process_interrupt
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_poke_wlan
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_allow_wlan_bus_to_sleep
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_receive_one_packet
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_one_packet
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_finish_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wwd_thread.o(.text)
</UL>
<P><STRONG><a name="[451]"></a>wiced_get_next_buffer_in_queue</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sdpcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wiced_get_next_buffer_in_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_quit_sdpcm
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_packet_to_send
</UL>

<P><STRONG><a name="[452]"></a>wiced_set_next_buffer_in_queue</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sdpcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wiced_set_next_buffer_in_queue
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_sdpcm_common
</UL>

<P><STRONG><a name="[453]"></a>wiced_send_sdpcm_common</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, sdpcm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = wiced_send_sdpcm_common &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_size
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_get_current_piece_data_pointer
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_set_semaphore
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_semaphore
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_set_next_buffer_in_queue
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_thread_notify
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_network_send_ethernet_data
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
</UL>

<P><STRONG><a name="[46b]"></a>wlu_parse_tlvs</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wlu_parse_tlvs
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_result_handler
</UL>

<P><STRONG><a name="[46a]"></a>wlu_is_wpa_ie</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = wlu_is_wpa_ie &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_result_handler
</UL>

<P><STRONG><a name="[84]"></a>scan_result_handler</STRONG> (Thumb, 746 bytes, Stack size 72 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = scan_result_handler &rArr; wlu_is_wpa_ie &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlu_is_wpa_ie
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wlu_parse_tlvs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wwd_wifi.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>wiced_join_events_handler</STRONG> (Thumb, 600 bytes, Stack size 24 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wiced_join_events_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_set_semaphore
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_is_ready_to_transceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wwd_wifi.o(.text)
</UL>
<P><STRONG><a name="[46d]"></a>wiced_wifi_prepare_join</STRONG> (Thumb, 936 bytes, Stack size 72 bytes, wwd_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = wiced_wifi_prepare_join &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_buffer_release
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_management_set_event_handler
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_ioctl_buffer
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_iovar_buffer
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_iovar
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_send_ioctl
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_delay_milliseconds
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join_specific
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_join
</UL>

<P><STRONG><a name="[86]"></a>wiced_handle_apsta_event</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, wwd_ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wiced_handle_apsta_event
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_set_semaphore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wwd_ap.o(.text)
</UL>
<P><STRONG><a name="[4a0]"></a>wiced_spi_configure_baudrate</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_init
</UL>

<P><STRONG><a name="[49a]"></a>spi_dma_transfer</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_output_high
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_transfer
</UL>

<P><STRONG><a name="[49c]"></a>spi_dma_config</STRONG> (Thumb, 326 bytes, Stack size 80 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_spi_transfer
</UL>

<P><STRONG><a name="[4cb]"></a>idle_power_down_hook</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_platform.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_power_down_hook
</UL>

<P><STRONG><a name="[4da]"></a>wiced_wifi_cooee_stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, easylink2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wiced_wifi_cooee_stop &rArr; wiced_wifi_disable_packet_filter &rArr; wiced_wifi_toggle_packet_filter &rArr;  wiced_send_iovar (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_remove_packet_filter
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_packet_filter
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_disable_monitor_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cooee_success
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cooee_fail
</UL>

<P><STRONG><a name="[4db]"></a>cooee_fail</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, easylink2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cooee_fail &rArr; wiced_wifi_cooee_stop &rArr; wiced_wifi_disable_packet_filter &rArr; wiced_wifi_toggle_packet_filter &rArr;  wiced_send_iovar (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RptConfigmodeRslt
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_RptConfigmodeRslt
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_cooee_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_channle
</UL>

<P><STRONG><a name="[4dc]"></a>cooee_success</STRONG> (Thumb, 184 bytes, Stack size 216 bytes, easylink2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink_user_data_result
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RptConfigmodeRslt
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;haieruhome_RptConfigmodeRslt
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_cooee_stop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easylink2_process_packet
</UL>

<P><STRONG><a name="[87]"></a>switch_channle</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, easylink2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = switch_channle &rArr; wiced_wifi_set_channel &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer_uniq
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_set_channel
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_time
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cooee_fail
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> easylink2.o(.text)
</UL>
<P><STRONG><a name="[4de]"></a>wiced_wps_thread_end</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wiced_wps_thread_end &rArr; wps_end &rArr; RptConfigmodeRslt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_end
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_finish_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_thread_msg_dequeue
</UL>

<P><STRONG><a name="[88]"></a>wps_thread_msg_dequeue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4048<LI>Call Chain = wps_thread_msg_dequeue &rArr; enrollee_process_event &rArr; wps_process_message &rArr; wps_process_m2 &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_thread_end
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wps_host.o(.text)
</UL>
<P><STRONG><a name="[4e1]"></a>wps_thread_msg_enqueue</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wps_thread_msg_enqueue &rArr; SetTimer &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_result_handler
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_join_rslt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_timer_tick
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_thread_timeout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wps_rx_packet
</UL>

<P><STRONG><a name="[8a]"></a>wiced_wps_rx_packet</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wiced_wps_rx_packet &rArr; wps_thread_msg_enqueue &rArr; SetTimer &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_thread_msg_enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wps_host.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>wiced_wps_thread_timeout</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wiced_wps_thread_timeout &rArr; wps_thread_msg_enqueue &rArr; SetTimer &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_time
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_thread_msg_enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wps_host.o(.text)
</UL>
<P><STRONG><a name="[4e2]"></a>wiced_wps_thread</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, wps_host.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_register_rx_callback
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTimer
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_time
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_get_mac_addr
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_start_enrollee
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;besl_wps_enrollee
</UL>

<P><STRONG><a name="[8b]"></a>wiced_wps_timer_tick</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wiced_wps_timer_tick &rArr; wps_thread_msg_enqueue &rArr; SetTimer &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_get_time
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_thread_msg_enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wps_host.o(.text)
</UL>
<P><STRONG><a name="[4e8]"></a>wiced_wps_join_rslt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wiced_wps_join_rslt &rArr; wps_thread_msg_enqueue &rArr; SetTimer &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_thread_msg_enqueue
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_wifi_is_ready_to_transceive
</UL>
<BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_join
</UL>

<P><STRONG><a name="[8c]"></a>scan_result_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wps_host.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = scan_result_handler &rArr; wps_thread_msg_enqueue &rArr; SetTimer &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_thread_msg_enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wps_host.o(.text)
</UL>
<P><STRONG><a name="[4e6]"></a>bcmswap16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wps_host.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_hton16
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_hton16_ptr
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_send_eapol_packet
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;besl_wps_enrollee
</UL>

<P><STRONG><a name="[4e7]"></a>bcmswap32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wps_host.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_hton32_ptr
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_hton32
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;besl_wps_enrollee
</UL>

<P><STRONG><a name="[503]"></a>GetSector</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_reset
</UL>

<P><STRONG><a name="[501]"></a>flash_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[502]"></a>flash_reset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSector
</UL>

<P><STRONG><a name="[505]"></a>flash_write_data</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newimage_write
</UL>

<P><STRONG><a name="[506]"></a>Flash_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newimage_erase
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newimage_write
</UL>

<P><STRONG><a name="[507]"></a>Flash_UnInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashErase
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newimage_erase
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newimage_write
</UL>

<P><STRONG><a name="[523]"></a>send_packet_to_relay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serverpacket.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[521]"></a>send_packet_to_client</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, serverpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = send_packet_to_client &rArr; udp_raw_packet &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_raw_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[522]"></a>send_packet</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, serverpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = send_packet &rArr; send_packet_to_client &rArr; udp_raw_packet &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet_to_client
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet_to_relay
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_inform
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNAK
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
</UL>

<P><STRONG><a name="[524]"></a>init_packet</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, serverpacket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = init_packet &rArr; init_header &rArr; add_simple_option &rArr; add_option_string &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_header
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_simple_option
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_inform
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendNAK
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
</UL>

<P><STRONG><a name="[527]"></a>add_bootp_options</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, serverpacket.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_inform
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOffer
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendACK
</UL>

<P><STRONG><a name="[52d]"></a>get_xor</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRF
</UL>

<P><STRONG><a name="[52c]"></a>PRF</STRONG> (Thumb, 144 bytes, Stack size 520 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = PRF &rArr; p_hash &rArr; HmacSetKey &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;p_hash
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xor
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveTlsKeys
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildTlsFinished
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeTlsMasterSecret
</UL>

<P><STRONG><a name="[535]"></a>MakeTLSv1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tls.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSv1_server_method
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSv1_client_method
</UL>

<P><STRONG><a name="[537]"></a>MakeTLSv1_1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tls.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSv1_1_server_method
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLSv1_1_client_method
</UL>

<P><STRONG><a name="[530]"></a>c16toa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_hmac
</UL>

<P><STRONG><a name="[532]"></a>c32toa</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_hmac
</UL>

<P><STRONG><a name="[531]"></a>GetSEQIncrement</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tls.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSEQIncrement
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_hmac
</UL>

<P><STRONG><a name="[533]"></a>GetMacSecret</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tls.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLS_hmac
</UL>

<P><STRONG><a name="[53e]"></a>SetPrefix</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, keys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMasterSecret
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveKeys
</UL>

<P><STRONG><a name="[53a]"></a>SetKeys</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, keys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SetKeys &rArr; Des3_SetKey &rArr; DesSetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3_SetKey
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc4SetKey
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreKeys
</UL>

<P><STRONG><a name="[547]"></a>min</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sha.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
</UL>

<P><STRONG><a name="[541]"></a>rotlFixed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sha.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWord32
</UL>

<P><STRONG><a name="[540]"></a>ByteReverseWord32</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotlFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
</UL>

<P><STRONG><a name="[542]"></a>ByteReverseWords</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, sha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWord32
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseBytes
</UL>

<P><STRONG><a name="[543]"></a>ByteReverseBytes</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, sha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ByteReverseBytes &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
</UL>

<P><STRONG><a name="[545]"></a>XorWords</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, sha.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorbuf
</UL>

<P><STRONG><a name="[544]"></a>xorbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sha.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWords
</UL>

<P><STRONG><a name="[546]"></a>Transform</STRONG> (Thumb, 1130 bytes, Stack size 352 bytes, sha.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotlFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
</UL>

<P><STRONG><a name="[548]"></a>AddLength</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sha.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
</UL>

<P><STRONG><a name="[54a]"></a>RsaPad</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, rsa.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GenerateBlock
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicEncrypt
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaSSL_Sign
</UL>

<P><STRONG><a name="[54b]"></a>RsaUnPad</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RsaUnPad &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecrypt
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaSSL_Verify
</UL>

<P><STRONG><a name="[54c]"></a>RsaFunction</STRONG> (Thumb, 398 bytes, Stack size 96 bytes, rsa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3512<LI>Call Chain = RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_unsigned_bin_size
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_to_unsigned_bin
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_sub
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_read_unsigned_bin
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mulmod
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_mul
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_init
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_exptmod
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_add
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicEncrypt
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPrivateDecrypt
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaSSL_Sign
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaSSL_Verify
</UL>

<P><STRONG><a name="[561]"></a>min</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cyssl_md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
</UL>

<P><STRONG><a name="[55b]"></a>rotlFixed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cyssl_md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWord32
</UL>

<P><STRONG><a name="[55a]"></a>ByteReverseWord32</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cyssl_md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotlFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
</UL>

<P><STRONG><a name="[55c]"></a>ByteReverseWords</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cyssl_md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWord32
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseBytes
</UL>

<P><STRONG><a name="[55d]"></a>ByteReverseBytes</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, cyssl_md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
</UL>

<P><STRONG><a name="[55f]"></a>XorWords</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, cyssl_md5.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorbuf
</UL>

<P><STRONG><a name="[55e]"></a>xorbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cyssl_md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWords
</UL>

<P><STRONG><a name="[560]"></a>Transform</STRONG> (Thumb, 1942 bytes, Stack size 24 bytes, cyssl_md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotlFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Final
</UL>

<P><STRONG><a name="[562]"></a>AddLength</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cyssl_md5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Final
</UL>

<P><STRONG><a name="[564]"></a>rotlFixed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, des3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPERM
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPERM
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWord32
</UL>

<P><STRONG><a name="[56a]"></a>rotrFixed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, des3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesRawProcessBlock
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPERM
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPERM
</UL>

<P><STRONG><a name="[563]"></a>ByteReverseWord32</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotlFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3ProcessBlock
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
</UL>

<P><STRONG><a name="[565]"></a>ByteReverseWords</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, des3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWord32
</UL>
<BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseBytes
</UL>

<P><STRONG><a name="[566]"></a>ByteReverseBytes</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, des3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
</UL>

<P><STRONG><a name="[568]"></a>XorWords</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XorWords
</UL>
<BR>[Called By]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorbuf
</UL>

<P><STRONG><a name="[567]"></a>xorbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xorbuf &rArr; XorWords
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWords
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3_CbcEncrypt
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3_CbcDecrypt
</UL>

<P><STRONG><a name="[569]"></a>IPERM</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IPERM
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotrFixed
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotlFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3ProcessBlock
</UL>

<P><STRONG><a name="[56b]"></a>FPERM</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FPERM
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotrFixed
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotlFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3ProcessBlock
</UL>

<P><STRONG><a name="[56c]"></a>DesSetKey</STRONG> (Thumb, 398 bytes, Stack size 156 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DesSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3_SetKey
</UL>

<P><STRONG><a name="[56d]"></a>Reverse</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, des3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3_SetKey
</UL>

<P><STRONG><a name="[56f]"></a>Des3ProcessBlock</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Des3ProcessBlock &rArr; DesRawProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DesRawProcessBlock
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPERM
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPERM
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWord32
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3_CbcEncrypt
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3_CbcDecrypt
</UL>

<P><STRONG><a name="[576]"></a>GetCertHeader</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2600<LI>Call Chain = GetCertHeader &rArr; GetInt &rArr; cyssl_mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInt
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExplicitVersion
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyssl_mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToKey
</UL>

<P><STRONG><a name="[577]"></a>GetAlgoId</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetAlgoId &rArr; GetSequence &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCert
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToKey
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[578]"></a>StoreKey</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = StoreKey &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[579]"></a>GetKey</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetKey &rArr; StoreKey &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreKey
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoId
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToKey
</UL>

<P><STRONG><a name="[57a]"></a>GetName</STRONG> (Thumb, 384 bytes, Stack size 144 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = GetName &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSha
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSet
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToKey
</UL>

<P><STRONG><a name="[57c]"></a>DateGreaterThan</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, asn.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateLessThan
</UL>

<P><STRONG><a name="[57b]"></a>DateLessThan</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DateGreaterThan
</UL>

<P><STRONG><a name="[57e]"></a>btoi</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, asn.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
</UL>

<P><STRONG><a name="[57d]"></a>GetTime</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, asn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btoi
</UL>

<P><STRONG><a name="[580]"></a>ValidateDate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, asn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDate
</UL>

<P><STRONG><a name="[57f]"></a>GetDate</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GetDate &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateDate
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValidity
</UL>

<P><STRONG><a name="[581]"></a>GetValidity</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GetValidity &rArr; GetDate &rArr; GetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSequence
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeToKey
</UL>

<P><STRONG><a name="[582]"></a>DecodeToKey</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2624<LI>Call Chain = DecodeToKey &rArr; GetCertHeader &rArr; GetInt &rArr; cyssl_mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_lshd &rArr; mp_grow &rArr; mxchipTick &rArr; free_tcp_list &rArr; socket_clean &rArr; sock_ssl_close &rArr; SSL_shutdown &rArr; SendAlert &rArr; SendWrapper &rArr; Send &rArr; sock_write &rArr; tcp_tick &rArr; wlan_tick &rArr; sta_retry_tick &rArr; join_scan &rArr; wiced_wifi_scan &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValidity
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetName
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAlgoId
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCertHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCert
</UL>

<P><STRONG><a name="[583]"></a>GetSignature</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetSignature &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mem_malloc
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLength
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCert
</UL>

<P><STRONG><a name="[584]"></a>SetDigest</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetDigest &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSignature
</UL>

<P><STRONG><a name="[586]"></a>BytePrecision</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, asn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
</UL>

<P><STRONG><a name="[585]"></a>SetLength</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BytePrecision
</UL>
<BR>[Called By]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlgoID
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSequence
</UL>

<P><STRONG><a name="[587]"></a>SetSequence</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetSequence &rArr; SetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSignature
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlgoID
</UL>

<P><STRONG><a name="[588]"></a>SetAlgoID</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SetAlgoID &rArr; SetSequence &rArr; SetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSequence
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLength
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSignature
</UL>

<P><STRONG><a name="[589]"></a>EncodeSignature</STRONG> (Thumb, 88 bytes, Stack size 88 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EncodeSignature &rArr; SetAlgoID &rArr; SetSequence &rArr; SetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlgoID
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSequence
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDigest
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfirmSignature
</UL>

<P><STRONG><a name="[58a]"></a>ConfirmSignature</STRONG> (Thumb, 244 bytes, Stack size 968 bytes, asn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4536<LI>Call Chain = ConfirmSignature &rArr; RsaSSL_Verify &rArr; RsaFunction &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaFinal
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaPublicKeyDecode
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Final
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSha
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRsaKey
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMd5
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRsaKey
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncodeSignature
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsaSSL_Verify
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCert
</UL>

<P><STRONG><a name="[58b]"></a>MakeByte</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, arc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MakeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc4Process
</UL>

<P><STRONG><a name="[58d]"></a>rotlFixed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cyssl_aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWord32
</UL>

<P><STRONG><a name="[58c]"></a>ByteReverseWord32</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cyssl_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotlFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesDecrypt
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesEncrypt
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
</UL>

<P><STRONG><a name="[58e]"></a>ByteReverseWords</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cyssl_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWord32
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseBytes
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesSetKey
</UL>

<P><STRONG><a name="[58f]"></a>ByteReverseBytes</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, cyssl_aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
</UL>

<P><STRONG><a name="[591]"></a>XorWords</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, cyssl_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XorWords
</UL>
<BR>[Called By]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorbuf
</UL>

<P><STRONG><a name="[590]"></a>xorbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cyssl_aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xorbuf &rArr; XorWords
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWords
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesCbcEncrypt
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AesCbcDecrypt
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_decrypt_pad
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_cbc_encrypt_pad
</UL>

<P><STRONG><a name="[596]"></a>init_wlan_powersave_clock</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wwd_platform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = init_wlan_powersave_clock &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_init
</UL>

<P><STRONG><a name="[598]"></a>platform_reset_wlan_powersave_clock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wwd_platform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_output_low
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_deinit
</UL>

<P><STRONG><a name="[59c]"></a>wiced_get_core_address</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wwd_internal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_reset_device_core
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_disable_device_core
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_device_core_is_up
</UL>

<P><STRONG><a name="[5a1]"></a>sdio_cmd53</STRONG> (Thumb, 210 bytes, Stack size 64 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sdio_cmd53 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_sdio_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_sdio_transfer
</UL>

<P><STRONG><a name="[5a2]"></a>sdio_cmd52</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_platform_sdio_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_sdio_transfer
</UL>

<P><STRONG><a name="[5a3]"></a>wiced_sdio_transfer</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_cmd52
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_cmd53
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_transfer_bytes
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_register_value
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_register_value
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_backplane_value
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_backplane_value
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_init
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_frame
</UL>

<P><STRONG><a name="[5a5]"></a>wiced_read_register_value</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wiced_read_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_sdio_transfer
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_download_firmware
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_init
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_ensure_wlan_bus_is_up
</UL>

<P><STRONG><a name="[5a6]"></a>wiced_download_firmware</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = wiced_download_firmware &rArr; wiced_write_wifi_nvram_image &rArr; write_image &rArr; wiced_set_backplane_window &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_wifi_nvram_image
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_wifi_firmware_image
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_register_value
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_register_value
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_backplane_value
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_reset_device_core
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_disable_device_core
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_device_core_is_up
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_rtos_delay_milliseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_init
</UL>

<P><STRONG><a name="[5aa]"></a>wiced_abort_read</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wwd_bus_protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wiced_abort_read &rArr; wiced_write_backplane_value &rArr; wiced_set_backplane_window &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_register_value
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_backplane_value
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_read_frame
</UL>

<P><STRONG><a name="[5ab]"></a>wps_send_start</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = wps_send_start &rArr; wps_host_send_eapol_packet &rArr; wiced_network_send_ethernet_data &rArr; wiced_send_sdpcm_common &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_send_eapol_packet
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_create_eapol_packet
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[8e]"></a>wps_scan_result_handler</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = wps_scan_result_handler &rArr; wps_host_store_ap &rArr; tlv_find_tlv8
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_find_tlv16
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_find_tlv8
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;host_hton16
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_store_ap
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wps_enrollee.o(.text)
</UL>
<P><STRONG><a name="[5ae]"></a>wps_find_and_join_ap</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088<LI>Call Chain = wps_find_and_join_ap &rArr; wps_host_join &rArr; wiced_wifi_join &rArr; wiced_wifi_prepare_join &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_get_ap_list_size
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_retrieve_ap
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_join
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_restart
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[5b1]"></a>wps_cleanup</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = wps_cleanup &rArr; wps_host_remove_vendor_ie &rArr; wiced_wifi_manage_custom_ie &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_free_unfragmented_packet
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_remove_vendor_ie
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[5b2]"></a>create_wps_assoc_request_ie</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = create_wps_assoc_request_ie &rArr; tlv_write_value &rArr; host_hton32_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_write_value
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_write_header
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[5b5]"></a>create_wps_probe_ie</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = create_wps_probe_ie &rArr; tlv_write_value &rArr; host_hton32_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_write_value
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_write_header
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[5b6]"></a>wps_restart</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096<LI>Call Chain = wps_restart &rArr; wps_find_and_join_ap &rArr; wps_host_join &rArr; wiced_wifi_join &rArr; wiced_wifi_prepare_join &rArr; wiced_management_set_event_handler &rArr; wiced_send_iovar &rArr; wiced_send_ioctl &rArr; host_rtos_get_semaphore &rArr; wiced_poll_all &rArr; wiced_receive_one_packet &rArr; wiced_process_sdpcm &rArr; host_network_process_raw_packet &rArr; easylink2_process_packet &rArr; cooee_success &rArr; easylink_user_data_result &rArr; getNetPara &rArr; ifconfig &rArr; ifup &rArr; ifctl_tick &rArr; dhcp_init &rArr; dhcp_tick &rArr; dhcp_send &rArr; udp_write &rArr; pkt_gather &rArr; low_level_output &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_find_and_join_ap
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_stop_timer
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_leave
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[5b8]"></a>wps_send_packet</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = wps_send_packet &rArr; wps_host_send_eapol_packet &rArr; wiced_network_send_ethernet_data &rArr; wiced_send_sdpcm_common &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_send_eapol_packet
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_identity
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m5
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m7
</UL>

<P><STRONG><a name="[5b9]"></a>write_vendor_extension</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_vendor_extension
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_prepare_basic_packet
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m5
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m7
</UL>

<P><STRONG><a name="[5ba]"></a>wps_send_m7</STRONG> (Thumb, 436 bytes, Stack size 144 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = wps_send_m7 &rArr; hmac_sha256 &rArr; SHA256_Update &rArr; sha256_block_data_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_encrypt_data
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_write_value
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_init
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_finalize
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_append
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap32
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vendor_extension
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_packet
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_get_eapol_data
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_create_eapol_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[5c1]"></a>wps_send_m5</STRONG> (Thumb, 412 bytes, Stack size 144 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = wps_send_m5 &rArr; hmac_sha256 &rArr; SHA256_Update &rArr; sha256_block_data_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_encrypt_data
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_write_value
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_init
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_finalize
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_append
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap32
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vendor_extension
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_packet
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_get_eapol_data
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_create_eapol_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[5c2]"></a>wps_send_m3</STRONG> (Thumb, 634 bytes, Stack size 512 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = wps_send_m3 &rArr; hmac_sha256 &rArr; SHA256_Update &rArr; sha256_block_data_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_write_value
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_init
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_finalize
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_append
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap32
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vendor_extension
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_packet
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_random_bytes
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_get_eapol_data
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_create_eapol_packet
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[5c4]"></a>wps_send_m1</STRONG> (Thumb, 928 bytes, Stack size 256 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3736<LI>Call Chain = wps_send_m1 &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_write_value
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nn_swap
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap32
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vendor_extension
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_packet
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_random_bytes
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_get_eapol_data
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_create_eapol_packet
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[5c6]"></a>wps_send_identity</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = wps_send_identity &rArr; wps_send_packet &rArr; wps_host_send_eapol_packet &rArr; wiced_network_send_ethernet_data &rArr; wiced_send_sdpcm_common &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_packet
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_get_eapol_data
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_create_eapol_packet
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[5c7]"></a>wps_prepare_basic_packet</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wps_prepare_basic_packet &rArr; wps_host_create_eapol_packet &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_write_value
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap32
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vendor_extension
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_get_eapol_data
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_create_eapol_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_ack
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_done
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_nack
</UL>

<P><STRONG><a name="[5c8]"></a>wps_send_nack</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wps_send_nack &rArr; wps_prepare_basic_packet &rArr; wps_host_create_eapol_packet &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_write_value
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_prepare_basic_packet
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_send_eapol_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
</UL>

<P><STRONG><a name="[5c9]"></a>wps_send_done</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wps_send_done &rArr; wps_prepare_basic_packet &rArr; wps_host_create_eapol_packet &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_prepare_basic_packet
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_send_eapol_packet
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
</UL>

<P><STRONG><a name="[5ca]"></a>wps_process_wps_message</STRONG> (Thumb, 548 bytes, Stack size 64 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = wps_process_wps_message &rArr; progressive_hmac_finalize &rArr; SHA256_Update &rArr; sha256_block_data_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_init
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_finalize
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_append
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_find_tlv8
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2d
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
</UL>

<P><STRONG><a name="[5cb]"></a>wps_process_m8</STRONG> (Thumb, 352 bytes, Stack size 160 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = wps_process_m8 &rArr; wps_decrypt_data &rArr; aes_cbc_decrypt_pad &rArr; AesSetKey &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_data
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_find_tlv16
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wps_message
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_store_credential
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
</UL>

<P><STRONG><a name="[5cd]"></a>wps_process_m6</STRONG> (Thumb, 260 bytes, Stack size 488 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = wps_process_m6 &rArr; hmac_sha256 &rArr; SHA256_Update &rArr; sha256_block_data_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_data
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_read_value
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wps_message
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
</UL>

<P><STRONG><a name="[5cf]"></a>wps_process_m4</STRONG> (Thumb, 260 bytes, Stack size 488 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = wps_process_m4 &rArr; hmac_sha256 &rArr; SHA256_Update &rArr; sha256_block_data_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_data
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_read_value
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wps_message
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
</UL>

<P><STRONG><a name="[5d0]"></a>wps_send_ack</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wps_send_ack &rArr; wps_prepare_basic_packet &rArr; wps_host_create_eapol_packet &rArr; host_buffer_get &rArr; crypto_mem_malloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_prepare_basic_packet
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_send_eapol_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
</UL>

<P><STRONG><a name="[5d1]"></a>wps_process_m2</STRONG> (Thumb, 426 bytes, Stack size 472 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3952<LI>Call Chain = wps_process_m2 &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_kdf
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_data
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_init
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_finalize
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;progressive_hmac_append
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA256
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wps_message
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
</UL>

<P><STRONG><a name="[5d4]"></a>wps_process_m2d</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = wps_process_m2d &rArr; wps_process_wps_message &rArr; progressive_hmac_finalize &rArr; SHA256_Update &rArr; sha256_block_data_order &rArr; sha256_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wps_message
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
</UL>

<P><STRONG><a name="[5d5]"></a>wps_send_frag_ack</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = wps_send_frag_ack &rArr; wps_host_send_eapol_packet &rArr; wiced_network_send_ethernet_data &rArr; wiced_send_sdpcm_common &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap32
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_send_eapol_packet
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_get_eapol_data
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_create_eapol_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
</UL>

<P><STRONG><a name="[5d7]"></a>get_wps_packet_data</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wps_enrollee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
</UL>

<P><STRONG><a name="[5d6]"></a>wps_process_message</STRONG> (Thumb, 932 bytes, Stack size 56 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4008<LI>Call Chain = wps_process_message &rArr; wps_process_m2 &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; cyssl_mp_exptmod &rArr;  cyssl_mp_exptmod (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlv_read_value
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcmswap16
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wps_packet_data
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_frag_ack
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2d
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_ack
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_done
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_nack
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_identity
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m5
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m7
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_restart
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_cleanup
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_free_unfragmented_packet
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_retrieve_unfragmented_packet
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_append_fragment
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_init_unfragmented_packet
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_random_bytes
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_stop_timer
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_leave
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_host_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enrollee_process_event
</UL>

<P><STRONG><a name="[5ad]"></a>bcmswap16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wps_enrollee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_message
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_frag_ack
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wps_message
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_prepare_basic_packet
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_identity
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m5
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m7
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_vendor_extension
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_scan_result_handler
</UL>

<P><STRONG><a name="[5bb]"></a>bcmswap32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wps_enrollee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_frag_ack
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_prepare_basic_packet
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m1
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m3
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m5
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_send_m7
</UL>

<P><STRONG><a name="[618]"></a>InitHmac</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitHmac
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSha
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMd5
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSha256
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacSetKey
</UL>

<P><STRONG><a name="[61c]"></a>HmacKeyInnerHash</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hmac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = HmacKeyInnerHash &rArr; ShaUpdate &rArr; Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShaUpdate
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Md5Update
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacUpdate
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HmacFinal
</UL>

<P><STRONG><a name="[61d]"></a>write_image</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, wwd_firmware.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = write_image &rArr; wiced_set_backplane_window &rArr; wiced_write_register_value &rArr; wiced_sdio_transfer &rArr; sdio_cmd52 &rArr; host_platform_sdio_transfer &rArr;  host_rtos_get_semaphore (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetWatchDog
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_bus_transfer_bytes
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_set_backplane_window
</UL>
<BR>[Called By]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_wifi_nvram_image
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiced_write_wifi_firmware_image
</UL>

<P><STRONG><a name="[624]"></a>sha256_block</STRONG> (Thumb, 968 bytes, Stack size 136 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sha256_block
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_block_data_order
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_block_host_order
</UL>

<P><STRONG><a name="[636]"></a>min</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cyssl_sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
</UL>

<P><STRONG><a name="[62f]"></a>rotlFixed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cyssl_sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWord32
</UL>

<P><STRONG><a name="[635]"></a>rotrFixed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cyssl_sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transform
</UL>

<P><STRONG><a name="[62e]"></a>ByteReverseWord32</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cyssl_sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotlFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
</UL>

<P><STRONG><a name="[630]"></a>ByteReverseWords</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cyssl_sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWord32
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseBytes
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Final
</UL>

<P><STRONG><a name="[631]"></a>ByteReverseBytes</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, cyssl_sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ByteReverseBytes &rArr; ByteReverseWords &rArr; ByteReverseWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteReverseWords
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Final
</UL>

<P><STRONG><a name="[633]"></a>XorWords</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, cyssl_sha256.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xorbuf
</UL>

<P><STRONG><a name="[632]"></a>xorbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cyssl_sha256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorWords
</UL>

<P><STRONG><a name="[634]"></a>Transform</STRONG> (Thumb, 1418 bytes, Stack size 320 bytes, cyssl_sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotrFixed
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Final
</UL>

<P><STRONG><a name="[637]"></a>AddLength</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cyssl_sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Update
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sha256Final
</UL>

<P><STRONG><a name="[66d]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf$8
</UL>

<P><STRONG><a name="[673]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[672]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[91]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL>
<P><STRONG><a name="[92]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[671]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
